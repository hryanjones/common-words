[{"word":"0L","context":[["@SerialVersionUID(0L)",924],["var sum = 0L",457],["0L",223],["recoveryPoint = 0L,",168],["var count = 0L",110],["var received = 0L",105],["var total = 0L",100],["var offset = 0L",99],["assertEquals(hw, hwFile1.read.getOrElse(TopicAndPartition(topic, 0), 0L))",98],["0L,",98]]},{"word":"1L","context":[["@SerialVersionUID(1L)",2351],[".setStart(1L)",104],["assert(1L === 1)",100],["assert(1 === 1L)",80],["assert(!(1L !== 1))",80],["assert(!(1 !== 1L))",64],["-1L",55],["* scala&gt; 1 === 1L",54],["count shouldEqual 1L",46],["Mat.nflops += 1L * a.length",44]]},{"word":"A","context":[["* A \"Related Module\" means a set of sources files including their",1872],["class A {",1230],["* @tparam A",794],["|class A {",486],["object A {",468],["class A",350],["\"A Stack\" when {",283],["* Shadowsocks - A shadowsocks client for Android",266],["\"A subject\" - {",252],["describe(\"A subject\") {",252]]},{"word":"API","context":[["**     ________ ___   / /  ___     Scala API                            **",1001],["* INTERNAL API",843],["if (set_addr.size > 1) throw new InternalError(\"API heap allocation: Size of env address is \" + set_addr.size)",521],["*     Guillaume DUBUISSON DUPLESSIS <guillaume.dubuisson_duplessis@insa-rouen.fr> - initial API and implementation",231],["* Java API",204],["**     ________ ___   / /  ___      __ ____  Scala.js API               **",179],["* Java API.",134],["* @param messagesApi The Play messages API.",134],["httpLayer.url(API.format(\"my.access.token\")) returns requestHolder",123],["System.err.println(\"* Warning: Semantics of the DOM API function '\"+fun+\"' are not defined.\")",98]]},{"word":"Action","context":[["def index = Action {",880],["import play.api.mvc.{Action, Controller}",722],["import play.api.mvc.Action",627],["Action {",178],["def index = Action { implicit request =>",162],["object Action {",104],["Action.async {",102],["def present = Action { implicit request =>",102],["def login = Action { implicit request =>",79],["import play.api.mvc.{Controller, Action}",68]]},{"word":"Actor","context":[["import akka.actor.Actor",2890],["import scala.actors.Actor",352],["import scala.actors.Actor._",318],["import akka.actor.{Actor, Props}",309],["import akka.actor.{Actor, ActorRef}",305],["import akka.actor.{Actor, ActorLogging}",281],["import akka.actor.{Actor, ActorRef, Props}",257],["extends Actor",255],["import akka.actor.Actor.Receive",207],["override def receive: Actor.Receive = {",195]]},{"word":"ActorRef","context":[["import akka.actor.ActorRef",3240],["import akka.actor.{ActorRef, ActorSystem}",308],["import akka.actor.{Actor, ActorRef}",305],["import akka.actor.{ActorRef, ActorSystem, Props}",274],["import akka.actor.{ActorRef, Props}",267],["import akka.actor.{Actor, ActorRef, Props}",257],["import akka.actor.{ ActorRef, ActorSystem }",216],["import akka.actor.{ActorRef, Actor}",176],["import akka.actor.{Actor, ActorLogging, ActorRef, Props}",158],["import akka.actor.{ ActorRef, ActorSystem, Props }",143]]},{"word":"ActorSystem","context":[["import akka.actor.ActorSystem",6330],["import akka.actor.{ActorSystem, Props}",783],["implicit val system = ActorSystem()",565],["system: ActorSystem,",454],["import akka.actor.{Props, ActorSystem}",393],["import akka.actor.{ActorRef, ActorSystem}",308],["import akka.actor.{ActorRef, ActorSystem, Props}",274],["val system = ActorSystem()",227],["import akka.actor.{ ActorRef, ActorSystem }",216],["implicit val system: ActorSystem",195]]},{"word":"Any","context":[["override def equals(other: Any): Boolean = other match {",959],["override def equals(other: Any) = other match {",602],["override def equals(that: Any) = that match {",576],["style: U[js.Any] = undefined,",485],["override def equals(that: Any): Boolean = that match {",447],["override def equals(other: Any): Boolean = {",389],["override def emitNode(sym: Sym[Any], rhs: Def[Any]) = rhs match {",353],["override def emitNode(sym: Sym[Any], rhs: Def[Any]) = rhs match {",353],["override def equals(other: Any): Boolean =",341],["override def equals(o: Any) = o match {",320]]},{"word":"AnyRef","context":[["override def process(msg: AnyRef) {",498],["override def process(theMsg: AnyRef) {",216],["var postBody: AnyRef = null",135],["implicitly[ClassTag[AnyRef]].asInstanceOf[ClassTag[T]]",108],["implicitly[ClassManifest[AnyRef]].asInstanceOf[ClassManifest[T]]",98],["}.asInstanceOf[AnyRef]",78],["if (outmat.asInstanceOf[AnyRef] != null || !Mat.useCache) {",72],["private def readResolve: AnyRef = {",72],["|      }.asInstanceOf[AnyRef]",70],["override def get(i: Int): AnyRef = i match {",67]]},{"word":"AppDefinition","context":[["val app = AppDefinition(",774],["AppDefinition(",400],["import mesosphere.marathon.state.AppDefinition",167],["val app = AppDefinition(id = \"test-app\".toPath, instances = 1)",114],["import mesosphere.marathon.state.{ AppDefinition, PathId }",106],["app: AppDefinition,",103],["val store = new MarathonStore[AppDefinition](state, metrics, () => AppDefinition(), \"app:\")",85],["val store = new MarathonStore[AppDefinition](state, metrics, () => AppDefinition(), \"app:\")",85],["app = AppDefinition(",84],["val app = AppDefinition(\"/myApp\".toPath, instances = 5)",71]]},{"word":"Arbitrary","context":[["import org.scalacheck.Arbitrary",767],["import org.scalacheck.Arbitrary._",524],["import org.scalacheck.{Arbitrary, Gen}",442],["Arbitrary {",410],["import Arbitrary._",370],["import org.scalacheck.Arbitrary.arbitrary",338],["import Arbitrary.arbitrary",272],["Arbitrary(for {",172],["import org.scalacheck.{ Arbitrary, Gen }",134],["import org.scalacheck.{Gen, Arbitrary}",118]]},{"word":"Args","context":[["val status = suite.run(None, Args(reporter))",752],["a.run(None, Args(rep))",666],["val status = suite.run(None, Args(reporter = rep))",419],["* @param args the <code>Args</code> for this run",396],["override def run(testName: Option[String], args: Args): Status = {",391],["a.run(None, Args(SilentReporter))",370],["s.run(None, Args(rep))",345],["a.run(None, Args(repA))",247],["protected override def runTest(testName: String, args: Args): Status = {",183],["s.run(None, Args(SilentReporter))",173]]},{"word":"Array","context":[["def main(args: Array[String]) {",11494],["def main(args: Array[String]): Unit = {",6748],["def main(args: Array[String]) = {",1296],["Array(",1160],["|  def main(args: Array[String]) {",1041],["var resBytes = Array.ofDim[Byte](rBytes.length)",627],["@ApiImplicitParams(Array(",513],["def main(args : Array[String]) {",410],["@ApiResponses(Array(",397],["def toByteArray: Array[Byte] = {",334]]},{"word":"ArrayBuffer","context":[["import scala.collection.mutable.ArrayBuffer",7092],["import collection.mutable.ArrayBuffer",560],["import scala.collection.mutable.{ArrayBuffer, HashMap}",158],["import scala.collection.mutable.{ArrayBuffer, HashMap, HashSet}",119],["import scala.collection.mutable.{ArrayBuffer, ListBuffer}",118],["ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,",117],["ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,",117],["import _root_.scala.collection.mutable.ArrayBuffer",78],["val cmd = new ArrayBuffer[String]",77],["val buf = new ArrayBuffer[String]",63]]},{"word":"Assert","context":[["import org.junit.Assert._",4383],["import junit.framework.Assert._",642],["import org.junit.Assert",497],["import Assert._",452],["import org.junit.Assert.assertEquals",395],["import org.junit.{Assert, Test}",303],["import org.junit.Assert.assertTrue",244],["import junit.framework.Assert",133],["import org.testng.Assert._",108],["Assert.assertTrue(resp.isDefined)",91]]},{"word":"Await","context":[["import scala.concurrent.Await",4064],["import scala.concurrent.{Await, Future}",1151],["import com.twitter.util.Await",668],["import com.twitter.util.{Await, Future}",542],["Await.result(",539],["val result = Await.result(future,duration)",492],["import scala.concurrent.{ Await, Future }",376],["Await.result(service(123))",289],["import scala.concurrent.{Await, ExecutionContext, Future}",250],["val result = Await.result(response, awaitMax)",250]]},{"word":"B","context":[["* @tparam B",237],["|class B {",217],["b: B Or Every[ERR],",200],["class B extends A {",195],["class B {",160],["class B",158],["* @tparam B The type of the request body.",153],["|class B extends A {",132],["def equalInferredTypes[A,B](a: A, b: B)(implicit eq: A =:= B) {}",125],["def equalInferredTypes[A,B](a: A, b: B)(implicit eq: A =:= B) {}",125]]},{"word":"Boolean","context":[["override def equals(other: Any): Boolean = other match {",959],["def isEmpty: Boolean",457],["hidden: U[Boolean] = undefined,",453],["draggable: U[Boolean] = undefined,",452],["spellCheck: U[Boolean] = undefined,",452],["override def equals(that: Any): Boolean = that match {",447],["val enabled: js.UndefOr[Boolean] = js.undefined",415],["override val enabled: js.UndefOr[Boolean] = enabledOuter",415],["val enabledOuter: js.UndefOr[Boolean] = enabled",415],["override def equals(other: Any): Boolean = {",389]]},{"word":"Byte","context":[["var resBytes = Array.ofDim[Byte](rBytes.length)",627],["def toByteArray: Array[Byte] = {",334],["val res = new Array[Byte](getSerializedSize)",316],["// Byte +- Byte",251],["// Byte +- Byte",251],["def apply(args: Seq[Array[Byte]]) = {",207],["val bytes = new Array[Byte](CAPACITY)",200],["val a1 = new Array[Byte](400)",198],["// Long +- Byte",188],["// Int +- Byte",188]]},{"word":"ByteBuffer","context":[["import java.nio.ByteBuffer",4897],["def writeTo(buffer: ByteBuffer) {",250],["import java.nio.{ByteBuffer, ByteOrder}",157],["value: Option[ByteBuffer],",70],["val bb = ByteBuffer.wrap(bytes)",70],["val buffer = ByteBuffer.allocate(size).put(Array.tabulate[Byte](size)(x => x.toByte))",61],["import java.nio.{ByteBuffer, MappedByteBuffer}",50],["import java.nio.{ByteOrder, ByteBuffer}",48],["import java.nio.{ ByteBuffer, ByteOrder }",46],["def hexString(bytes: Array[Byte]): String = hexString(ByteBuffer.wrap(bytes))",42]]},{"word":"C","context":[["class C {",287],["type S = String; type I = Int; type D = Double; type C = Char",219],["c: C Or Every[ERR],",190],["class C",156],["object C {",113],["// write the return type as `A => B => C`",94],["mergeValue: (C, V) => C,",92],["mergeValue: (C, V) => C,",92],["def partial1[A,B,C](a: A, f: (A,B) => C): B => C =",79],["def partial1[A,B,C](a: A, f: (A,B) => C): B => C =",79]]},{"word":"Class","context":[["valueClass: Class[_],",205],["keyClass: Class[_],",203],["Map.empty[String, Seq[Class[Exception]]],",196],["Class.forName(\"org.h2.Driver\")",191],["keyClass: Class[K],",173],["valueClass: Class[V],",149],["/// Class Imports",121],["import java.lang.Class",99],["kClass: Class[K],",82],["val possibleResponseTypes: Map[Int,Class[_ <: Any]] = Map(",82]]},{"word":"ClassTag","context":[["import scala.reflect.ClassTag",7121],["import scala.reflect.{ClassTag, classTag}",248],["import reflect.ClassTag",155],["implicitly[ClassTag[AnyRef]].asInstanceOf[ClassTag[T]]",108],["implicitly[ClassTag[AnyRef]].asInstanceOf[ClassTag[T]]",108],["import scala.reflect.{classTag, ClassTag}",102],["(implicit tagT: ClassTag[T])",100],["implicit val man = ClassTag[V](data.getClass.getComponentType.asInstanceOf[Class[V]])",81],["(msg: Input)(fn: Output => FOutput)(implicit tag: ClassTag[Output], ec: ExecutionContext) : Future[FOutput] = {",77],["implicit val cm: ClassTag[T] =",77]]},{"word":"Config","context":[["import com.typesafe.config.Config",3441],["* @author Highcharts Config Generator by Karasiq",1311],["import com.typesafe.config.{Config, ConfigFactory}",779],["import play.api.db.slick.Config.driver.simple._",569],["config: Config,",484],["object Config {",430],["import com.typesafe.config.{ConfigFactory, Config}",255],["import utils.helpers.Config",206],["import com.typesafe.config.{ Config, ConfigFactory }",187],["import org.apache.samza.config.Config",179]]},{"word":"ConfigFactory","context":[["import com.typesafe.config.ConfigFactory",4975],["import com.typesafe.config.{Config, ConfigFactory}",779],["val config = ConfigFactory.load()",526],["val config = ConfigFactory.parseString(",318],["import com.typesafe.config.{ConfigFactory, Config}",255],["import com.typesafe.config.{ Config, ConfigFactory }",187],["val conf = ConfigFactory.load()",150],["ConfigFactory.parseString(",143],["private val config = ConfigFactory.load()",139],["val config = ConfigFactory.parseString(\"\"\"",122]]},{"word":"Configuration","context":[["import org.apache.hadoop.conf.Configuration",2106],["import play.api.Configuration",384],["@Configuration",309],["val conf = new Configuration()",212],["configuration: Configuration,",157],["/** ********* General Configuration ***********/",156],["/** ********* Log Configuration ***********/",156],["/** ********* Socket Server Configuration ***********/",156],["/** ********* Zookeeper Configuration ***********/",153],["* val configuration = Configuration.load()",149]]},{"word":"Cons","context":[["case Cons(h, t) =>",348],["val loc_cons = newSystemRecentLoc(name + \"Cons\")",282],["else Cons(as.head, apply(as.tail: _*))",179],["case Cons(0.0, _) => 0.0",149],["case Cons(x, xs) => f(x, foldRight(xs, z)(f))",146],["case Cons(x, Cons(y, Cons(3, Cons(4, _)))) => x + y",145],["case Cons(x, Cons(y, Cons(3, Cons(4, _)))) => x + y",145],["case Cons(x, Cons(y, Cons(3, Cons(4, _)))) => x + y",145],["case Cons(x, Cons(y, Cons(3, Cons(4, _)))) => x + y",145],["case Cons(x, Cons(2, Cons(4, _))) => x",144]]},{"word":"Context","context":[["import android.content.Context",955],["import scala.reflect.macros.blackbox.Context",651],["import scala.reflect.macros.Context",577],["(h: Heap, ctx: Context, cfg: CFG, fun: String, args: CFGExpr, fid: FunctionId) => {",501],["(h: Heap, ctx: Context, cfg: CFG, fun: String, args: CFGExpr) => {",485],["import play.mvc.Http.Context.Implicit._",320],["import scala.reflect.macros.whitebox.Context",292],["import kr.ac.kaist.jsaf.analysis.typing.domain.Context",252],["import lila.api.Context",219],["val context = new Context",205]]},{"word":"Create","context":[["// Create temp directory",150],["/** Create a matrix by reading from a text file, e.g., a CSV file.",72],["* Create a hexidecimal string for the given bytes",70],["/** Create a matrix and assign values from the Scala `Vector` of vectors 'u'.",65],["* Create a select box based on the list with a default value and the function",64],["/** Create a one vector (all elements are one) of length 'size'.",63],["* Create a test config for the given node id",61],["*     // Create the reader needed by the test",60],["/** Create a matrix and assign values from the array of vectors 'u'.",59],["// Create Wiki repository",59]]},{"word":"Created","context":[["* Created with IntelliJ IDEA.",1203],["* Created by IntelliJ IDEA.",753],["* Created By:      Avi Pfeffer (apfeffer@cra.com)",478],["* Created By:      Brian Ruttenberg (bruttenberg@cra.com)",147],["result.code should be (201) //Created",118],["* Created by chandrasekharkode .",103],["* Created by Roman Bartusiak (roman.bartusiak@pwr.edu.pl http://riomus.github.io).",103],["* Created by MrTJP.",102],["response.status should be equalTo Created",90],["* Created by Jim Plush",87]]},{"word":"D","context":[["type S = String; type I = Int; type D = Double; type C = Char",219],["d: D Or Every[ERR],",180],["d should be < D",60],["*  @param q  the query graph Q(U, D, k)",58],["val D = manifest[Double]",57],["assertTypedSame[I :: S :: D :: C :: HNil](in4, r8)",48],["assertTypedSame[I :: S :: D :: HNil](in3, r6)",48],["assertTypedSame[I :: S :: D :: C :: HNil](in4, r5)",48],["assertTypedEquals[D :: C :: I :: S :: HNil](2.0 :: 'a' :: 1 :: \"foo\" :: HNil, r7)",48],["assertTypedSame[I :: S :: D :: HNil](in3, r5)",48]]},{"word":"DStream","context":[["import org.apache.spark.streaming.dstream.DStream",497],["* @param windowDuration width of the window; must be a multiple of this DStream's",371],["*                       DStream's batching interval",321],["*                       the new DStream will generate RDDs); must be a multiple of this",321],["* Return a new DStream in which each RDD is generated by applying a function",116],["): DStream[T] = {",97],["* Save each RDD in `this` DStream as a Hadoop file. The file name at each batch interval is",96],["* Return a new \"state\" DStream where the state for each key is updated by applying",81],["other: DStream[(K, W)],",74],["* Return a new DStream by applying `reduceByKey` to each RDD. The values for each key are",72]]},{"word":"Date","context":[["import java.util.Date",6599],["* Creation Date:   Jan 1, 2009",358],["import java.util.{Date, UUID}",356],["import java.sql.Date",312],["* Date: 06.03.2008",240],["* Date: 22.02.2008",229],["import java.util.{Calendar, Date}",149],["timeStamp: Long = (new Date).getTime",140],["import java.sql.{Date, Timestamp}",122],["* Date: 28.02.2008",120]]},{"word":"DateTime","context":[["import org.joda.time.DateTime",8580],["import org.joda.time.{DateTime, DateTimeZone}",655],["when(mockDataManager.findUserByToken(Matchers.eq(SOME_TOKEN), any[DateTime])",296],["import org.joda.time.{DateTimeZone, DateTime}",285],["createdAt: DateTime,",281],["val now = DateTime.now",209],["val date = new DateTime",207],["import org.joda.time.{DateTime, LocalDate}",153],["val now = new DateTime",132],["startTime: Option[DateTime] = None,",123]]},{"word":"Double","context":[["Double.NaN,",481],["stepSize: Double,",376],["val lineWidth: js.UndefOr[Double] = js.undefined",319],["override val lineWidth: js.UndefOr[Double] = lineWidthOuter",319],["val lineWidthOuter: js.UndefOr[Double] = lineWidth",319],["// Double +- Double",244],["// Double +- Double",244],["def cleanupIteration(lastIteration: Boolean, execTimeMillis: Double) {",230],["override def applyForDouble(p: Point): Double =",225],["regParam: Double,",222]]},{"word":"Duration","context":[["import scala.concurrent.duration.Duration",3344],["import com.twitter.util.Duration",405],["windowDuration: Duration,",251],["import org.joda.time.Duration",221],["import java.time.Duration",215],["import akka.util.Duration",179],["import scala.concurrent.duration.Duration.Zero",174],["), Duration.Inf)",169],["import com.twitter.util.{Duration, Future}",148],["import scala.concurrent.duration.{Duration, FiniteDuration}",139]]},{"word":"E","context":[["e: E Or Every[ERR],",170],["* @param equality <a href=\"../../scalactic/Equality.html\"><code>Equality</code></a> of type <code>E</code>",86],["sealed trait Either[+E,+A] {",81],["case class Left[+E](get: E) extends Either[E,Nothing]",78],["case class Left[+E](get: E) extends Either[E,Nothing]",78],["case class Left[+E](get: E) extends Either[E,Nothing]",78],["E-mail: met-api@met.no",70],["def map[B](f: A => B): Either[E, B] = this match {",66],["def flatMap[EE >: E, B](f: A => Either[EE, B]): Either[EE, B] = this match {",60],["def apply[A](it: Iteratee[E, A]): Future[Iteratee[E, A]] = {",57]]},{"word":"Empty","context":[["NodeSeq.Empty",619],["case _ => Empty",487],["Empty",414],["case Empty =>",317],["case _ => NodeSeq.Empty",293],["case Empty => None",236],["case None => NodeSeq.Empty",203],["case Empty => Empty",149],["case Empty => Empty",149],["else Empty",139]]},{"word":"Equality","context":[["def `should use the implicit Equality in scope` {",1594],["def `should use an explicitly provided Equality` {",1594],["it(\"should use an explicitly provided Equality\") {",1196],["it(\"should use the implicit Equality in scope\") {",1196],["new Equality[String] {",460],["import org.scalactic.Equality",356],["\"should use the implicit Equality in scope\" in {",286],["\"should use an explicitly provided Equality\" in {",286],["implicit val e = new Equality[String] {",126],["new Equality[List[String]] {",116]]},{"word":"Error","context":[["import scalation.util.Error",342],["it(\"should generate a test failure if a Throwable, or an Error other than direct Error subtypes \" +",193],["it(\"should generate a test failure if a Throwable, or an Error other than direct Error subtypes \" +",193],["it(\"should propagate out Errors that are direct subtypes of Error in JDK 1.5, other than \" +",177],["extends Error",153],["val expectedErrorMessage = \"Error\"",123],["object Error {",122],["* - 500 Internal Server Error",96],["case Error(e) => throw e",79],["extends Predictor with Error",67]]},{"word":"Every","context":[["a: A Or Every[ERR],",210],["b: B Or Every[ERR],",200],["c: C Or Every[ERR],",190],["d: D Or Every[ERR],",180],["e: E Or Every[ERR],",170],["f: F Or Every[ERR],",160],["g: G Or Every[ERR],",150],["h: H Or Every[ERR],",140],["i: I Or Every[ERR],",130],["j: J Or Every[ERR],",120]]},{"word":"Exception","context":[["case e: Exception =>",5480],["case e: Exception => {",3905],["@throws(classOf[Exception])",1579],["case ex: Exception =>",1086],["intercept[Exception] {",1037],["import scala.util.control.Exception._",439],["case e: Exception => e.printStackTrace()",421],["case e:Exception =>",333],["@scala.throws[Exception](classOf[Exception])",306],["@scala.throws[Exception](classOf[Exception])",306]]},{"word":"ExecutionContext","context":[["import scala.concurrent.ExecutionContext.Implicits.global",8774],["import scala.concurrent.ExecutionContext",3290],["import scala.concurrent.{ExecutionContext, Future}",2561],["import scala.concurrent.{ ExecutionContext, Future }",1246],["import ExecutionContext.Implicits.global",982],["import scala.concurrent.{Future, ExecutionContext}",501],["* @param ec ExecutionContext for async processing",273],["(any[ExecutionContext])).thenReturn(Future.successful(Some(SOME_USER)))",262],["import scala.concurrent.{Await, ExecutionContext, Future}",250],["import scala.concurrent.{ExecutionContext, Future, Promise}",205]]},{"word":"F","context":[["(\"@proto\", AbsConstValue(PropValue(ObjectValue(Value(ObjProtoLoc), F, F, F)))),",540],["(\"@proto\", AbsConstValue(PropValue(ObjectValue(Value(ObjProtoLoc), F, F, F)))),",540],["(\"@proto\", AbsConstValue(PropValue(ObjectValue(Value(ObjProtoLoc), F, F, F)))),",540],["import kr.ac.kaist.jsaf.analysis.typing.domain.{BoolFalse => F, BoolTrue => T}",331],["(\"prototype\", AbsConstValue(PropValue(ObjectValue(Value(loc_proto), F, F, F))))",263],["(\"prototype\", AbsConstValue(PropValue(ObjectValue(Value(loc_proto), F, F, F))))",263],["(\"prototype\", AbsConstValue(PropValue(ObjectValue(Value(loc_proto), F, F, F))))",263],["(\"@proto\",    PropValue(ObjectValue(loc_proto, F, F, F))),",227],["(\"@proto\",    PropValue(ObjectValue(loc_proto, F, F, F))),",227],["(\"@proto\",    PropValue(ObjectValue(loc_proto, F, F, F))),",227]]},{"word":"Failure","context":[["import scala.util.{Failure, Success, Try}",2670],["import scala.util.{Failure, Success}",2054],["case Failure(e) =>",1514],["import scala.util.Failure",1304],["case Failure(ex) =>",857],["import scala.util.{ Failure, Success, Try }",715],["import scala.util.{Try, Success, Failure}",605],["import scala.util.{ Failure, Success }",578],["import scala.util.{ Try, Success, Failure }",527],["case Failure(t) =>",527]]},{"word":"File","context":[["import java.io.File",17855],["* To change this template use File | Settings | File Templates.",967],["* To change this template use File | Settings | File Templates.",967],["import java.io.{File, PrintWriter}",329],["import java.io.{File, IOException}",240],["val file = new File(path)",232],["import java.io.{File => JFile}",191],["new File(tempEmptyDir).mkdirs()",182],["TestUtils.deleteRecursively(new File(tempEmptyDir))",176],["import java.io.{File, FileInputStream}",170]]},{"word":"Filter","context":[["import org.opengis.filter.Filter",435],["a.run(None, rep, new Stopper {}, Filter(), Map(), None, new Tracker())",366],["a.run(None, SilentReporter, new Stopper {}, Filter(), Map(), None, new Tracker())",252],["assert(a.expectedTestCount(Filter()) === 2)",215],["assert(c.expectedTestCount(Filter(None, Set(\"org.scalatest.FastAsLight\"))) === 1)",195],["assert(b.expectedTestCount(Filter()) === 1)",187],["assert(f.expectedTestCount(Filter()) === 10)",184],["assert(d.expectedTestCount(Filter()) === 3)",182],["assert(e.expectedTestCount(Filter()) === 2)",181],["assert(d.expectedTestCount(Filter(Some(Set(\"org.scalatest.SlowAsMolasses\")), Set(\"org.scalatest.FastAsLight\"))) === 1)",179]]},{"word":"FixtureParam","context":[["type FixtureParam = String",7797],["def testThat(fixture: FixtureParam, info: Informer) { theTestThatCalled = true }",170],["def testThis(fixture: FixtureParam) { theTestThisCalled = true }",170],["def testThis(fixture: FixtureParam) = ()",74],["def in(testFun: FixtureParam => Any) {",74],["def testThat(fixture: FixtureParam, info: Informer) = ()",74],["* by methods that require a test function that takes a <code>FixtureParam</code>.",72],["def testTheOther(fixture: FixtureParam, info: Informer) { theTestTheOtherCalled = true }",70],["* <li>define the type of the fixture parameter by specifying type <code>FixtureParam</code></li>",63],["def ignore(testFun: FixtureParam => Any) {",60]]},{"word":"FlatSpec","context":[["import org.scalatest.FlatSpec",3371],["import org.scalatest.{FlatSpec, Matchers}",2434],["import org.scalatest.{Matchers, FlatSpec}",1134],["* in the main documentation for trait <code>FlatSpec</code>.",405],["import org.scalatest.{ FlatSpec, Matchers }",363],["* for trait <code>FlatSpec</code>.",351],["import org.scalatest.{FlatSpec, MustMatchers}",346],["extends FlatSpec",288],["new FlatSpec {",276],["val a = new FlatSpec {",236]]},{"word":"Float","context":[["// Float +- Float",251],["// Float +- Float",251],["// Float +- Short",188],["// Float +- Long",188],["// Double +- Float",188],["// Float +- Byte",188],["// Float +- Int",188],["override def applyForFloat(p: Point): Float =",139],["// Float plusOrMinus Byte",60],["// Float plusOrMinus Long",60]]},{"word":"For","context":[["* For example:",1064],["* For more information, please contact Digimead Team at this",540],["*  For further information, please contact Hanns Holger Rutz at",539],["* For example, this method supports syntax such as the following:",501],["* For more information, consult the wiki.",260],["*\tFor further information, please contact Hanns Holger Rutz at",209],["* For more information see",197],["* bytefrog: a tracing framework for the JVM. For more information",176],["\"\"\").openOrThrowException(\"For tests\"),",149],["* This trait's implementation of this method is  marked as final. For insight onto why, see the",124]]},{"word":"Full","context":[["import net.liftweb.common.Full",361],["case Full(n) => n",102],["} else Full(\"ok\")",100],["Full(() => LiftRules.jsArtifacts.show(\"ajax-loader\").cmd)",98],["Full(() => LiftRules.jsArtifacts.hide(\"ajax-loader\").cmd)",98],["case Full(x) =>",89],["AndroidFirefox    -> Set(Full),",83],["AndroidChrome     -> Set(Full),",80],["case None => Full(\"OK\")",76],["case Full(x) => x",68]]},{"word":"FunSpec","context":[["import org.scalatest.FunSpec",1726],["import org.scalatest.{FunSpec, Matchers}",636],["import org.scalatest.{FunSpec, Matchers, ParallelTestExecution}",556],["class MySpec extends FunSpec {",239],["import org.scalatest.{Matchers, FunSpec}",228],["new FunSpec {",174],["val a = new FunSpec {",157],["class MySpec extends FunSpec with ShouldMatchers {",150],["class TestSpec extends FunSpec {",148],["import org.scalatest.{ FunSpec, Matchers }",144]]},{"word":"FunSuite","context":[["import org.scalatest.FunSuite",10421],["import org.scalatest.{FunSuite, Matchers}",771],["import org.scalatest.{BeforeAndAfter, FunSuite}",387],["import org.scalatest.{Matchers, FunSuite}",317],["extends FunSuite",257],["class MySuite extends FunSuite {",227],["import org.scalatest.{OneInstancePerTest, FunSuite}",221],["import org.scalatest.{BeforeAndAfterAll, FunSuite}",206],["new FunSuite {",192],["val a = new FunSuite {",178]]},{"word":"Function","context":[["(\"@class\", AbsConstValue(PropValue(AbsString.alpha(\"Function\")))),",266],["val clickOuter: js.UndefOr[js.Function] = click",204],["override val click: js.UndefOr[js.Function] = clickOuter",204],["val click: js.UndefOr[js.Function] = js.undefined",204],["val mouseOut: js.UndefOr[js.Function] = js.undefined",201],["override val mouseOut: js.UndefOr[js.Function] = mouseOutOuter",201],["override val mouseOver: js.UndefOr[js.Function] = mouseOverOuter",201],["val mouseOutOuter: js.UndefOr[js.Function] = mouseOut",201],["val mouseOver: js.UndefOr[js.Function] = js.undefined",201],["val mouseOverOuter: js.UndefOr[js.Function] = mouseOver",201]]},{"word":"Future","context":[["import scala.concurrent.Future",15060],["Future {",4545],["import scala.concurrent.{ExecutionContext, Future}",2561],["import com.twitter.util.Future",1912],["import scala.concurrent.{ ExecutionContext, Future }",1246],["import scala.concurrent.{Await, Future}",1151],["import scala.concurrent.{Future, Promise}",685],["import com.twitter.util.{Await, Future}",542],["import scala.concurrent.{Future, ExecutionContext}",501],["Future.Done",495]]},{"word":"GET","context":[["@GET",1108],["<method name=\"GET\"/>",490],["assert (checker, \"count(/chk:checker/chk:step[@type='METHOD' and @match='GET']) = 1\")",283],["val home = route(FakeRequest(GET, \"/\")).get",187],["route(FakeRequest(GET, \"/boum\")) must beNone",159],["<method name=\"GET\">",138],["val request = FakeRequest(\"GET\", \"/\").withFormUrlEncodedBody(",126],["GET,",114],["request.method === HttpMethods.GET",105],["* Required GET params:",101]]},{"word":"Gen","context":[["import org.scalacheck.Gen",1198],["import org.scalacheck.{Arbitrary, Gen}",442],["import Gen._",340],["import org.scalacheck.Gen._",297],["Gen.oneOf(",223],["import org.scalacheck.{ Arbitrary, Gen }",134],["import org.scalacheck.{Gen, Arbitrary}",118],["): Gen[R] = arbitrary[T1] flatMap {",95],["object Gen {",88],["Gen.frequency(",65]]},{"word":"Get","context":[["* Get the JDBC SQL Type for this field",108],["// Get components of this node.",68],["/** Get column 'col' from the matrix, returning it as a vector.",65],["* Get an RDD for a given Hadoop file with an arbitrary new API InputFormat",63],["// Get the current controller info. This is to ensure we use the most recent info to issue the",63],["/** Get 'this' matrix's element at the 'i,j'-th index position.",56],["/** Get a slice 'this' matrix row-wise on range 'ir' and column-wise on range 'jr'.",56],["import com.twitter.finagle.http.Method.Get",56],["import org.apache.hadoop.hbase.client.Get",52],["/** Get 'this' vector's elements within the given range (vector slicing).",52]]},{"word":"Group","context":[["* HCI Group at the University of Würzburg. The project is funded by the German",336],["Group(",215],[".group(Group.fromCluster(mycluster2))",170],[".group(Group.fromCluster(mycluster1))",170],["Group(\"/test\".toPath, groups = Set(",119],["object Group {",91],["val plan = DeploymentPlan(Group.empty, group)",86],["val origGroup = Group(PathId(\"/foo/bar\"), Set(app))",82],["val group = Group(PathId(\"/foo/bar\"), Set(app))",78],["whenReady(db.run(persist.Group.find(groupOutPeer.groupId))) { group ⇒",66]]},{"word":"H","context":[["h: H Or Every[ERR],",140],["*     second:\"%A, %b %e, %H:%M:%S\",",70],["*     millisecond:\"%A, %b %e, %H:%M:%S.%L\",",70],["*     hour:\"%A, %b %e, %H:%M\",",70],["*     minute:\"%A, %b %e, %H:%M\",",70],["type Out = H",54],["def apply(c: H :+: T): Out = c match {",51],["forAll { (q: H) =>",50],["init: Random => ForStoreClusterRunner [H]",45],["def apply(c: H :+: T) = c match {",43]]},{"word":"HList","context":[["type Out <: HList",281],["type Suffix <: HList",91],["type Prefix <: HList",91],["import shapeless.HList",77],["import HList._",73],["* evidence that this `HList` has at least ''n'' elements.",50],["Repr <: HList,",49],["AsParameters <: HList",48],["* of this `HList`.",47],["def apply[L <: HList, N <: Nat]",41]]},{"word":"HNil","context":[["type Out = HNil",419],["HNil",235],["val sn1 = 23 :: 3.0 :: \"foo\" :: () :: \"bar\" :: true :: 5L :: HNil",117],["import shapeless.HNil",114],["assertTypedSame[I :: HNil](in1, r2)",96],["assertTypedSame[I :: S :: HNil](in2, r3)",96],["val l1 = 1 :: \"foo\" :: 2 :: 3 :: HNil",93],["assertTypedEquals[HNil](HNil, r1)",80],["assertTypedEquals[HNil](HNil, r1)",80],["def product(l: L): Prefix :: Suffix :: HNil",78]]},{"word":"HashMap","context":[["import scala.collection.mutable.HashMap",2382],["import scala.collection.immutable.HashMap",841],["import java.util.HashMap",507],["import collection.mutable.HashMap",412],["val headerParams = new HashMap[String, String]",202],["val queryParams = new HashMap[String, String]",202],["val formParams = new HashMap[String, String]",196],["import scala.collection.mutable.{ArrayBuffer, HashMap}",158],["import java.util.{HashMap => JHashMap}",138],["val map3 = mutable.HashMap(\"one\" -> 1, \"two\" -> 2)",132]]},{"word":"Helpers","context":[["import play.api.test.Helpers._",2015],["import Helpers._",1415],["import net.liftweb.util.Helpers._",917],["import net.liftweb.util.Helpers",219],["import util.Helpers._",212],["import _root_.net.liftweb.util.Helpers._",181],["override lazy val __nameSalt = Helpers.nextFuncName",135],["object Helpers {",126],["// Helpers",124],["import net.liftweb.util.Helpers.tryo",116]]},{"word":"I","context":[["type S = String; type I = Int; type D = Double; type C = Char",219],["// The order I want is order of appearance in the file.",159],["// If I provide a specific testName to run, then it should ignore an Ignore on that test",148],["i: I Or Every[ERR],",130],["// I'm returning a ListSet here so that they tests will be run in registration order",129],["I.prj(expr) collect {",110],["assertTypedSame[I :: S :: HNil](in2, r3)",96],["assertTypedSame[I :: HNil](in1, r2)",96],["*  Takes '[a | b]' to '[I | x]'.",78],["val in1 = Coproduct[I :+: CNil](1)",75]]},{"word":"ID","context":[["def id = column[Long](\"ID\", O.PrimaryKey, O.AutoInc)",116],["* @param queryString the string with which to search, first by ID then by name",93],["* @return The found user or None if no user for the given ID could be found.",83],["* @param userID The ID of the user to find.",79],["* Finds a user by its user ID.",79],["type ID = String",77],["assert(csReq.getHeader(\"X-DEVICE-ID\") == null)",74],["* @param idGenerator The ID generator implementation.",73],["def id = column[Int](\"ID\", O.PrimaryKey, O.AutoInc)",60],["id: ID,",52]]},{"word":"IO","context":[["import akka.io.IO",1055],["import scalaz.effect.IO",300],["import org.workcraft.scala.effects.IO",131],["object IO {",129],["import akka.io.{IO, Tcp}",122],["import org.workcraft.scala.effects.IO._",103],["* provided for `Task`, `IO`, and stdlib `Future`; and `transK[M]` is provided as syntax.",91],["import sbt.io.IO",73],["import akka.io.{ IO, Tcp }",68],["IO.write(file, contents)",66]]},{"word":"IOException","context":[["import java.io.IOException",2487],["@throws(classOf[IOException])",1799],["case e: IOException =>",749],["case e: IOException => {",278],["import java.io.{File, IOException}",240],["@throws[IOException]",201],["case ex: IOException =>",187],["case ioe: IOException =>",144],["import java.io.IOException;",144],["* @throws IOException",123]]},{"word":"If","context":[["* <code>apply</code> method to the current reporter. If invoked in a constructor, it",383],["* along with Kiama.  (See files COPYING and COPYING.LESSER.)  If not, see",317],["* will register the passed string for forwarding later during test execution. If invoked while this",263],["* the current reporter immediately. If invoked at any other time, it will",263],["case If(cond, thenp, elsep) =>",249],["* @param testName an optional name of one test to run. If <code>None</code>, all relevant tests should be run.",193],["* If the specified field is optional, it is set to None.  Otherwise, if the field is",181],["// If I provide a specific testName to run, then it should ignore an Ignore on that test",148],["* If the field is not a {@code ChronoField}, then the result of this method",138],["* it will forward the information to the current reporter immediately.  If invoked from inside a test function,",120]]},{"word":"IllegalArgumentException","context":[["intercept[IllegalArgumentException] {",4388],["throw new IllegalArgumentException(",1220],["val e = intercept[IllegalArgumentException] {",587],["throw new IllegalArgumentException",355],["case e: IllegalArgumentException =>",309],["val ex = new IllegalArgumentException(\"Unsupported message: \" + message)",288],["throw new IllegalArgumentException()",235],["case _ => throw new IllegalArgumentException",200],["an [IllegalArgumentException] should be thrownBy {",199],["@Test(expected = classOf[IllegalArgumentException])",195]]},{"word":"Implicits","context":[["import scala.concurrent.ExecutionContext.Implicits.global",8774],["import play.api.libs.concurrent.Execution.Implicits.defaultContext",1556],["import play.api.libs.concurrent.Execution.Implicits._",1360],["import ExecutionContext.Implicits.global",982],["object Implicits {",600],["import Implicits._",439],["import GraphDSL.Implicits._",294],["import mesosphere.mesos.protos.Implicits._",272],["import gitbucket.core.util.Implicits._",179],["import concurrent.ExecutionContext.Implicits.global",179]]},{"word":"In","context":[["* In accordance with the terms of section 7 (7. Additional Terms.) of",1872],["test.c: In function 'main':",906],["test.c: In function 'x':",318],["test.c: In function ‘foo’:",173],["* In addition, this trait's implementation will also auto-tag tests with class level annotations.",110],["and uncurry and the two forms are in some sense \"the same\". In FP jargon,",94],["* sent to the reporter when running the test can appear in the report of a test run. (In other words,",86],["* in descending order. In other words, the head of the resulting list should",76],["* need to be able to say which of two tweets is larger, or if they are equal). In",70],["protected type In = Any",69]]},{"word":"Int","context":[["var i: Int = 0",1330],["override def hashCode(): Int = {",645],["port: Int,",585],["new Gauge[Int] {",531],["id: Int,",521],["override def hashCode: Int = {",479],["tabIndex: U[Int] = undefined,",452],["key: U[String | Int] = undefined,",452],[".failureAccrualParams(Int.MaxValue, 0.seconds)",408],["def id = column[Int](\"id\", O.PrimaryKey, O.AutoInc)",365]]},{"word":"Integer","context":[[".ofType(classOf[java.lang.Integer])",1023],["classOf[Integer],",735],["1: Integer,",126],["3: Integer,",114],["5: Integer,",102],["7: Integer,",90],["9: Integer,",78],["val message = new Message(Integer.toString(42).getBytes())",72],["val part = Integer.valueOf(topicPartition.split(\"-\").last).intValue",69],["classOf[Integer]",67]]},{"word":"Iterator","context":[["Iterator.empty",389],["func: (TaskContext, Iterator[T]) => U,",128],["import java.util.Iterator",125],["import scala.collection.Iterator",87],["Iterator",86],["new Iterator[T] {",80],["new Iterator[String] {",70],["Iterator()",65],["Iterator(",57],["def fn = (x: Iterator[T]) => asScalaIterator(f.apply(asJavaIterator(x)).iterator())",56]]},{"word":"JUnitRunner","context":[["@RunWith(classOf[JUnitRunner])",11522],["import org.scalatest.junit.JUnitRunner",7883],["import org.specs2.runner.JUnitRunner",2178],["import org.scalatest.junit.{AssertionsForJUnit, JUnitRunner}",165],["@org.junit.runner.RunWith(classOf[org.scalatest.junit.JUnitRunner])",147],["//@RunWith(classOf[JUnitRunner])",66],["@RunWith(classOf[org.scalatest.junit.JUnitRunner])",48],["@RunWith (classOf[JUnitRunner])",46],["@org.junit.runner.RunWith(classOf[org.specs2.runner.JUnitRunner])",33],["import _root_.org.scalatest.junit.JUnitRunner",26]]},{"word":"JavaConversions","context":[["import scala.collection.JavaConversions._",15808],["import collection.JavaConversions._",1806],["import scala.collection.JavaConversions",629],["import scala.collection.JavaConversions.asScalaBuffer",400],["import JavaConversions._",308],["import scala.collection.JavaConversions.seqAsJavaList",139],["import scala.collection.JavaConversions.mapAsScalaMap",125],["import scala.collection.JavaConversions.asScalaIterator",107],["import collection.JavaConversions",103],["import scala.collection.JavaConversions.iterableAsScalaIterable",96]]},{"word":"JavaConverters","context":[["import scala.collection.JavaConverters._",13821],["import collection.JavaConverters._",1371],["import scala.collection.JavaConverters.asScalaBufferConverter",229],["import scala.collection.JavaConverters.mapAsScalaMapConverter",99],["import scala.collection.JavaConverters.mapAsJavaMapConverter",97],["import scala.collection.JavaConverters.seqAsJavaListConverter",89],["import scala.collection.JavaConverters",89],["import JavaConverters._",79],["import _root_.scala.collection.JavaConverters._",64],["import scala.collection.JavaConverters.asScalaSetConverter",58]]},{"word":"Json","context":[["import play.api.libs.json.Json",4321],["Json.obj(",2456],["play.api.libs.json.Json.obj(",812],["case None => play.api.libs.json.Json.obj()",723],["val js = Json.toJson(",328],["import play.api.libs.json.{JsValue, Json}",327],["import play.api.libs.json.Json._",227],["Ok(Json.obj(",192],["play.api.libs.json.Json.obj(\"value\" -> play.api.libs.json.JsString(obj.toString))",189],["val json = Json.obj(",172]]},{"word":"K","context":[["keyClass: Class[K],",173],["\"(K() * (fx() * nx() + fy() * ny()) * s() + \" +",142],["\"(1 / 2) * K() * (FXP * nx() + FYP * ny()) * s()^2) >= 0 \"),",141],["* @tparam K",131],["k: K Or Every[ERR],",110],["\"(1 / 2) * K() * (FXP * nx() + FYP * ny() + FZP * nz()) * s()^2) >= 0 \"),",94],["\"(K() * (fx() * nx() + fy() * ny() + fz() * nz()) * s() + \" +",94],["): RDD[(K, V)] = {",88],["kClass: Class[K],",82],["): JavaPairDStream[K, V] = {",81]]},{"word":"KafkaConfig","context":[["import kafka.server.KafkaConfig",348],["val cfg = KafkaConfig.fromProps(props)",172],["val serverConfig = KafkaConfig.fromProps(props)",158],["import kafka.server.{KafkaConfig, KafkaServer}",93],["KafkaConfig.fromProps(props)",88],["props.put(KafkaConfig.ZkConnectProp, \"localhost:2181\")",72],["props.put(KafkaConfig.BrokerIdProp, \"1\")",72],["val config = KafkaConfig.fromProps(props)",64],["this.serverConfig.setProperty(KafkaConfig.OffsetsTopicPartitionsProp, \"1\")",54],["val config: KafkaConfig,",50]]},{"word":"Key","context":[["import com.intellij.openapi.util.Key",211],["import org.apache.accumulo.core.data.{Key, Value}",178],["import Key._",94],["override def init(source: SortedKeyValueIterator[Key, Value],",76],["object Key {",75],[") with Key {",67],["Key.verbose -> true",59],["import org.apache.accumulo.core.data.{Key, Mutation, Value}",58],["* can provide significant performance wins. (Key in a hash map for instance)",55],["import org.apache.accumulo.core.data.Key",53]]},{"word":"Keys","context":[["import Keys._",4144],["import sbt.Keys._",2951],["import sbt._, Keys._",197],["object Keys {",142],["request.setAttribute(Keys.Request.Ajax, \"true\")",94],["import bintray.Keys._",67],["import com.typesafe.sbt.packager.Keys._",64],["import android.Keys._",53],["Keys.name := id,",49],["if(request.hasAttribute(Keys.Request.Ajax)){",44]]},{"word":"L","context":[["* #L%",204],["* #%L",204],["l: L Or Every[ERR],",100],["type Out = L",100],["def apply(l : L) : Out",94],["def apply(l: L): Out = toTuple2(product(l))",91],["def product(l: L): Prefix :: Suffix :: HNil",78],["slice: Slice[L, P],",73],["*     millisecond:\"%A, %b %e, %H:%M:%S.%L\",",70],["* @tparam L",66]]},{"word":"LINE","context":[["// @LINE:6",663],["// @LINE:9",522],["// @LINE:7",488],["// @LINE:8",398],["// @LINE:13",324],["// @LINE:10",315],["// @LINE:12",287],["// @LINE:11",248],["// @LINE:14",229],["// @LINE:5",217]]},{"word":"Left","context":[["Left(partialMessage)",296],["case Left(error) =>",230],["case Left(e) => Left(e)",193],["case Left(e) => Left(e)",193],["case Left(e) => processErrors(e)",173],["catch { case e: Exception => Left(e) }",157],["case Left(e) =>",152],["case _ => Left(\"reads failed: seq must be scala.xml.Node\")",143],["horizontalAlignment = Alignment.Left",135],["case Left(x) => fail(x)",124]]},{"word":"Level","context":[["import org.apache.log4j.{Level, Logger}",565],["import java.util.logging.{Level, Logger}",380],["import org.apache.log4j.Level",366],["import java.util.logging.Level",346],["import ch.qos.logback.classic.{Level, LoggerContext}",297],["// DOM Level 1",293],["//context.getLogger(\"io.gatling.http\").setLevel(Level.valueOf(\"DEBUG\"))",285],["//context.getLogger(\"io.gatling.http\").setLevel(Level.valueOf(\"TRACE\"))",285],["Logger.getRootLogger.setLevel(Level.WARN)",161],["requestHandlerLogger.setLevel(Level.FATAL)",159]]},{"word":"List","context":[["List(",6349],["List()",1157],["List(),",587],["case _ => List()",540],["private val prop_proto: List[(String, AbsProperty)] = List(",529],["private val prop_proto: List[(String, AbsProperty)] = List(",529],["import java.util.List",454],["val expected = List(",437],["import scala.collection.immutable.List",385],["import java.util.{List => JList}",358]]},{"word":"ListBuffer","context":[["import scala.collection.mutable.ListBuffer",4804],["import collection.mutable.ListBuffer",854],["* import collection.mutable.ListBuffer",393],["*   val buffer = new ListBuffer[String]",245],["* import scala.collection.mutable.ListBuffer",172],["val buffer = new ListBuffer[String]",170],["import scala.collection.mutable.{ArrayBuffer, ListBuffer}",118],["* Start of: A ListBuffer",84],["* End of: A ListBuffer",84],["import mutable.ListBuffer",68]]},{"word":"Logger","context":[["import play.api.Logger",2664],["import org.apache.log4j.Logger",1455],["import java.util.logging.Logger",877],["import com.twitter.logging.Logger",682],["import org.apache.log4j.{Level, Logger}",565],["import org.slf4j.{Logger, LoggerFactory}",543],["import org.slf4j.Logger",443],["import com.typesafe.scalalogging.Logger",421],["import grizzled.slf4j.Logger",394],["import java.util.logging.{Level, Logger}",380]]},{"word":"LoggerFactory","context":[["import org.slf4j.LoggerFactory",6978],["import org.slf4j.{Logger, LoggerFactory}",543],["val log = LoggerFactory.getLogger(getClass)",453],["private[this] val log = LoggerFactory.getLogger(getClass)",391],["private val log = LoggerFactory.getLogger(getClass)",336],["val logger = LoggerFactory.getLogger(getClass)",304],["val context: LoggerContext = LoggerFactory.getILoggerFactory.asInstanceOf[LoggerContext]",288],["import org.slf4j.{LoggerFactory, Logger}",273],["val logger = LoggerFactory.getLogger(this.getClass)",167],["private val logger = LoggerFactory.getLogger(this.getClass)",151]]},{"word":"Logging","context":[["import org.apache.spark.Logging",1524],["import akka.event.Logging",1161],["import com.typesafe.scalalogging.slf4j.Logging",1010],["import grizzled.slf4j.Logging",842],["with Logging {",687],["extends Logging {",421],["trait Logging {",295],["import kafka.utils.Logging",292],["val log = Logging(context.system, this)",280],["import org.apache.samza.util.Logging",172]]},{"word":"Long","context":[["id: Long,",707],["limit: Long = 25,",459],["def onNext(elem: Long) = {",428],["def id = column[Long](\"id\", O.PrimaryKey, O.AutoInc)",286],["offset: Long = 0",267],["// Long +- Long",251],["// Long +- Long",251],["offset: Long = 0,",222],[".ofType(classOf[java.lang.Long])",208],["endTs: Long,",194]]},{"word":"M","context":[["def defaultTransK[M[_]: Monad: Catchable: Capture] = Kleisli(_ => action.transK[M].run(s))",364],["def defaultTransK[M[_]: Monad: Catchable: Capture] = Kleisli(_ => action.transK[M].run(s))",364],["* exception-trapping (`Catchable`) and effect-capturing (`Capture`) monad `M`. Such evidence is",91],["* provided for `Task`, `IO`, and stdlib `Future`; and `transK[M]` is provided as syntax.",91],["m: M Or Every[ERR],",90],["def marshalledReq = M.marshall(amzReq)",82],["*     hour:\"%A, %b %e, %H:%M\",",70],["*     millisecond:\"%A, %b %e, %H:%M:%S.%L\",",70],["*     second:\"%A, %b %e, %H:%M:%S\",",70],["*     minute:\"%A, %b %e, %H:%M\",",70]]},{"word":"Map","context":[["Map(",5223],["Map()",1300],["import scala.collection.mutable.Map",1265],["import scala.collection.Map",807],["import scala.collection.immutable.Map",501],["Map.empty",490],["Map(),",412],["immutable$Map(",384],["a.run(None, rep, new Stopper {}, Filter(), Map(), None, new Tracker())",366],["val headers_http_authenticated = Map(",299]]},{"word":"Matchers","context":[["import org.scalatest.Matchers",3073],["import org.scalatest.{FlatSpec, Matchers}",2434],["with Matchers",1514],["import org.scalatest.{Matchers, WordSpec}",1480],["import org.scalatest.{Matchers, FlatSpec}",1134],["import Matchers._",1064],["import org.mockito.Matchers._",965],["import org.scalatest.{FunSuite, Matchers}",771],["import org.scalatest.Matchers._",765],["import org.scalatest.{FunSpec, Matchers}",636]]},{"word":"Message","context":[["extends Message {",193],["object Message {",190],["import kafka.message.Message",136],["sealed trait Message",128],["override def process(theMsg: FilterBankConfig.Message) {",119],["import Message._",115],["import com.google.protobuf.Message",103],["* Responses are one of (Code, Message)",99],["val message = new Message(Integer.toString(42).getBytes())",72],["val bufferMessage = Message.createBufferMessage(buffer.duplicate)",58]]},{"word":"Mockito","context":[["import org.mockito.Mockito._",2720],["import org.specs2.mock.Mockito",1192],["Mockito.reset(mockAwsWrapper, mockDataManager, mockInfluxClientFactory)",482],["import org.mockito.Mockito",451],["import org.specs.mock.Mockito",348],["import org.mockito.Mockito.when",337],["import org.mockito.Mockito.verify",125],["import mesosphere.marathon.test.Mockito",122],["import org.mockito.{Matchers, Mockito}",118],["import org.mockito.Mockito.{times, verify, when}",105]]},{"word":"Module","context":[["* A \"Related Module\" means a set of sources files including their",1872],["* licence, when you create a Related Module, this Related Module is",1268],["* licence, when you create a Related Module, this Related Module is",1268],["import com.intellij.openapi.module.Module",196],["import scaldi.Module",114],["*     Module: net.modelbased.sensapp",76],["Module:     PIDE",71],["import se.culvertsoft.mgen.api.model.Module",70],["import com.google.inject.Module",58],["object Module {",53]]},{"word":"N","context":[["while (i < N) {",153],["val N = 30",83],["val sentMessages = 0 until N * 10 map { i => \"message %d\".format(i) }",82],["for (_ <- 0 until N) b()",81],["n: N Or Every[ERR],",80],["while (r < N) {",78],["// N.B. INCLUDED IN SURFACE",64],["var N = data.length;",63],["for (i <- 0 until N) {",60],["val N = 3",59]]},{"word":"Name","context":[["name := Name,",152],["s.withProfile(PureDebugProfile.Name)",128],["(\"Name\" -> o.name) ~",116],["name: Name,",103],["object Name {",95],["NonEmptyList(MapExpr(JsFn(Name(\"x\"),",89],["import tiny.names.Name",86],["Selector.Doc(BsonField.Name(\"bar\") ->",77],["dest: Name,",73],["$simpleMap(NonEmptyList(MapExpr(JsFn(Name(\"x\"), obj(",70]]},{"word":"Nil","context":[["Nil",5243],["Nil,",2745],["case Nil =>",2409],["case _ => Nil",2070],["case Nil => Nil",1219],["case Nil => Nil",1219],["requestHeaders: Seq[(String, String)] = Nil",1107],["else Nil",826],["case Nil => None",699],["children = Nil,",620]]},{"word":"Node","context":[["import scala.xml.Node",644],["import Node._",254],["import org.w3c.dom.Node",197],["object Node {",176],["case _ => Left(\"reads failed: seq must be scala.xml.Node\")",143],["import org.neo4j.graphdb.Node",139],["override def getInsList(node: Node): List[(String, PropValue)] = node match {",130],["def render(request: HttpServletRequest): Seq[Node] = {",118],["Node(",109],["override def createQueryBuilder(n: Node, state: CompilerState): QueryBuilder = new QueryBuilder(n, state)",90]]},{"word":"NodeSeq","context":[["import scala.xml.NodeSeq",1195],["NodeSeq.Empty",619],["case _ => NodeSeq.Empty",293],["case None => NodeSeq.Empty",203],["scope: scala.xml.NamespaceBinding, typeAttribute: Boolean): scala.xml.NodeSeq =",186],["__scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =",165],["import xml.NodeSeq",152],["import scala.xml.{NodeSeq, Text}",123],["else NodeSeq.Empty",109],["import scala.xml.NodeSeq.seqToNodeSeq",72]]},{"word":"NonFatal","context":[["import scala.util.control.NonFatal",3207],["case NonFatal(e) =>",1174],["case NonFatal(ex) =>",531],["case NonFatal(t) ⇒",218],["case NonFatal(e) ⇒",218],["case NonFatal(t) =>",121],["import com.twitter.util.NonFatal",112],["case NonFatal(e) => {",105],["case NonFatal(_) => None",76],["case NonFatal(_) =>",71]]},{"word":"None","context":[["None",24437],["case None =>",22089],["case _ => None",19486],["None,",6957],["else None",3784],["case None => None",3773],["case None => None",3773],["case None => {",3313],["} else None",2570],["case None ⇒",2309]]},{"word":"NotAllowedException","context":[["val e1 = intercept[exceptions.NotAllowedException] {",2223],["def `should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value` {",1302],["it(\"should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value\") {",659],["val e2 = intercept[exceptions.NotAllowedException] {",553],["val e = intercept[exceptions.NotAllowedException] {",320],["intercept[NotAllowedException] {",247],["val e = intercept[NotAllowedException] {",211],["\"should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value\" in {",176],["import org.scalatest.exceptions.NotAllowedException",132],["* @throws NotAllowedException if <code>testName</code> had been registered previously",76]]},{"word":"O","context":[["def id = column[Int](\"id\", O.PrimaryKey, O.AutoInc)",365],["def id = column[Int](\"id\", O.PrimaryKey, O.AutoInc)",365],["object O {",344],["def id = column[Long](\"id\", O.PrimaryKey, O.AutoInc)",286],["def id = column[Long](\"id\", O.PrimaryKey, O.AutoInc)",286],["def id = column[Int](\"id\", O.PrimaryKey)",215],["* @author Brian S O'Neill",125],["def id = column[Long](\"ID\", O.PrimaryKey, O.AutoInc)",116],["def id = column[Long](\"ID\", O.PrimaryKey, O.AutoInc)",116],["* O---oo-o o--O |  o-o o-o-o     o   o o-o-o   o  o o-o   o",111]]},{"word":"OK","context":[["status(result) must equalTo(OK)",561],["status should be(OK)",450],["status shouldBe OK",337],["status(result) should be(OK)",286],["status mustBe OK",260],["status(home) must equalTo(OK)",231],["status shouldBe StatusCodes.OK",214],["status === OK",196],["\"OK\"",163],["result.status should be (StatusCodes.OK)",153]]},{"word":"OR","context":[["* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",1367],["* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",1367],["* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",1367],["* IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN",287],["* IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN",287],["* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING",180],["* ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN",114],["* ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN",114],["* WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN",104],["* ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF",103]]},{"word":"Object","context":[["(\"@class\", AbsConstValue(PropValue(AbsString.alpha(\"Object\")))),",335],["override val color: js.UndefOr[String | js.Object] = colorOuter",300],["val colorOuter: js.UndefOr[String | js.Object] = color",300],["val color: js.UndefOr[String | js.Object] = js.undefined",300],["val fillColorOuter: js.UndefOr[String | js.Object] = fillColor",284],["val fillColor: js.UndefOr[String | js.Object] = js.undefined",284],["override val fillColor: js.UndefOr[String | js.Object] = fillColorOuter",284],["(\"@class\",    PropValue(AbsString.alpha(\"Object\"))),",228],["val lineColorOuter: js.UndefOr[String | js.Object] = lineColor",221],["override val lineColor: js.UndefOr[String | js.Object] = lineColorOuter",221]]},{"word":"Observable","context":[["import rx.lang.scala.Observable",530],["import monix.reactive.Observable",216],["* the source Observable.",127],["*         the source Observable.",110],["Observable.unsafeCreate { subscriber =>",97],[": Observable[Observable[T]] // SI-7818",93],[": Observable[Observable[T]] // SI-7818",93],["val thisJava = this.asJavaObservable.asInstanceOf[rx.Observable[T]]",88],["Observable.jObsOfListToScObsOfSeq(oJava.asInstanceOf[rx.Observable[_ <: java.util.List[T]]])",88],["Observable.jObsOfListToScObsOfSeq(oJava.asInstanceOf[rx.Observable[_ <: java.util.List[T]]])",88]]},{"word":"Ok","context":[["andExpect = Ok,",592],["Ok",457],["Ok(",371],["Ok(views.html.index())",248],["Ok(Json.obj(",192],["resp should matchPattern { case Ok(ResponseStartPhoneAuth(_, false)) ⇒ }",186],["Ok(views.html.index(\"Your new application is ready.\"))",175],["Ok(views.html.common.resultOfCommand(",156],["resp should matchPattern { case Ok(_) ⇒ }",152],["case Ok(ResponseInviteUrl(url)) ⇒",135]]},{"word":"OneArgTest","context":[["def withFixture(test: OneArgTest): Outcome = { test(\"hi\") }",1727],["def withFixture(test: OneArgTest) { test(\"hi\") }",1633],["def withFixture(test: OneArgTest) {}",1259],["def withFixture(test: OneArgTest) {",862],["def withFixture(test: OneArgTest): Outcome = Succeeded",795],["def withFixture(test: OneArgTest): Outcome = {",653],["*   def withFixture(test: OneArgTest) {",153],["override def withFixture(test: OneArgTest): Outcome = {",143],["// Shouldn't be called, but just in case don't invoke a OneArgTest",102],["it(\"should pass the correct test name in the OneArgTest passed to withFixture\") {",97]]},{"word":"Option","context":[["override def run(testName: Option[String], args: Args): Status = {",391],["description: Option[String],",350],["suiteClassName: Option[String],",306],["val baseURL = Option(System.getProperty(\"baseURL\")) getOrElse \"\"\"http://127.0.0.1:8080\"\"\"",284],["name: Option[String],",277],["name: Option[String] = None,",252],["val targetNamespace: Option[String] = None",248],["id: Option[String] = None,",230],["description: Option[String] = None,",215],["configMap: Map[String, Any], distributor: Option[Distributor], tracker: Tracker) {",204]]},{"word":"Out","context":[["type Out = HNil",419],["type Out <: HList",281],["type Out = Out0",253],["type Out = tp.Out",189],["type Out = tp.Out",189],["type Out",184],["type Out = L",100],["def apply(l : L) : Out",94],["type Out = (Prefix, Suffix)",91],["def apply(l: L): Out = toTuple2(product(l))",91]]},{"word":"P","context":[[".check(headerRegex(\"Set-Cookie\", \"CSRF-TOKEN=(.*); [P,p]ath=/\").saveAs(\"csrf_token\")))",353],[".render(P => {",275],["p: P => Prop,",224],["type R <: P with Q",128],[".render((P, S, B) => {",115],["P <: Nat,",81],["type Prefix = P",78],["slice: Slice[L, P],",73],["val pack: P",66],["* @tparam P Predicted result class",63]]},{"word":"Parser","context":[["object Parser {",190],["import Parser._",173],["import complete.Parser",74],["import sbt.complete.Parser",59],["val ast = new Parser().parse(path)",59],["val parser = new Parser()",40],["val parser = new Parser",39],["case class ParserOps[A](p: Parser[A]) {",38],["import io.buoyant.config.Parser",37],["trait Parser {",37]]},{"word":"Path","context":[["import org.apache.hadoop.fs.Path",1128],["import java.nio.file.Path",1084],["import org.apache.hadoop.fs.{FileSystem, Path}",356],["import Path._",298],["import java.nio.file.{Files, Path}",258],["import scalax.file.Path",245],["import pathy.Path._",174],["import javax.ws.rs.Path",173],["import java.nio.file.{Path, Paths}",171],["object Path {",158]]},{"word":"Play","context":[["import play.api.Play.current",3657],["import play.api.Play",949],["* @param configuration The Play configuration.",312],["import play.api.Play._",159],["* @param messagesApi The Play messages API.",134],["import play.api.{Logger, Play}",93],["val messagesApi = play.api.Play.current.injector.instanceOf[MessagesApi]",91],["import Play.current",85],["import play.Play",78],["import play.Play.autoImport._",78]]},{"word":"Process","context":[["import Process._",363],["import scalaz.stream.Process",293],["import scalaz.stream.Process._",159],["import scala.sys.process.Process",152],["object Process {",78],["val src = Process.range(0,3).toSource",51],["val buildRev = Process(\"git\" :: \"rev-parse\" :: \"HEAD\" :: Nil).!!.trim",48],["import fr.inria.powerapi.core.Process",46],["val branch = Process(\"git\" :: \"rev-parse\" :: \"--abbrev-ref\" :: \"HEAD\" :: Nil).!!.trim",45],["import scalaz.stream.Process.Halt",38]]},{"word":"Project","context":[["import com.intellij.openapi.project.Project",1985],["settings = Project.defaultSettings ++",1018],["Project(",623],["import play.Project._",467],["val main = play.Project(appName, appVersion, appDependencies).settings(",406],["* The SIRIS Project is a cooperation between Beuth University, Berlin and the",338],["lazy val root = Project(",332],["override def invoke(project: Project, editor: Editor, element: PsiElement) {",193],["val extracted = Project.extract(state)",187],["// Project OrcScala",153]]},{"word":"Promise","context":[["import scala.concurrent.Promise",741],["import scala.concurrent.{Future, Promise}",685],["val promise = Promise[Unit]()",652],["val promise = Promise[EventRecordingReporter]",635],["import scala.concurrent.{ExecutionContext, Future, Promise}",205],["val p = new Promise[Unit]",201],["import scala.concurrent.{ Future, Promise }",200],["val promise = Promise[Ack]()",184],["import scala.concurrent.{Promise, Future}",174],["val promise = Promise[T]()",159]]},{"word":"PropValue","context":[["(\"@proto\", AbsConstValue(PropValue(ObjectValue(Value(ObjProtoLoc), F, F, F)))),",540],["(\"@extensible\", AbsConstValue(PropValue(BoolTrue))),",426],["(\"@class\", AbsConstValue(PropValue(AbsString.alpha(\"Object\")))),",335],["(\"@class\", AbsConstValue(PropValue(AbsString.alpha(\"Function\")))),",266],["(\"prototype\", AbsConstValue(PropValue(ObjectValue(Value(loc_proto), F, F, F))))",263],["(\"@extensible\", PropValue(BoolTrue)),",250],["(\"@class\",    PropValue(AbsString.alpha(\"Object\"))),",228],["(\"@proto\",    PropValue(ObjectValue(loc_proto, F, F, F))),",227],["(\"@class\", AbsConstValue(PropValue(AbsString.alpha(\"CallbackObject\")))),",208],["(\"length\", AbsConstValue(PropValue(ObjectValue(Value(AbsNumber.alpha(0)), F, F, F)))),",204]]},{"word":"Properties","context":[["import java.util.Properties",3916],["val props = new Properties()",1495],["import org.scalacheck.Properties",574],["val props = new Properties",455],["import scala.util.Properties",299],["val properties = new Properties()",279],["val logProps = new Properties()",267],["/** @group Properties */",173],["val properties = new Properties",166],["val config = new Properties()",129]]},{"word":"Props","context":[["import akka.actor.Props",2251],["import akka.actor.{ActorSystem, Props}",783],["import akka.actor.{Props, ActorSystem}",393],["Props(",375],["import akka.actor.{Actor, Props}",309],["import akka.actor.{ActorRef, ActorSystem, Props}",274],["import akka.actor.{ActorRef, Props}",267],["import akka.actor.{Actor, ActorRef, Props}",257],["import akka.actor.{Actor, ActorLogging, Props}",189],["import akka.actor.{ ActorSystem, Props }",166]]},{"word":"PsiElement","context":[["import com.intellij.psi.PsiElement",1303],["lastParent: PsiElement,",212],["place: PsiElement): Boolean = {",209],["override def invoke(project: Project, editor: Editor, element: PsiElement) {",193],["def isAvailable(project: Project, editor: Editor, element: PsiElement): Boolean = {",141],["import com.intellij.psi.{PsiDocumentManager, PsiElement}",119],["import com.intellij.psi.{PsiElement, PsiFile}",113],["elemType: IStubElementType[_ <: StubElement[_ <: PsiElement], _ <: PsiElement])",100],["elemType: IStubElementType[_ <: StubElement[_ <: PsiElement], _ <: PsiElement])",100],["elemType: IStubElementType[_ <: StubElement[_ <: PsiElement], _ <: PsiElement],",90]]},{"word":"Query","context":[["Query.",427],["import org.geotools.data.Query",241],["query: Query,",162],["object Query {",149],["* @param query the <code>Query</code> with which to search",115],["case class Query(",103],["import com.normation.rudder.domain.queries.Query",102],["EmptyEvaluationInfo, Query, EmptyActualResult] {",79],["val query = new Query(sftName, Filter.INCLUDE)",74],["import org.geotools.data.{DataStoreFinder, Query}",71]]},{"word":"R","context":[["* |  _ \\  |  _ \\  | ____|  / ___|  / _/    / ___|        Precog (R)",574],["import chat.tox.antox.R",179],["type R <: P with Q",128],["* @tparam R",110],["R,",109],["): Gen[R] = arbitrary[T1] flatMap {",95],["val deserializer: ByteStringDeserializer[R] = deserializerR",88],["val fJava: Func1[rx.Observable[T], rx.Observable[R]] =",83],["for (_ <- 0 until R) bal()",78],["case android.R.id.home =>",78]]},{"word":"RDD","context":[["import org.apache.spark.rdd.RDD",7440],["input: RDD[LabeledPoint],",264],["rdd: RDD[T],",211],["* @param input RDD of (label, array of features) pairs.",178],["* Return an RDD with the elements from `this` that are not in `other`.",151],["import spark.RDD",142],["* Return a new DStream in which each RDD is generated by applying a function",116],["input : RDD[Example],",109],["/** Distribute a local Scala collection to form an RDD. */",100],["* Return a new RDD containing the distinct elements in this RDD.",98]]},{"word":"Random","context":[["import scala.util.Random",7340],["import java.util.Random",1558],["import util.Random",313],["val random = new Random()",275],["val rand = new Random()",244],["val sessionId = Random.nextLong()",199],["val rn = new Random ()",181],["val rand = new Random",174],["val messageId = Random.nextLong()",173],["val rand = new Random(42)",165]]},{"word":"Rep","context":[["def module[Req, Rep]: Stackable[ServiceFactory[Req, Rep]] =",188],["def module[Req, Rep]: Stackable[ServiceFactory[Req, Rep]] =",188],["def test(x: Rep[Int]) = {",154],["next: ServiceFactory[Req, Rep]",119],["): ClientBuilder[Req, Rep, Yes, HasCodec, HasHostConnectionLimit] =",119],["): ServiceFactory[Req, Rep] = {",118],["underlying: ServiceFactory[Req, Rep],",91],["override def getDefaultRep: Rep[To] = ???",71],["val id: Rep[Int] = column[Int](\"id\", O.AutoInc, O.PrimaryKey)",71],["override def convert(x: Rep[Def[_]]) = {",67]]},{"word":"Req","context":[["def module[Req, Rep]: Stackable[ServiceFactory[Req, Rep]] =",188],["def module[Req, Rep]: Stackable[ServiceFactory[Req, Rep]] =",188],["import net.liftweb.http.Req",129],["): ClientBuilder[Req, Rep, Yes, HasCodec, HasHostConnectionLimit] =",119],["next: ServiceFactory[Req, Rep]",119],["): ServiceFactory[Req, Rep] = {",118],["underlying: ServiceFactory[Req, Rep],",91],["LiftRules.htmlProperties.default.set((r: Req) =>",81],["factory: ServiceFactory[Req, Rep],",64],["def apply(request: Req, service: Service[Req, Rep]): Future[Rep] = {",55]]},{"word":"Request","context":[["val request = Request()",372],["import com.twitter.finagle.http.{Request, Response}",363],["import play.api.mvc.Request",328],["val req = Request()",309],["import com.twitter.finagle.http.Request",276],["def apply(request: Request) = {",210],["pub ! ActorPublisherMessage.Request(1)",172],["object Request {",153],["import com.twitter.finagle.http.{Request, Response, Status}",138],["Service.mk[Request, Renderer] { req =>",128]]},{"word":"Response","context":[["import com.twitter.finagle.http.{Request, Response}",363],["val response = Response()",293],["import com.ning.http.client.Response",146],["import javax.ws.rs.core.Response",143],["@Context req: HttpServletRequest): Response = authenticated(req) { implicit identity =>",142],["import com.twitter.finagle.http.{Request, Response, Status}",138],["import kafka.network.RequestChannel.Response",132],["Future.value(Response())",128],["object Response {",128],["val service = new Service[Request, Response] {",107]]},{"word":"Result","context":[["import play.api.mvc.Result",390],["import org.specs2.execute.Result",199],["req.setAttribute(ASSERT_FUNCTION, (csReq: CheckerServletRequest, csResp: CheckerServletResponse, res: Result) => {",146],["import hmda.validation.dsl.Result",142],["Result(",118],["Future.successful(AuthenticatorResult(a.asInstanceOf[Array[Any]](1).asInstanceOf[Result]))",104],["object Result {",104],["override def apply(lar: LoanApplicationRegister): Result = {",92],["println(\"Result as Json String => \\n\" + apiResult)",78],["import org.apache.hadoop.hbase.client.Result",76]]},{"word":"Return","context":[["case Return(_) =>",180],["* Return an RDD with the elements from `this` that are not in `other`.",151],["* Return a new DStream in which each RDD is generated by applying a function",116],["* Return a new RDD containing the distinct elements in this RDD.",98],["* Return an RDD created by piping elements to a forked external process.",91],["flatMap(f andThen (Return(_)))",88],["* Return a new RDD that is reduced into `numPartitions` partitions.",82],["* Return an RDD containing all pairs of elements with matching keys in `this` and `other`. Each",81],["* Return a new \"state\" DStream where the state for each key is updated by applying",81],["* Return a new RDD by applying a function to each partition of this RDD.",73]]},{"word":"Returns","context":[["/** Returns `true` if this value is less than x, `false` otherwise. */",150],["/** Returns `true` if this value is greater than x, `false` otherwise. */",150],["/** Returns the remainder of the division of this value by `x`. */",149],["/** Returns the difference of this value and `x`. */",149],["/** Returns the product of this value and `x`. */",149],["/** Returns the sum of this value and `x`. */",149],["/** Returns `true` if this value is greater than or equal to x, `false` otherwise. */",149],["/** Returns `true` if this value is less than or equal to x, `false` otherwise. */",149],["/** Returns the quotient of this value and `x`. */",149],["* Returns a user friendly string for this suite, composed of the",98]]},{"word":"Right","context":[["partialMessage.toComplete.map(Right(_)).getOrElse({",296],["Right(())",222],["Right(",179],["case Right(x) => x",170],["case Right(_) =>",122],["import scala.Right",103],["case Right(a) => f(a)",96],["Right(None)",93],["Right(xs.sum / xs.length)",89],["try Right(a)",83]]},{"word":"Row","context":[["import org.apache.spark.sql.Row",1241],["Row(\"1\"),",916],["Row(1),",725],["import com.datastax.driver.core.Row",252],["Row(\"6\"),",228],["Row(\"yidong\"),",228],["Row(\"liantong\"),",216],["Row(\"7\"),",212],["import org.apache.spark.sql.{Row, SQLContext}",208],["import org.apache.spark.sql.{DataFrame, Row}",206]]},{"word":"RunWith","context":[["import org.junit.runner.RunWith",11532],["@RunWith(classOf[JUnitRunner])",11522],["@RunWith(classOf[BlockJUnit4ClassRunner])",151],["@RunWith(classOf[Testkit])",148],["@org.junit.runner.RunWith(classOf[org.scalatest.junit.JUnitRunner])",147],["@RunWith(classOf[Cucumber])",75],["@RunWith(classOf[Theories])",67],["//@RunWith(classOf[JUnitRunner])",66],["* Adding the `@RunWith` annotation enables the test suite to be executed",65],["@RunWith(classOf[JUnitSuiteRunner])",64]]},{"word":"S","context":[["import net.liftweb.http.S",303],["import S._",288],["type S = String; type I = Int; type D = Double; type C = Char",219],["struct S { int x; int y; };",192],["\"IT'S SHOWTIME\\n\" +",170],["S.initIfUninitted(session) {",146],["* @author Brian S O'Neill",125],[".render((P, S, B) => {",115],["* @tparam S State type",98],["assertTypedSame[I :: S :: HNil](in2, r3)",96]]},{"word":"Scala","context":[["**     ________ ___   / /  ___     Scala API                            **",1001],["// Scala",767],["**     ________ ___   / /  ___      __ ____  Scala.js Test Suite        **",618],["** Scala Quantities and Units of Measure Library and DSL                **",415],["// Scala (test only)",222],["**     ________ ___   / /  ___      __ ____  Scala.js tools             **",207],["active-learning-scala: Active Learning library for Scala",193],["// Generated by the Scala Plugin for the Protocol Buffer Compiler.",191],["/* NSC -- new Scala compiler",184],["* Scala Version",182]]},{"word":"Scalaz","context":[["import Scalaz._",3177],["import scalaz._, Scalaz._",1560],["import scalaz.Scalaz._",1113],["// Scalaz",706],["import scalaz.{Failure => _, _}, Scalaz._",59],["resolvers += \"Scalaz Bintray Repo\" at \"http://dl.bintray.com/scalaz/releases\",",50],["import scalaz._, Scalaz._, scalaz.concurrent.Task",32],["import autolift.Scalaz._",30],["* @return a Scalaz ValidatedString containing either",26],["import scalaz._; import Scalaz._",23]]},{"word":"Scope","context":[["import org.specs2.specification.Scope",772],["@State(Scope.Thread)",336],["@State(Scope.Benchmark)",302],["implicit scope: Scope): TailRec[Tree] = {",157],["trait Context extends Scope {",134],["import org.springframework.context.annotation.Scope",122],["import eu.cdevreeze.yaidom.core.Scope",104],["import org.orbeon.oxf.xforms.xbl.Scope",100],["implicit scope: Scope, pos: Position): TailRec[Tree] = {",100],["\"Scope 1\" - {",99]]},{"word":"See","context":[["* See http://www.cra.com or email figaro@cra.com for information.",856],["* See the project homepage at: https://monix.io",820],["* See the NOTICE file distributed with this work for additional",769],["// See the LICENCE.txt file distributed with this work for additional",740],["* See the notice.md file distributed with this work for additional",637],["* See the project homepage at: http://www.monifu.org",633],["* See the LICENCE.txt file distributed with this work for additional",344],["* along with Kiama.  (See files COPYING and COPYING.LESSER.)  If not, see",317],["* from outside in, and the passed spec text, with one space placed between each item. (See the documenation",248],["* See the NOTICE file distributed with this work for additional information",112]]},{"word":"Select","context":[["Select(",734],["val e1 = Select(0.25 -> 0.3, 0.25 -> 0.5, 0.25 -> 0.7, 0.25 -> 0.9)",168],["val e2 = Select(0.1 -> 1, 0.9 -> 2)",114],["val e3 = Select(0.7 -> 1, 0.2 -> 2, 0.1 -> 3)",114],["val a = If(f, Select(0.3 -> 1, 0.7 -> 2), Constant(2))",113],["val u = Select(0.25 -> 0.3, 0.25 -> 0.5, 0.25 -> 0.7, 0.25 -> 0.9)",79],["val e3 = Select(0.2 -> \"a\", 0.3 -> \"b\", 0.5 -> \"c\")",68],["val e1 = Select(0.2 -> \"a\", 0.3 -> \"b\", 0.5 -> \"c\")",66],["case Select(qualifier, item) =>",64],["/** Select a subset of elements of 'this' vector corresponding to a 'basis'.",59]]},{"word":"Seq","context":[["Seq(",8371],["libraryDependencies ++= Seq(",3788],["import scala.collection.immutable.Seq",1718],["Seq()",1375],["requestHeaders: Seq[(String, String)] = Nil",1107],["Seq.empty",959],["case _ => Seq.empty",788],["val appDependencies = Seq(",603],["resolvers ++= Seq(",559],["val expected = Seq(",526]]},{"word":"Service","context":[["import com.twitter.finagle.Service",1058],["import com.twitter.finagle.{Service, SimpleFilter}",230],["import org.springframework.stereotype.Service",180],["@Service",135],["val service = mock[Service[String, String]]",132],["Service.mk[Request, Renderer] { req =>",128],["import com.twitter.finagle.{Http, Service}",115],["import com.twitter.finagle.{Filter, Service}",108],["val service = new Service[Request, Response] {",107],["val service = new Service[String, String] {",87]]},{"word":"Set","context":[["Set[WebAPIException](TypeMismatchError)",1537],["Set(",758],["val set_addr = lset_env.foldLeft[Set[Address]](Set())((a, l) => a + locToAddr(l))",591],["val set_addr = lset_env.foldLeft[Set[Address]](Set())((a, l) => a + locToAddr(l))",591],["val col = colFun(Set(1, 2, 3))",518],["import scala.collection.mutable.Set",401],["ConfigMap.empty, None, new Tracker, Set.empty))",369],[".check(headerRegex(\"Set-Cookie\", \"CSRF-TOKEN=(.*); [P,p]ath=/\").saveAs(\"csrf_token\")))",353],["import scala.collection.Set",309],["import scala.collection.immutable.Set",304]]},{"word":"Short","context":[["// Short +- Short",251],["// Short +- Short",251],["var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null",209],["var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null",209],["_passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]",209],["// Long +- Short",188],["// Float +- Short",188],["// Int +- Short",188],["// Double +- Short",188],["// Short +- Byte",188]]},{"word":"SlowAsMolasses","context":[["@SlowAsMolasses",1022],["// SlowAsMolasses is included, and both tests should be included",225],["// SlowAsMolasses included, FastAsLight excluded",225],["// SlowAsMolasses is included. both tests should be included but one ignored",225],["// SlowAsMolasses is included, one test should be excluded",225],["assert(d.expectedTestCount(Filter(None, Set(\"org.scalatest.SlowAsMolasses\"))) === 1)",179],["assert(e.expectedTestCount(Filter(Some(Set(\"org.scalatest.SlowAsMolasses\")), Set(\"org.scalatest.FastAsLight\"))) === 1)",179],["assert(d.expectedTestCount(Filter(Some(Set(\"org.scalatest.SlowAsMolasses\")), Set(\"org.scalatest.FastAsLight\"))) === 1)",179],["assert(e.expectedTestCount(Filter(None, Set(\"org.scalatest.SlowAsMolasses\"))) === 0)",179],["// No tagsToInclude set, SlowAsMolasses excluded, TestIgnored should not be received on excluded ones",164]]},{"word":"Some","context":[["Some(",2167],["import scala.Some",1694],["assert(caught1.failedCodeLineNumber === Some(thisLineNumber - 4))",1280],["assert(caught2.failedCodeLineNumber === Some(thisLineNumber - 4))",850],["e.failedCodeFileName should be (Some(fileName))",824],["ny = Some(128),",814],["assert(caught1.failedCodeFileName === Some(fileName))",810],["Some(LocationV1(",804],["assert(caught3.failedCodeLineNumber === Some(thisLineNumber - 4))",792],["val Some(result) = route(",737]]},{"word":"Source","context":[["import scala.io.Source",5744],["* documentation that, without modification of the Source Code, enables",1872],["* Notwithstanding to the terms of section 5 (5. Conveying Modified Source",1872],["* This Source Code Form is subject to the terms of the Mozilla Public",767],["import akka.stream.scaladsl.Source",445],["import io.Source",333],["/* This Source Code Form is subject to the terms of the Mozilla Public",246],["import scala.io.Source._",138],["import akka.stream.scaladsl.{Sink, Source}",135],["* JBoss, Home of Professional Open Source",123]]},{"word":"SparkConf","context":[["import org.apache.spark.{SparkConf, SparkContext}",2037],["import org.apache.spark.SparkConf",1822],["val conf = new SparkConf()",1023],["import org.apache.spark.{SparkContext, SparkConf}",636],["val sparkConf = new SparkConf()",288],["conf: SparkConf,",162],["val conf = new SparkConf",162],["new SparkConf()",130],["import org.apache.spark.{ SparkConf, SparkContext }",111],["import org.apache.spark.{Logging, SparkConf}",110]]},{"word":"SparkContext","context":[["import org.apache.spark.SparkContext",4498],["import org.apache.spark.SparkContext._",2295],["val sc = new SparkContext(conf)",2072],["import org.apache.spark.{SparkConf, SparkContext}",2037],["sc: SparkContext,",972],["sc = new SparkContext(\"local\", \"test\")",878],["import org.apache.spark.{SparkContext, SparkConf}",636],["val sc = new SparkContext(sparkConf)",543],["sc = new SparkContext(conf)",302],["import spark.SparkContext._",218]]},{"word":"Specification","context":[["import org.specs2.mutable.Specification",6153],["import org.specs2.Specification",615],["import org.specs.Specification",510],["extends Specification",290],["class ApplicationSpec extends Specification {",237],["class IntegrationSpec extends Specification {",170],["import org.specs2.{ScalaCheck, Specification}",105],["* <h3>Specification for implementors</h3>",99],["import org.specs2.{Specification, ScalaCheck}",96],["* ====Specification====",73]]},{"word":"Stack","context":[["import scala.collection.mutable.Stack",305],["\"A Stack\" when {",283],["*     val stack = new Stack[Int]",210],["params: Stack.Params = this.params",196],["describe(\"A Stack\") {",153],["import com.twitter.finagle.Stack",146],["val stack = new Stack[Int]",144],["import collection.mutable.Stack",118],["object `A Stack` {",92],["* \"A Stack\" when { ... }",81]]},{"word":"State","context":[["@State(Scope.Thread)",336],["object State {",335],["@State(Scope.Benchmark)",302],["sealed trait State",290],["Map[Int, State](",258],["val db = State.db",224],["import State._",183],[".initialState(State())",178],["import chat.tox.antox.data.State",150],["class Backend(t: BackendScope[Props, State]) {",118]]},{"word":"Status","context":[["override def run(testName: Option[String], args: Args): Status = {",391],["Status.DRIVER_RUNNING",201],["import akka.actor.Status.Failure",188],["protected override def runTest(testName: String, args: Args): Status = {",183],["def answer(invocation: InvocationOnMock): Status = {",170],["Status(rn.code)(rn.toJson(true))",163],["import com.twitter.finagle.http.{Request, Response, Status}",138],["object Status {",134],["}.getOrElse(Status(406)(\"The server doesn't support any of the requested mime types\"))",131],["status: Status,",130]]},{"word":"Stream","context":[["import Stream._",207],["object Stream {",193],["def apply[A](as: A*): Stream[A] =",138],["def empty[A]: Stream[A] = Empty",134],["case object Empty extends Stream[Nothing]",134],["case class Cons[+A](h: () => A, t: () => Stream[A]) extends Stream[A]",130],["case class Cons[+A](h: () => A, t: () => Stream[A]) extends Stream[A]",130],["def cons[A](hd: => A, tl: => Stream[A]): Stream[A] = {",128],["def cons[A](hd: => A, tl: => Stream[A]): Stream[A] = {",128],["trait Stream[+A] {",123]]},{"word":"String","context":[["def main(args: Array[String]) {",11494],["type FixtureParam = String",7797],["def main(args: Array[String]): Unit = {",6748],["name: String,",4715],["override def toString: String = {",2286],["def name: String",1791],["id: String,",1564],[".ofType(classOf[String])",1561],["path: String,",1322],["def main(args: Array[String]) = {",1296]]},{"word":"StringBuilder","context":[["val sb = new StringBuilder",1196],["val sb = new StringBuilder()",591],["val builder = new StringBuilder",453],["val buf = new StringBuilder",363],["val s: StringBuilder = new StringBuilder",219],["val s: StringBuilder = new StringBuilder",219],["*   val builder = new StringBuilder",201],["val builder = new StringBuilder()",189],["val out = new StringBuilder",169],["import java.lang.StringBuilder",153]]},{"word":"Success","context":[["import scala.util.{Failure, Success, Try}",2670],["import scala.util.Success",2120],["import scala.util.{Failure, Success}",2054],["import scala.util.{ Failure, Success, Try }",715],["case Success(_) =>",668],["import scala.util.{Try, Success, Failure}",605],["import scala.util.{ Failure, Success }",578],["import scala.util.{ Try, Success, Failure }",527],["import scala.util.{Success, Try}",406],["import scala.util.{Success, Failure}",401]]},{"word":"Suite","context":[["**     ________ ___   / /  ___      __ ____  Scala.js Test Suite        **",618],["import org.scalatest.Suite",539],["val a = new Suite {",285],["this: Suite =>",195],["*     exists in this <code>Suite</code>",138],["* Suite style name.",137],["import org.scalatest.{BeforeAndAfterAll, Suite}",124],["* @param configMap a <code>Map</code> of key-value pairs that can be used by the executing <code>Suite</code> of tests.",117],["override def nestedSuites = Vector(new Suite {})",101],["theSuite: Suite,",101]]},{"word":"Symbol","context":[["owner: Symbol,",115],["symbol: Symbol,",104],["import sana.tiny.symbols.Symbol",85],["privateWithin: Symbol = NoSymbol,",63],["type OptionMap = Map[Symbol, Any]",54],["ownerIfExists: Symbol,",45],["import tiny.symbols.Symbol",38],["symbol: Option[Symbol] = None,",37],["Key <: Symbol,",34],["type OptionMap = Map[Symbol, String]",31]]},{"word":"SyntheticEvent","context":[["onContextMenu: U[(_ <: SyntheticEvent[_]) => _] = undefined,",452],["onDragEnter: U[(_ <: SyntheticEvent[_]) => _] = undefined,",452],["onDragLeave: U[(_ <: SyntheticEvent[_]) => _] = undefined,",452],["onPaste: U[(_ <: SyntheticEvent[_]) => _] = undefined,",452],["onDragStart: U[(_ <: SyntheticEvent[_]) => _] = undefined,",452],["onTouchEnd: U[(_ <: SyntheticEvent[_]) => _] = undefined,",452],["onDragEnd: U[(_ <: SyntheticEvent[_]) => _] = undefined,",452],["onCompositionUpdate: U[(_ <: SyntheticEvent[_]) => _] = undefined,",452],["onTouchCancel: U[(_ <: SyntheticEvent[_]) => _] = undefined,",452],["onClick: U[(_ <: SyntheticEvent[_]) => _] = undefined,",452]]},{"word":"System","context":[["System.exit(1)",3108],["System.exit(0)",1347],["val start = System.currentTimeMillis()",755],["* La Trobe University - Distributed Deep Learning System",704],["val startTime = System.currentTimeMillis()",676],["val start = System.currentTimeMillis",665],["val startTime = System.currentTimeMillis",537],["System.exit(-1)",515],["System.gc()",388],["System.err.println(",386]]},{"word":"T","context":[["* @tparam T",632],["new Matcher[T] {",373],["import kr.ac.kaist.jsaf.analysis.typing.domain.{BoolFalse => F, BoolTrue => T}",331],["type T",253],["def apply(left: T): MatchResult = {",231],["rdd: RDD[T],",211],["val ts = TableQuery[T]",209],["(\"@extensible\",          AbsConstValue(PropValue(T))),",203],["(name, AbsConstValue(PropValue(ObjectValue(loc_cons, T, F, T))))",200],["(name, AbsConstValue(PropValue(ObjectValue(loc_cons, T, F, T))))",200]]},{"word":"TODO","context":[["// TODO",1110],["* TODO",313],["//TODO",310],["// TODO:",247],["* TODO: Add description.",143],["//TODO: not yet implemented",124],["// TODO test for resources etc.",99],["// TODO: revisit this once we have trivia in place",94],["//TODO: probably replace",93],["//TODO: fix style issue and enable this scalastyle check",77]]},{"word":"Task","context":[["import scalaz.concurrent.Task",1487],["import mesosphere.marathon.core.task.Task",486],["Task.delay {",166],["Task {",116],["* provided for `Task`, `IO`, and stdlib `Future`; and `transK[M]` is provided as syntax.",91],["* val ta: Task[A] = a.transK[Task].run(s)",91],["* val ta: Task[A] = a.transK[Task].run(s)",91],["* // Unfolding into a Task",91],["import Task._",90],["object Task {",88]]},{"word":"Test","context":[["@Test",36920],["import org.junit.Test",6088],["object Test {",2134],["object Test extends dotty.runtime.LegacyApp {",832],["publishArtifact in Test := false,",777],["parallelExecution in Test := false,",642],["**     ________ ___   / /  ___      __ ____  Scala.js Test Suite        **",618],["class Test {",371],["import org.testng.annotations.Test",367],["object Test extends App {",335]]},{"word":"TestFailedException","context":[["val e1 = intercept[TestFailedException] {",7354],["val caught1 = intercept[TestFailedException] {",6788],["val caught2 = intercept[TestFailedException] {",5192],["val caught3 = intercept[TestFailedException] {",4858],["intercept[TestFailedException] {",4645],["val e2 = intercept[TestFailedException] {",3429],["val caught4 = intercept[TestFailedException] {",1419],["val e = intercept[TestFailedException] {",1269],["val e2 = intercept[exceptions.TestFailedException] {",1046],["val e = intercept[exceptions.TestFailedException] {",946]]},{"word":"TestProbe","context":[["val probe = TestProbe()",1503],["import akka.testkit.TestProbe",830],["val sender = TestProbe()",141],["import akka.testkit.{ImplicitSender, TestKit, TestProbe}",133],["val testProbe = TestProbe()",119],["val arbiter = TestProbe()",105],["import akka.testkit.{TestKit, TestProbe}",94],["implicit val probe = TestProbe()",94],["val parent = TestProbe()",81],["val receiverProbe = TestProbe()",75]]},{"word":"TestUtils","context":[["TestUtils.waitUntilTrue(() => {",417],["import kafka.utils.TestUtils",311],["val props = TestUtils.createBrokerConfig(0, TestUtils.MockZkConnect, port = 8181)",284],["val props = TestUtils.createBrokerConfig(0, TestUtils.MockZkConnect, port = 8181)",284],["implicit val config = TestUtils.NO_IMAGE_CONFIG",255],["import kafka.utils.TestUtils._",241],["TestUtils.waitUntilTrue(() =>",187],["TestUtils.deleteRecursively(new File(tempEmptyDir))",176],["import org.jetbrains.plugins.scala.util.TestUtils",152],["val set = TestUtils.singleMessageSet(\"test\".getBytes())",148]]},{"word":"The","context":[["* The interactive user interfaces in modified source and object code versions",539],["* @param httpLayer The HTTP layer implementation.",386],["* The SIRIS Project is a cooperation between Beuth University, Berlin and the",338],["* HCI Group at the University of Würzburg. The project is funded by the German",336],["* @return The result to display.",327],["* @param request The request header.",321],["* @param configuration The Play configuration.",312],["And(\"The following assertions should also hold:\")",275],["* for <code>testNames</code> for an example.) The resulting test name must not have been registered previously on",255],["* <p>The default implementation does nothing.</p>",254]]},{"word":"This","context":[["* This method enables the following syntax:",3913],["* This file is part of Neo4j.",1823],["This file is part of \"FACTORIE\" (Factor graphs, Imperative, Extensible)",1389],["* This method enables syntax such as the following:",1148],["* This method supports syntax such as the following:",1004],["* This instance is immutable and unaffected by this method call.",998],["* This Source Code Form is subject to the terms of the Mozilla Public",767],["* This method enables the following syntax given a <code>MatcherFactory$arity$</code>:",668],["* This file is part of Rudder.",604],["// This project",570]]},{"word":"Thread","context":[["Thread.sleep(1000)",2451],["Thread.sleep(100)",1358],["Thread.sleep(500)",1014],["Thread.sleep(2000)",810],["Thread.sleep(5000)",763],["Thread.sleep(3000)",433],["Thread.sleep(10)",429],["Thread.sleep(200)",369],["@State(Scope.Thread)",336],["Thread.sleep(10000)",333]]},{"word":"Throwable","context":[["case e: Throwable =>",3671],["case t: Throwable =>",1712],["case e: Throwable => {",592],["case ex: Throwable =>",581],["case _: Throwable =>",405],["def onError(ex: Throwable): Unit = {",403],["case t: Throwable => {",336],["var errorThrown: Throwable = null",304],["def onError(ex: Throwable) = {",299],["case e2: Throwable => throw e2",284]]},{"word":"Time","context":[["Time.withCurrentTimeFrozen { tc =>",462],["import com.twitter.util.Time",374],["def close(deadline: Time) = Future.Done",278],["Time.withCurrentTimeFrozen { ctl =>",270],["Time.withCurrentTimeFrozen { timeControl =>",229],["import com.twitter.util.{Future, Time}",186],["override def close(deadline: Time) =",179],["// Joda-Time",159],["val now = Time.now",113],["def close(deadline: Time): Future[Unit] = {",111]]},{"word":"TimeUnit","context":[["import java.util.concurrent.TimeUnit",4323],["import java.util.concurrent.{CountDownLatch, TimeUnit}",180],["import java.util.concurrent.TimeUnit._",162],["assertTrue(f.get(timeout, TimeUnit.SECONDS).booleanValue)",118],["TimeUnit.MILLISECONDS,",114],["assert(latch.await(5, TimeUnit.SECONDS), \"latch.await should have succeeded\")",106],[".convertDurationsTo(TimeUnit.MILLISECONDS)",88],["@OutputTimeUnit(TimeUnit.NANOSECONDS)",86],["@OutputTimeUnit(TimeUnit.SECONDS)",86],["@OutputTimeUnit(TimeUnit.MICROSECONDS)",85]]},{"word":"Timeout","context":[["import akka.util.Timeout",5496],["implicit val timeout = Timeout(5 seconds)",410],["implicit val timeout = Timeout(5.seconds)",390],["timeout: Timeout,",172],["implicit val timeout = Timeout(10 seconds)",146],["implicit val timeout = Timeout(1 second)",98],["import org.scalatest.concurrent.PatienceConfiguration.Timeout",82],["implicit val timeout = Timeout(10.seconds)",82],["import akka.util.{ByteString, Timeout}",77],["implicit val timeout = Timeout(2 seconds)",70]]},{"word":"TopicAndPartition","context":[["import kafka.common.TopicAndPartition",606],["val topicAndPartition = TopicAndPartition(topic, partition)",217],["val topicAndPartition = TopicAndPartition(topic, partitionToBeReassigned)",115],["import kafka.common.{ErrorMapping, TopicAndPartition}",106],["assertEquals(hw, hwFile1.read.getOrElse(TopicAndPartition(topic, 0), 0L))",98],["val topicAndPartition = TopicAndPartition(topic, 0)",93],[".format(localBrokerId, correlationId, controllerId, epoch, TopicAndPartition(state._1.topic, state._1.partitionId)))",85],["assertEquals(hw, hwFile2.read.getOrElse(TopicAndPartition(topic, 0), 0L))",70],["val topicAndPartition = TopicAndPartition(\"test\", 0)",65],["def selectLeader(topicAndPartition: TopicAndPartition, currentLeaderAndIsr: LeaderAndIsr): (LeaderAndIsr, Seq[Int]) = {",59]]},{"word":"Tree","context":[["implicit pos: Position): js.Tree = {",433],["object Tree {",221],["implicit val pos: Position) extends Tree {",219],["sealed trait Tree[+A]",170],["case class Branch[A](left: Tree[A], right: Tree[A]) extends Tree[A]",169],["case class Leaf[A](value: A) extends Tree[A]",169],["case class Branch[A](left: Tree[A], right: Tree[A]) extends Tree[A]",169],["case class Branch[A](left: Tree[A], right: Tree[A]) extends Tree[A]",169],["implicit scope: Scope): TailRec[Tree] = {",157],["override def inspect(tree: Tree): Unit = {",134]]},{"word":"Try","context":[["import scala.util.Try",8033],["import scala.util.{Failure, Success, Try}",2670],["Try {",2600],["import scala.util.{ Failure, Success, Try }",715],["import scala.util.{Try, Success, Failure}",605],["import scala.util.{ Try, Success, Failure }",527],["import scala.util.{Success, Try}",406],["import scala.util.{Failure, Try}",351],["import scala.util.{Success, Failure, Try}",259],["import scala.util.{Try, Failure, Success}",147]]},{"word":"Type","context":[["s\"Content-Type = $acceptHeader\" |: (requestContentType_(path) ?= Some(acceptHeader)),",176],["Seq() :+ (\"Accept\" -> acceptHeader) :+ (\"Content-Type\" -> contentType)",174],[".header(\"Content-Type\", \"application/json\")",172],["object Type {",164],["import java.lang.reflect.Type",162],["import org.objectweb.asm.Type",160],["* Type in expressions to have them evaluated.",140],["* Type :help for more information.",140],[".setType(Value.Type.SCALAR)",111],["* Get the JDBC SQL Type for this field",108]]},{"word":"U","context":[["style: U[js.Any] = undefined,",485],["title: U[String] = undefined,",455],["hidden: U[Boolean] = undefined,",453],["onKeyPress: U[(_ <: SyntheticEvent[_]) => _] = undefined,",452],["onSelect: U[(_ <: SyntheticEvent[_]) => _] = undefined,",452],["onDragLeave: U[(_ <: SyntheticEvent[_]) => _] = undefined,",452],["onTouchCancel: U[(_ <: SyntheticEvent[_]) => _] = undefined,",452],["onBlur: U[(_ <: SyntheticEvent[_]) => _] = undefined,",452],["onKeyUp: U[(_ <: SyntheticEvent[_]) => _] = undefined,",452],["onDoubleClick: U[(_ <: SyntheticEvent[_]) => _] = undefined,",452]]},{"word":"URI","context":[["import java.net.URI",3076],["import java.net.{URI, URL}",128],["uri: URI,",54],["val uri = new URI(path)",54],["import java.net.{ URI, URL }",54],["val uri = new java.net.URI(getFileUrl(datasetId))",48],["val uri = new URI(url)",45],["* Hadoop-supported file system URI, and return it as an RDD of Strings.",43],["new URI(",40],["* @param connection used to construct the full URI",39]]},{"word":"URL","context":[["import java.net.URL",3544],["import java.net.{URL, URLClassLoader}",166],["import java.net.{URI, URL}",128],["assert (checker, Start, URL(\"a\"), URL(\"b\"), Method(\"POST\"), ReqType(\"(application/xml)(;.*)?\"), WellXML, ContentFail)",124],["assert (checker, Start, URL(\"a\"), URL(\"b\"), Method(\"POST\"), ReqType(\"(application/xml)(;.*)?\"), WellXML, ContentFail)",124],["import java.net.{HttpURLConnection, URL}",115],["assert (checker, Start, URL(\"a\"), URL(\"b\"), Method(\"POST\"), ReqType(\"(application/xml)(;.*)?\"), ContentFail)",103],["assert (checker, Start, URL(\"a\"), URL(\"b\"), Method(\"POST\"), ReqType(\"(application/xml)(;.*)?\"), ContentFail)",103],["* @param master Cluster URL to connect to (e.g. mesos://host:port, spark://host:port, local[4]).",102],["assert(checker,Start, URL(\"x\"),  Method(\"POST\"),",84]]},{"word":"UUID","context":[["import java.util.UUID",7625],["import java.util.{Date, UUID}",356],["guid: _root_.java.util.UUID,",246],["val id = gen[UUID]",222],["id: UUID,",170],["private val TestRequestId = java.util.UUID.randomUUID().toString",160],["object id extends UUIDColumn(this) with PartitionKey[UUID]",132],["(__ \\ \"guid\").read[_root_.java.util.UUID] and",120],["apiRequestID = UUID.randomUUID",113],["import java.util.UUID.randomUUID",112]]},{"word":"UndefOr","context":[["val enabledOuter: js.UndefOr[Boolean] = enabled",415],["override val enabled: js.UndefOr[Boolean] = enabledOuter",415],["val enabled: js.UndefOr[Boolean] = js.undefined",415],["override val lineWidth: js.UndefOr[Double] = lineWidthOuter",319],["val lineWidth: js.UndefOr[Double] = js.undefined",319],["val lineWidthOuter: js.UndefOr[Double] = lineWidth",319],["override val color: js.UndefOr[String | js.Object] = colorOuter",300],["val color: js.UndefOr[String | js.Object] = js.undefined",300],["val colorOuter: js.UndefOr[String | js.Object] = color",300],["val fillColorOuter: js.UndefOr[String | js.Object] = fillColor",284]]},{"word":"Unit","context":[["def main(args: Array[String]): Unit = {",6748],[": Unit = {",1637],["override def run(): Unit = {",1540],["override def preStart(): Unit = {",1102],["): Unit = {",1046],["def run(): Unit = {",1011],["override def postStop(): Unit = {",916],["override def beforeAll(): Unit = {",781],["override def afterAll(): Unit = {",761],["val promise = Promise[Unit]()",652]]},{"word":"User","context":[["* User: Alexander Podkhalyuzin",1076],["import models.User",768],["object User {",351],["import lila.user.User",326],["case class User(",256],["* User: Dmitry Naydanov",247],["import lila.user.{ User, UserRepo }",230],["* User: mihais",202],["user: User,",177],["* User: Alefas",174]]},{"word":"Utils","context":[["import org.apache.spark.util.Utils",895],["object Utils {",490],["import Utils._",408],["import org.apache.kafka.common.utils.Utils",270],["Utils.runInSwingThread {",220],["Utils.deleteRecursively(tempDir)",101],["val tempDir = Utils.createTempDir()",92],["import kafka.utils.Utils",89],["if (Utils.isLollipopOrAbove) {",87],["println(Utils.stackTrace(e))",75]]},{"word":"V","context":[["*           `  |/  V  V  `   V  \\#\\| |  | |/#/  V   '  V  V  \\|  '",286],["*           `  |/  V  V  `   V  \\#\\| |  | |/#/  V   '  V  V  \\|  '",286],["*           `  |/  V  V  `   V  \\#\\| |  | |/#/  V   '  V  V  \\|  '",286],["*           `  |/  V  V  `   V  \\#\\| |  | |/#/  V   '  V  V  \\|  '",286],["*           `  |/  V  V  `   V  \\#\\| |  | |/#/  V   '  V  V  \\|  '",286],["*           `  |/  V  V  `   V  \\#\\| |  | |/#/  V   '  V  V  \\|  '",286],["* @tparam V",275],["object V {",273],["valueClass: Class[V],",149],["reduceFunc: (V, V) => V,",101]]},{"word":"Value","context":[["(\"@proto\", AbsConstValue(PropValue(ObjectValue(Value(ObjProtoLoc), F, F, F)))),",540],["(\"prototype\", AbsConstValue(PropValue(ObjectValue(Value(loc_proto), F, F, F))))",263],["(\"length\", AbsConstValue(PropValue(ObjectValue(Value(AbsNumber.alpha(0)), F, F, F)))),",204],["import org.apache.accumulo.core.data.{Key, Value}",178],["(\"@hasinstance\", AbsConstValue(PropValue(Value(NullTop)))),",144],[".setType(Value.Type.SCALAR)",111],["(\"@proto\", AbsConstValue(PropValue(ObjectValue(Value(HTMLElement.loc_proto), F, F, F)))),",110],["((Helper.ReturnStore(h, Value(UndefTop)), ctx), (he, ctxe))",95],["type Type = Value",84],["((Helper.ReturnStore(h, Value(NumTop)), ctx), (he, ctxe))",82]]},{"word":"Vector","context":[["children = Vector(",739],["Vector(",648],["import org.apache.spark.mllib.linalg.Vector",373],["import org.apache.spark.mllib.linalg.{Vector, Vectors}",230],["Vector(),",168],["Vector.empty,",161],["import scala.Vector",150],["Vector,",113],["Vector.empty",110],["val nils: Vector[List[Int]] = Vector(Nil, Nil, Nil)",104]]},{"word":"We","context":[["* all returns a list of all the valid, known values. We use",218],["* generated. We want to make it easy and obvious for users of",217],["* We use all CAPS for the variable name to avoid collisions",217],["// We can't have the ensureTopicExists check here since the controller sends it as an advisory to all brokers so they",111],["// We can generalize `formatAbs` and `formatFactorial` to",96],["Note that we can go back and forth between the two forms. We can curry",94],["null, // We can't predict the event_id",92],["* We represent a set by its characteristic function, i.e.",90],["InternalServerError(s\"Oops. There seems to be a problem ($e) with the server. We are working on it!\")",89],["val d = ds(mid2) // We index into an array using the same",88]]},{"word":"When","context":[["// When",775],["When(\"the wadl is translated\")",428],["//When",351],["* The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.",192],["When(\"The app is deployed\")",154],["} When {",135],["* The fill color of the point marker. When <code>null</code>, the series' or point's color is used.",131],["* @param fillColor The fill color of the point marker. When <code>null</code>, the series' or point's color is used.",131],["* Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.",112],["* Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.",112]]},{"word":"WordSpec","context":[["import org.scalatest.{Matchers, WordSpec}",1480],["import org.scalatest.WordSpec",1188],["class TestSpec extends WordSpec {",733],["import org.scalatest.{ Matchers, WordSpec }",334],["val a = new WordSpec {",232],["class MySpec extends WordSpec {",226],["new WordSpec {",196],["* import org.scalatest.WordSpec",180],["import org.scalatest.{WordSpec, Matchers}",152],["extends WordSpec",145]]},{"word":"X","context":[["class X {",329],["|class X {",313],[".userAgentHeader(\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:33.0) Gecko/20100101 Firefox/33.0\")",285],["ruledera(Sequenta(Structure_Freevar(List('X')),",211],["\"X-CSRF-TOKEN\" -> \"${csrf_token}\"",198],["object X {",177],["\"X-TESTO\"->List(\"boo\"))),response,chain)",166],["\"Mac OS X\",",137],["X",121],["assert(csReq.getHeader(\"X-SUB-RESOURCE2\") == null)",114]]},{"word":"_","context":[["case _ =>",58102],["case _ => None",19486],["case _ => false",19294],["import scala.concurrent.duration._",18263],["import scala.collection.JavaConversions._",15808],["import scala.collection.JavaConverters._",13821],["import org.scalatest._",9769],["import sbt._",9410],["import akka.actor._",6520],["import play.api.libs.json._",6149]]},{"word":"_1","context":[["assert(statement._2.namespace._1 == gaapNS, \"Concept must belong to gaap namespace\")",389],["val lset_this = h(SinglePureLocalLoc)(\"@this\")._1._2._2",367],["val lset_env = h(SinglePureLocalLoc)(\"@env\")._1._2._2",267],["val addr_env = (cp._1._1, set_addr.head)",260],["val addr_env = (cp._1._1, set_addr.head)",260],[".groupBy(_._1)",226],["if (!t._1) {",226],["}.collect.toSeq.sortBy(_._1)",215],[".map(_._1)",207],["}._1",152]]},{"word":"_2","context":[["assert(statement._2.namespace._1 == gaapNS, \"Concept must belong to gaap namespace\")",389],["val lset_this = h(SinglePureLocalLoc)(\"@this\")._2._2",380],["val lset_this = h(SinglePureLocalLoc)(\"@this\")._2._2",380],["val lset_this = h(SinglePureLocalLoc)(\"@this\")._1._2._2",367],["val lset_this = h(SinglePureLocalLoc)(\"@this\")._1._2._2",367],["undefinedSubst = t._2",299],["val lset_env = h(SinglePureLocalLoc)(\"@env\")._2._2",283],["val lset_env = h(SinglePureLocalLoc)(\"@env\")._2._2",283],[".map(_._2)",274],["val lset_env = h(SinglePureLocalLoc)(\"@env\")._1._2._2",267]]},{"word":"__","context":[["/*                     __                                               *\\",2275],["** /____/\\___/_/ |_/____/_/ | |__/ /____/                               **",1244],["**  __\\ \\/ /__/ __ |/ /__/ __ |/_// /_\\ \\    http://scala-js.org/       **",1068],["**  __\\ \\/ /__/ __ |/ /__/ __ |/_// /_\\ \\    http://scala-js.org/       **",1068],["**  __\\ \\/ /__/ __ |/ /__/ __ |/_// /_\\ \\    http://scala-js.org/       **",1068],["**  __\\ \\/ /__/ __ |/ /__/ __ |/_// /_\\ \\    http://scala-js.org/       **",1068],["**  __\\ \\/ /__/ __ |/ /__/ __ |/_// /_\\ \\    http://scala-js.org/       **",1068],["**  __\\ \\/ /__/ __ |/ /__/ __ |    http://scala-lang.org/               **",945],["**  __\\ \\/ /__/ __ |/ /__/ __ |    http://scala-lang.org/               **",945],["**  __\\ \\/ /__/ __ |/ /__/ __ |    http://scala-lang.org/               **",945]]},{"word":"___","context":[["** /____/\\___/_/ |_/____/_/ | |__/ /____/                               **",1244],["** /____/\\___/_/ |_/____/_/ | |                                         **",1011],["**     ________ ___   / /  ___     Scala API                            **",1001],["**     ________ ___   / /  ___     Scala API                            **",1001],["**     ________ ___   / /  ___      __ ____  Scala.js Test Suite        **",618],["**     ________ ___   / /  ___      __ ____  Scala.js Test Suite        **",618],["*  ____    ____    _____    ____    ___     ____",574],["* |  _ \\  |  _ \\  | ____|  / ___|  / _/    / ___|        Precog (R)",574],["* |  _ \\  |  _ \\  | ____|  / ___|  / _/    / ___|        Precog (R)",574],["fCLff ;:: tfLLC         / ___/      /  |/  /____ _ _____ / /_",389]]},{"word":"____","context":[["**                          |/____/                                     **",1264],["** /____/\\___/_/ |_/____/_/ | |__/ /____/                               **",1244],["** /____/\\___/_/ |_/____/_/ | |__/ /____/                               **",1244],["** /____/\\___/_/ |_/____/_/ | |__/ /____/                               **",1244],["** /____/\\___/_/ |_/____/_/ | |                                         **",1011],["** /____/\\___/_/ |_/____/_/ | |                                         **",1011],["**     ________ ___   / /  ___      __ ____  Scala.js Test Suite        **",618],["*  ____    ____    _____    ____    ___     ____",574],["*  ____    ____    _____    ____    ___     ____",574],["*  ____    ____    _____    ____    ___     ____",574]]},{"word":"_root_","context":[["import _root_.net.liftweb.util._",560],["import _root_.net.liftweb.common._",405],["_root_.scala.None,",351],["import _root_.io.gatling.core.scenario.Simulation",278],["import _root_.net.liftweb.http._",265],["guid: _root_.java.util.UUID,",246],["_root_.scala.None",241],["import _root_.scala.xml._",209],["import _root_.net.liftweb.util.Helpers._",181],["import _root_.net.liftweb.mapper._",180]]},{"word":"a","context":[["* A \"Related Module\" means a set of sources files including their",1872],["a",1595],["def `should do nothing if valid, else throw a TFE with an appropriate error message` {",1594],["* licence, when you create a Related Module, this Related Module is",1268],["it(\"should do nothing if valid, else throw a TFE with an appropriate error message\") {",1196],["a match {",1102],["return a;",954],["val a = new MySpec",696],["val a = 1",680],["* This method enables the following syntax given a <code>MatcherFactory$arity$</code>:",668]]},{"word":"a1","context":[["val a1 = new Array[Byte](400)",198],["println (\"Test direct: a1 = \" + a1.deep)",143],["println (\"Test direct: a1 = \" + a1.deep)",143],["val ( ( a1 :: Nil ) :: Nil ) = r.aux",138],["a1 match {",126],["def append[A](a1: List[A], a2: List[A]): List[A] =",122],["Some( ( r.uProof, r.root, a1, p1 ) )",105],["a1: Arbitrary[A1], s1: Shrink[A1], pp1: A1 => Pretty,",90],["f(a1.asInstanceOf[T1],",84],["store.putSingle(\"a1\", a1, StorageLevel.MEMORY_ONLY)",83]]},{"word":"abstract","context":[["* Question: Should we implment this method here, or should it remain abstract",178],["sealed abstract class List",142],["|abstract class b {",140],["// the HttpService trait defines only one abstract member, which",100],["abstract class TweetSet {",80],["abstract override def withFixture(test: NoArgTest) = {",73],["*   abstract override def withFixture(test: NoArgTest) {",68],["|abstract class A {",67],["abstract class CodeTree",66],["* abstract classes), and create an instance inside each test method.",62]]},{"word":"ac","context":[["import kr.ac.kaist.jsaf.analysis.typing.AddressManager._",517],["import kr.ac.kaist.jsaf.analysis.typing.domain._",480],["import kr.ac.kaist.jsaf.analysis.typing.models._",466],["import kr.ac.kaist.jsaf.analysis.typing.models.AbsConstValue",335],["import kr.ac.kaist.jsaf.analysis.typing.domain.{BoolFalse => F, BoolTrue => T}",331],["import kr.ac.kaist.jsaf.analysis.typing._",274],["import kr.ac.kaist.jsaf.analysis.typing.domain.Context",252],["import kr.ac.kaist.jsaf.analysis.typing.domain.Heap",252],["val contentHeaders = for { ct <- contentTypes; ac <- acceptHeaders } yield (ac, ct)",176],["val contentHeaders = for { ct <- contentTypes; ac <- acceptHeaders } yield (ac, ct)",176]]},{"word":"action","context":[["action:",1145],["action",377],["def defaultTransK[M[_]: Monad: Catchable: Capture] = Kleisli(_ => action.transK[M].run(s))",364],["action match {",324],["action { (_, c) =>",258],["val action = for {",172],["assetHelper.withCleaner(wsk.action, name) {",172],["put(entityStore, action)",155],["import org.orbeon.oxf.xforms.action.XFormsAPI._",146],[".action((x, c) => c.copy(input = x))",117]]},{"word":"actor","context":[["import akka.actor._",6520],["import akka.actor.ActorSystem",6330],["import akka.actor.ActorRef",3240],["import akka.actor.Actor",2890],["import akka.actor.Props",2251],["import akka.actor.ActorLogging",801],["import akka.actor.{ActorSystem, Props}",783],["import akka.actor.{Props, ActorSystem}",393],["import im.actor.server.db.DbExtension",390],["import akka.actor.actorRef2Scala",378]]},{"word":"actual","context":[["actual should be (expected)",3093],["assert(actual === expected)",683],["actual should be(expected)",378],["assert(actual == expected)",159],["actual.sql(true, null)._2 should be (Nil)",147],["* to <code>ignore</code> without deleting or commenting out the actual test code. The test will not be executed, but a",128],["assertEquals(expected, actual)",126],["actual.sql(true, null)._1 should be ('empty)",123],["assert(expected === actual)",111],["val actual =",105]]},{"word":"add","context":[["*  @param s  the scalar to add",288],["pr.add(e2)",282],["pr.add(e3)",264],["pr.add(e1)",257],["*  @param b  the vector to add",244],["*  @param x  the scalar to add",237],["*  @param b  the matrix to add (requires leDimensions)",213],["*  @param u  the vector to add",206],["pr.add(e4)",164],["* add your integration spec here.",149]]},{"word":"additional","context":[["* distributed with this work for additional information",4340],["* See the NOTICE file distributed with this work for additional",769],["// See the LICENCE.txt file distributed with this work for additional",740],["* See the notice.md file distributed with this work for additional",637],["* or visit www.oracle.com if you need additional information or have any",372],["* See the LICENCE.txt file distributed with this work for additional",344],["* @param extraArguments The additional JDI arguments to provide",238],["* @param extraArguments Any additional arguments to provide to the request",138],["* See the NOTICE file distributed with this work for additional information",112],["distributed with this work for additional information",106]]},{"word":"address","context":[["* address: ezh@ezh.msk.ru",541],["if (set_addr.size > 1) throw new InternalError(\"API heap allocation: Size of env address is \" + set_addr.size)",521],["address: String,",104],[".bindTo(address)",102],["expectMsg(address)",96],["address = Some(LastAddress(",79],["\"address\" ->",75],["null, // No geo-location for this IP address",72],["r.header.headers.get(LOCATION) should equal(Some(VehicleLookupPage.address))",63],["address = Some(PartialAddress(",61]]},{"word":"after","context":[["after {",1403],["val after =",449],["doTextTest(before, after)",427],["* @throws TestRegistrationClosedException if invoked after <code>run</code> has been invoked on this suite",350],["* @param slideDuration  sliding interval of the window (i.e., the interval after which",346],["* that were added by the server after this library was",217],["assert(e.getMessage === \"An it clause must only appear after a top level subject clause.\")",160],["assert(e.getMessage === \"A they clause must only appear after a top level subject clause.\")",160],["//                                     ------------------after sgp4   :---------------",118],["* Called after the zookeeper session has expired and a new session has been created. You would have to re-create",88]]},{"word":"akka","context":[["import akka.actor._",6520],["import akka.actor.ActorSystem",6330],["import akka.util.Timeout",5496],["import akka.pattern.ask",3987],["import akka.actor.ActorRef",3240],["import akka.actor.Actor",2890],["import akka.actor.Props",2251],["import akka.util.ByteString",2074],["import akka.stream.ActorMaterializer",1378],["import akka.event.Logging",1161]]},{"word":"all","context":[["e1.message should be (Some(\"'all' inspection failed, because: \\n\" +",610],["import scalatags.JsDom.all._",475],["e2.message should be (Some(\"'all' inspection failed, because: \\n\" +",322],["e.message should be (Some(\"'all' inspection failed, because: \\n\" +",307],["// Log all HTTP requests",285],["import scalatags.Text.all._",221],["* all returns a list of all the valid, known values. We use",218],["* all returns a list of all the valid, known values. We use",218],["// This object has all properties of the HTMLElement object",218],["* We use all CAPS for the variable name to avoid collisions",217]]},{"word":"also","context":[["And(\"The following assertions should also hold:\")",275],["// These are meant to be typed into the REPL. You can also run",150],["// also check partition ownership",128],["* Merge the values for each key using an associative reduce function. This will also perform",113],["* Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.",112],["* Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.",112],["* In addition, this trait's implementation will also auto-tag tests with class level annotations.",110],["it(\"should also work with asOpt\") {",102],["it(\"should also work with validate\") {",102],["*  main diagonal.  Should also equal the sum of the eigenvalues.",96]]},{"word":"an","context":[["def `should use an explicitly provided Equality` {",1594],["def `should do nothing if valid, else throw a TFE with an appropriate error message` {",1594],["it(\"should use an explicitly provided Equality\") {",1196],["it(\"should do nothing if valid, else throw a TFE with an appropriate error message\") {",1196],["* @param ordinal an <code>Ordinal</code> that can be used to place this event in order in the context of",520],["/** Maps whole row to an option. Useful for outer joins. */",399],["* @param formatter an optional formatter that provides extra information that can be used by reporters in determining",336],["* Here's an example:",334],["\"should use an explicitly provided Equality\" in {",286],["\"should do nothing if valid, else throw a TFE with an appropriate error message\" in {",286]]},{"word":"analysis","context":[["import kr.ac.kaist.jsaf.analysis.typing.AddressManager._",517],["import kr.ac.kaist.jsaf.analysis.typing.domain._",480],["import kr.ac.kaist.jsaf.analysis.typing.models._",466],["import kr.ac.kaist.jsaf.analysis.typing.models.AbsConstValue",335],["import kr.ac.kaist.jsaf.analysis.typing.domain.{BoolFalse => F, BoolTrue => T}",331],["import kr.ac.kaist.jsaf.analysis.typing._",274],["import kr.ac.kaist.jsaf.analysis.typing.domain.Context",252],["import kr.ac.kaist.jsaf.analysis.typing.domain.Heap",252],["import kr.ac.kaist.jsaf.analysis.typing.models.AbsBuiltinFunc",172],["package kr.ac.kaist.jsaf.analysis.typing.models.Tizen",165]]},{"word":"and","context":[["* Redistribution and use in source and binary forms, with or without",3573],["* Redistribution and use in source and binary forms, with or without",3573],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",2556],["def `should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value` {",1302],["* which accompanies this distribution and is available at",1232],["* accompanies this distribution and is available at",1026],["* This instance is immutable and unaffected by this method call.",998],["* documentation and/or other materials provided with the distribution.",943],["* which accompanies this distribution, and is available at",935],["*    and/or other materials provided with the distribution.",906]]},{"word":"android","context":[["import android.content.Context",955],["import android.os.Bundle",840],["import android.util.Log",651],["import android.app.Activity",545],["import android.view.View",495],["import android.content.Intent",423],["import android.preference.PreferenceManager",265],["import android.net.Uri",265],["import android.widget._",237],["import android.widget.Toast",203]]},{"word":"annotation","context":[["import scala.annotation.tailrec",7796],["@annotation.tailrec",2207],["@js.annotation.ScalaJSDefined",1291],["import scala.annotation.implicitNotFound",962],["import org.springframework.beans.factory.annotation.Autowired",795],["import annotation.tailrec",707],["@scala.annotation.tailrec",603],["import scala.scalajs.js.annotation.ScalaJSDefined",482],["import scala.annotation.StaticAnnotation",456],["import org.apache.spark.annotation.DeveloperApi",435]]},{"word":"annotations","context":[["import org.testng.annotations.Test",367],["import org.openjdk.jmh.annotations._",331],["import org.kiji.annotations.ApiAudience",200],["import com.wordnik.swagger.annotations._",138],["import org.jetbrains.annotations.Nullable",128],["import org.kiji.annotations.ApiStability",120],["import org.intellij.lang.annotations.Language",115],["* In addition, this trait's implementation will also auto-tag tests with class level annotations.",110],["import org.jetbrains.annotations.NotNull",106],["import io.swagger.annotations._",97]]},{"word":"any","context":[["* underlying futures complete. It fails immediately if any of them",396],["* @throws NullPointerException if any of the passed values are <code>null</code>",392],["* or visit www.oracle.com if you need additional information or have any",372],["import org.mockito.Matchers.any",370],["when(mockDataManager.findUserByToken(Matchers.eq(SOME_TOKEN), any[DateTime])",296],["* the current reporter immediately. If invoked at any other time, it will",263],["(any[ExecutionContext])).thenReturn(Future.successful(Some(SOME_USER)))",262],["* @param specText the specification text, which will be combined with the descText of any surrounding describers",247],["* Unauthorized copying of this file, via any medium is strictly prohibited.",234],["*             On any error.",228]]},{"word":"apache","context":[["import org.apache.spark.rdd.RDD",7440],["import org.apache.spark.SparkContext",4498],["import org.apache.spark.SparkContext._",2295],["import org.apache.hadoop.conf.Configuration",2106],["import org.apache.spark.{SparkConf, SparkContext}",2037],["import org.apache.spark.SparkConf",1822],["import org.apache.spark.Logging",1524],["import org.apache.commons.io.FileUtils",1486],["import org.apache.spark.sql.types._",1484],["import org.apache.log4j.Logger",1455]]},{"word":"api","context":[["import play.api.libs.json._",6149],["import play.api.mvc._",5405],["import play.api.libs.json.Json",4321],["import play.api.Play.current",3657],["import play.api.Logger",2664],["import play.api._",2272],["import play.api.data.Forms._",2020],["import play.api.test.Helpers._",2015],["import play.api.libs.functional.syntax._",1600],["import play.api.libs.concurrent.Execution.Implicits.defaultContext",1556]]},{"word":"app","context":[["val app = AppDefinition(",774],["app,",616],["import android.app.Activity",545],["register(\"test://app/src/test/resources/xsd/test-urlxsd.xsd\",",337],["package app",319],["import lila.app._",298],["Given(\"a new app\")",294],["override def onStart(app: Application) {",274],["import com.twitter.app.App",242],["import cc.factorie.app.nlp._",215]]},{"word":"appId","context":[["appId = appId,",228],["appId = appId,",228],["appId: PathId,",191],["appId = dsp.appId,",160],["appId = dsp.appId,",160],["appId: Int,",137],["appId,",135],["appId = 1,",110],["val appId = testBasePath / \"app\"",101],["val appId = PathId(\"/app\")",101]]},{"word":"append","context":[["log.append(set)",328],["buf.append(\",\")",240],["sb.append(\"\\n\")",215],["dataFileWriter.append(record);",168],["*     builder.append(\"ScalaTest is \")",163],["sb.append('\"')",146],["*       builder.append(\"easy!\")",144],["*       builder.append(\"fun!\")",143],["LiftRules.early.append(_.setCharacterEncoding(\"UTF-8\"))",130],["def append[A](a1: List[A], a2: List[A]): List[A] =",122]]},{"word":"application","context":[["<representation mediaType=\"application/json\"/>",851],["<representation mediaType=\"application/xml\"/>",767],["</application>",609],["<application xmlns=\"http://wadl.dev.java.net/2009/02\"",583],["* serving files in a web or/and network application,",540],["import com.intellij.openapi.application.ApplicationManager",395],["respondWithMediaType(`application/json`) {",370],["\"Accept\" -> \"\"\"application/json\"\"\"",353],["\"Accept\" -> \"\"\"application/json\"\"\",",327],["assert (checker, \"count(/chk:checker/chk:step[@type='REQ_TYPE_FAIL' and @notMatch='(?i)(application/xml)(;.*)?']) = 1\")",281]]},{"word":"apply","context":[["def apply(",2624],["} // apply",849],["def apply() = {",726],["def apply(event: Event) {",565],["* <code>apply</code> method to the current reporter. If invoked in a constructor, it",383],["def apply() = component()",369],["}.update.apply()",253],["def apply() {",249],["val new_p = apply( p, name, rewriterules, proofSize, version, ProofLinkPassing )",234],["def apply(left: T): MatchResult = {",231]]},{"word":"are","context":[["* Detailed contributors are listed in the CONTRIBUTOR.md",477],["* @throws NullPointerException if any of the passed values are <code>null</code>",392],["* UNDEFINED captures values that are sent either in error or",217],["* The following methods are already implemented",209],["it(\"should propagate out Errors that are direct subtypes of Error in JDK 1.5, other than \" +",177],["* are met:",168],["* Checks that all required fields are non-null.",167],["* Return an RDD with the elements from `this` that are not in `other`.",151],["// These are meant to be typed into the REPL. You can also run",150],["* @param name name of collection we are crawling for",142]]},{"word":"arg","context":[["arg match {",479],["arg",265],["\"NoArgTest's no-arg apply method is invoked\") {",101],["arg[String](\"<input>\")",94],["for (arg <- args) {",92],["it(\"should pass a NoArgTest that invokes the no-arg test when the \" +",91],["if(!options.has(arg)) {",87],["for (arg <- args)",80],["System.err.println(\"Missing required argument \\\"\" + arg + \"\\\"\")",80],[".arg(\"output\", \"fakeOutput\")",76]]},{"word":"args","context":[["def main(args: Array[String]) {",11494],["def main(args: Array[String]): Unit = {",6748],["def main(args: Array[String]) = {",1296],["|  def main(args: Array[String]) {",1041],["args match {",577],["(h: Heap, ctx: Context, cfg: CFG, fun: String, args: CFGExpr, fid: FunctionId) => {",501],["(h: Heap, ctx: Context, cfg: CFG, fun: String, args: CFGExpr) => {",485],["def main(args : Array[String]) {",410],["if (args.length == 0) {",402],["* @param args the <code>Args</code> for this run",396]]},{"word":"argument","context":[["def `should throw TFE with friendly reminder when single GenTraversable argument is passed and failed` {",112],["System.err.println(\"Missing required argument \\\"\" + arg + \"\\\"\")",80],["* passing {@code this} as the argument.",78],["* for creating the fixture argument and passing it to the test function.",63],["* The string argument of \"assert\" is a message that is printed in case",62],["test(\"intNotZero throws an exception if its argument is 0\") {",61],["* In Scala, it is allowed to pass an argument to a method using the block",61],["* syntax, i.e. `{ argument }` instead of parentheses `(argument)`.",61],["* throws an `IllegalArgumentException` if its argument is `0`.",61],["* which tests that its argument evaluates to `true`. So one of the simplest",61]]},{"word":"arguments","context":[["/* arguments */",332],["* @param extraArguments The additional JDI arguments to provide",238],["arguments: _*",200],["* @param extraArguments Any additional arguments to provide to the request",138],["val boundParams = params.validate(arguments)",134],["* Register a test with the given spec text, optional tags, and test function value that takes no arguments.",121],["params.validate(arguments)",118],["*         requests from extra arguments",110],["val arguments = Seq(mock[JDIArgument])",108],["val arguments = Seq(mock[JDIRequestArgument])",102]]},{"word":"array","context":[["array",459],["*  @param a  the array to be sorted",280],["* @param input RDD of (label, array of features) pairs.",178],["*  @param u  the 2D array of values to assign",166],["// test direct sorting (will modify the data array)",143],["// test indirect sorting (will not modify the data array)",143],["type: array",103],["case ArraySelect(array, index) =>",92],["val d = ds(mid2) // We index into an array using the same",88],["case ArrayLength(array) =>",80]]},{"word":"as","context":[["* This method enables syntax such as the following:",1148],["* This method supports syntax such as the following:",1004],["* of this program must display Appropriate Legal Notices, as required under",540],["* For example, this method supports syntax such as the following:",501],["as match {",345],["// Same as previous, except Ignore specifically mentioned in excludes set",225],["*  The left nullspace of matrix 'a' is the same as the right nullspace of 'a.t'.",190],["else Cons(as.head, apply(as.tail: _*))",179],["else Cons(as.head, apply(as.tail: _*))",179],["* the current threads name as <code>threadname</code>, and the current time as <code>timeStamp</code>.",172]]},{"word":"asInstanceOf","context":[["val foo = (new Foo).asInstanceOf[js.Dynamic]",319],["ScalaFileType.SCALA_FILE_TYPE, text).asInstanceOf[ScalaFile]",308],["val context: LoggerContext = LoggerFactory.getILoggerFactory.asInstanceOf[LoggerContext]",288],["val trce = testFailedEvents(0).throwable.get.asInstanceOf[TestRegistrationClosedException]",222],["val ip = event.asInstanceOf[InfoProvided]",222],["val fs = ds.getFeatureSource(sftName).asInstanceOf[AccumuloFeatureStore]",206],["val dyn = foo.asInstanceOf[js.Dynamic]",192],["f(props).asInstanceOf[ReactComponentU_]",171],["f(toJs, js.Array(children: _*)).asInstanceOf[ReactComponentU_]",165],["f(props, children.toJsArray).asInstanceOf[ReactComponentU_]",163]]},{"word":"assert","context":[["assert(",2592],["assert(caught1.failedCodeLineNumber === Some(thisLineNumber - 4))",1280],["assert(1 === 1)",1115],["assert(1 + 1 === 2)",1075],["assert(caught2.failedCodeLineNumber === Some(thisLineNumber - 4))",850],["assert(caught1.failedCodeFileName === Some(fileName))",810],["assert(caught3.failedCodeLineNumber === Some(thisLineNumber - 4))",792],["assert(caught4.failedCodeLineNumber === Some(thisLineNumber - 4))",726],["assert(actual === expected)",683],["assert(e.failedCodeFileName === (Some(fileName)))",581]]},{"word":"assertEquals","context":[["assertEquals(",800],["import org.junit.Assert.assertEquals",395],["assertEquals(rBytes(i), resBytes(i))",355],["assertEquals(errorThrown, DummyException(\"dummy\"))",257],["assertEquals(received, 1)",239],["assertEquals(f.value, None)",213],["assertEquals(received, 0)",181],["assertEquals(Errors.NONE.code, joinGroupErrorCode)",157],["assertEquals(result.toString, c)",144],["assertEquals(sum, (0 until 9999).sum)",130]]},{"word":"assertResult","context":[["assertResult(true) {",652],["assertResult(inst) {",313],["assertResult(",308],["assertResult(false) {",238],["assertResult(1) {",208],["assertResult(None) {",165],["assertResult(2) {",161],["assertResult(StatusCodes.OK) {",150],["assertResult(Set(",145],["assertResult(Set(EName(ns, \"root\"), EName(ns, \"child\"))) {",134]]},{"word":"ast","context":[["import slick.ast._",314],["import ast._",297],["import ast.Trees._",246],["import ast.tpd._",221],["import scala.slick.ast._",180],["package ast",173],["import djinni.ast._",163],["ast match {",155],["import com.twitter.scrooge.ast._",128],["stmt\"${(q.ast: Ast).token}\" mustEqual",123]]},{"word":"at","context":[["* which accompanies this distribution and is available at",1232],["* accompanies this distribution and is available at",1026],["* which accompanies this distribution, and is available at",935],["import at.logic.gapt.expr._",828],["* See the project homepage at: https://monix.io",820],["* See the project homepage at: http://www.monifu.org",633],["* For more information, please contact Digimead Team at this",540],["*  For further information, please contact Hanns Holger Rutz at",539],["Some(\"snapshots\" at nexus + \"content/repositories/snapshots\")",509],["* HCI Group at the University of Würzburg. The project is funded by the German",336]]},{"word":"atomic","context":[["import java.util.concurrent.atomic.AtomicInteger",2154],["import java.util.concurrent.atomic.AtomicBoolean",1277],["import java.util.concurrent.atomic.AtomicReference",1044],["import java.util.concurrent.atomic.AtomicLong",951],["import java.util.concurrent.atomic._",411],["atomic { implicit txn =>",261],["val oldBundle = atomic.get",224],["ListSet(atomic.get.testNamesList.toArray: _*)",130],["import com.cra.figaro.library.atomic.continuous._",115],["import java.util.concurrent.atomic.{AtomicBoolean, AtomicInteger}",95]]},{"word":"auth","context":[["val req = auth.request",200],["auth.authenticated = true",137],["auth.authorized = false",135],["import com.amazonaws.auth.BasicAWSCredentials",135],["* @param loginInfo The login info for which the auth info should be saved.",131],["import org.apache.kafka.common.security.auth.KafkaPrincipal",97],["import com.amazonaws.auth.AWSCredentialsProvider",96],["import io.megam.auth.funnel.FunnelErrors._",93],["* @param authInfoRepository The auth info repository implementation.",90],["import com.amazonaws.auth.AWSCredentials",88]]},{"word":"author","context":[["* @author Bill Venners",2968],["/** @author Stephen Samuel */",1861],["* @author Alexander Podkhalyuzin",1729],["* @author dlwh",1644],["* @author Miles Sabin",1419],["* @author Highcharts Config Generator by Karasiq",1311],["@author Andrew McCallum */",896],["* @author dramage",888],["/** @author  John Miller",886],["*  @author Philip Stutz",797]]},{"word":"available","context":[["* which accompanies this distribution and is available at",1232],["* accompanies this distribution and is available at",1026],["* which accompanies this distribution, and is available at",935],["*  (AGPL) version 3.0 which accompanies this distribution, and is available in",130],["it should \"be available\" in {",103],["*   <td>The series object. The series name is available",77],["*   <td>The point object. The point name, if defined, is available",77],["// wait a bit for produced message to be available",54],["// decompose to blocks (use vslice method if available)",51],["// Makes our SBT app settings available from within the app",47]]},{"word":"await","context":[["}.await",934],["latch.await()",267],["@SuppressWarnings(Array(\"all\")) // async/await",208],["w.await()",175],["await(server.close())",172],["await(",142],["import scala.async.Async.{async, await}",115],["assert(latch.await(5, TimeUnit.SECONDS), \"latch.await should have succeeded\")",106],["assert(latch.await(5, TimeUnit.SECONDS), \"latch.await should have succeeded\")",106],["}.await.totalHits shouldBe 1",92]]},{"word":"awt","context":[["import java.awt.Color",1084],["import java.awt.image.BufferedImage",761],["import java.awt.Dimension",356],["import java.awt._",326],["import java.awt.Graphics2D",292],["import java.awt.BorderLayout",226],["import java.awt.event._",205],["import java.awt.Font",199],["import java.awt.event.ActionEvent",177],["import java.awt.event.MouseEvent",177]]},{"word":"b","context":[["b",1157],["b = foo();",1091],["b match {",751],["<resource path=\"/a/b\">",525],["b.result()",518],["b.result",392],["assert(b.theTestThisCalled)",383],["require(b.length == a.length, \"Vectors must be the same length!\")",373],["for (j <- b.range2) {",373],["val bNumber = new BigDecimal(new BigInteger(b), bScale)",350]]},{"word":"bar","context":[["val sn1 = 23 :: 3.0 :: \"foo\" :: () :: \"bar\" :: true :: 5L :: HNil",117],["makeOffer(\"foohost\", Set(TextAttribute(\"foo\", \"bar\"), TextAttribute(\"rackid\", \"rack-1\"))),",116],["bar",103],["val ns = \"urn:foo:bar\"",96],["Await.result(client.set(\"foo\", Buf.Utf8(\"bar\")))",94],[".map { bar =>",92],["val origGroup = Group(PathId(\"/foo/bar\"), Set(app))",82],["val group = Group(PathId(\"/foo/bar\"), Set(app))",78],["(bar.id.get, bar.fooId.get, bar.bar.getAsString)",77],["Selector.Doc(BsonField.Name(\"bar\") ->",77]]},{"word":"base","context":[["base = file(\".\"),",796],["<resources base=\"https://test.api.openstack.com\">",786],["package base",511],["base =>",291],["import com.google.common.base.Charsets",273],["(base / \"config\" +++ base / \"src\" / \"test\" / \"resources\").get",263],["(base / \"config\" +++ base / \"src\" / \"test\" / \"resources\").get",263],["import org.jetbrains.plugins.scala.lang.psi.api.base.types.ScTypeElement",259],["import mesosphere.marathon.core.base.Clock",230],["import org.jetbrains.plugins.scala.lang.psi.api.base.patterns.ScBindingPattern",221]]},{"word":"be","context":[["e1.failedCodeLineNumber.get should be (thisLineNumber - 3)",3278],["actual should be (expected)",3093],["e1.failedCodeFileName.get should be (fileName)",1428],["e.failedCodeFileName should be (Some(fileName))",824],["e.message should be (",824],["e1.message should be (Some(\"'all' inspection failed, because: \\n\" +",610],["e2.failedCodeLineNumber.get should be (thisLineNumber - 3)",608],["case other => fail(\"Expected cause to be TestFailedException, but got: \" + other)",606],["tfe.getCause should be (null)",602],["tfe.failedCodeFileName should be (Some(\"InspectorShorthandsSpec.scala\"))",572]]},{"word":"because","context":[["e1.message should be (Some(\"'all' inspection failed, because: \\n\" +",610],["e2.message should be (Some(\"'all' inspection failed, because: \\n\" +",322],["e.message should be (Some(\"'all' inspection failed, because: \\n\" +",307],["\"'all' inspection failed, because: \\n\" +",199],["assert(repD.lastEvent.get.testName endsWith \"test that\") // last because should be in order of appearance",159],["* Throws <code>UnsupportedOperationException</code>, because this method is unused by this",128],["* because the \"name\" provided to a JUnit <code>org.junit.runner.Description</code> appears to usually include",86],["* the code of a pending test is executed just like any other test.) However, because the test completes abruptly",85],["// we don't implement our route structure directly in the service actor because",83],["* The suite class name parameter is optional, because suites in ScalaTest are an abstraction that",79]]},{"word":"been","context":[["* @throws DuplicateTestNameException if a test with the same name has been registered previously",350],["* @throws TestRegistrationClosedException if invoked after <code>run</code> has been invoked on this suite",350],["* for <code>testNames</code> for an example.) The resulting test name must not have been registered previously on",255],["describe(\"(when a nesting rule has been violated)\") {",145],["// has not been invalidated underneath (first call will always be",108],["* A <em>pending test</em> is one that has been given a name but is not yet implemented. The purpose of",91],["* Called after the zookeeper session has expired and a new session has been created. You would have to re-create",88],["* @throws NotAllowedException if <code>testName</code> had been registered previously",76],["* The documentation about this has not yet been written; please consider contributing!",60],["WaitTestSupport.waitUntil(\"a leader has been elected\", 30.seconds) { marathon.leader().code == 200 }",56]]},{"word":"before","context":[["before {",2286],["val before =",526],["doTextTest(before, after)",427],["before() {",336],["* the merging locally on each mapper before sending results to a reducer, similarly to a",113],["// scopeOpened should be invoked before the this method",113],["// scopeOpened should be invoked before the other method",113],["doTextTest(before)",77],["* out before tests are written to verify that behavior (and often, before the behavior of",70],["* out before tests are written to verify that behavior (and often, before the behavior of",70]]},{"word":"binary","context":[["* Redistribution and use in source and binary forms, with or without",3573],["import org.apache.commons.codec.binary.Base64",696],["Redistribution and use in source and binary forms, with or without",639],["* Redistribution and use in source and binary forms, with or without modification,",339],["import org.apache.commons.codec.binary.Hex",174],["2.  Redistributions in binary form must reproduce the above",163],["// Redistribution and use in source and binary forms, with or without",113],["* // in binary:   11110000",105],["// First, a binary search implementation, specialized to `Double`,",89],["* Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field",85]]},{"word":"bind","context":[["ref.bind() match {",193],["import javax.xml.bind.DatatypeConverter",167],["import org.springframework.web.bind.annotation._",99],["it should \"display any errors on unsuccessful bind\" in {",88],["def bind(key: String, data: Map[String, String]) = {",72],["bind[IDGenerator].toInstance(new SecureRandomIDGenerator())",67],["bind",65],["import org.springframework.web.bind.annotation.RequestMapping",65],["bind[EventBus].toInstance(EventBus())",64],["bind[CacheLayer].to[PlayCacheLayer]",63]]},{"word":"block","context":[["block",814],["import net.minecraft.block.Block",563],["import net.minecraft.block.material.Material",272],["block {",212],["import scorex.block.Block",142],["val result = block",114],["import net.minecraft.block.state.IBlockState",96],["block\"\"\"",92],["//END SNIPPET: block",81],["//START SNIPPET: block",80]]},{"word":"body","context":[["</body>",994],["<body>",948],["body",877],["implicit val req = ctx.body",314],["body match {",252],["lazy val doc = Jsoup.parse(view.body)",231],["def apply(body: Any = Unit, headers: Map[String, String] = Map.empty, reason: String = \"\") =",180],["it(\"should generate a TestPending message when the test body is (pending)\") {",177],["try body",154],["* @tparam B The type of the request body.",153]]},{"word":"border","context":[["* <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: center\">",792],["* <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: center\">",792],["* <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: right\">",420],["* <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: right\">",420],["* <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: left\">",284],["* <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: left\">",284],["*   <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: left\">",169],["*   <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: right\">",169],["*   <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: left\">",169],["*   <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: right\">",169]]},{"word":"breeze","context":[["import breeze.linalg._",1279],["import breeze.linalg.DenseVector",752],["import breeze.numerics._",485],["package breeze.linalg",416],["import breeze.linalg.DenseMatrix",369],["import breeze.generic.UFunc",206],["import breeze.macros.expand",157],["import breeze.linalg.{DenseMatrix, DenseVector}",151],["import breeze.math._",144],["package breeze.stats.distributions",140]]},{"word":"broker","context":[["// send some messages to each broker",195],["props.put(\"metadata.broker.list\", brokerList)",117],["Try(broker.shutdown())",95],["// create topic with 1 partition, 2 replicas, one on each broker",84],["case Some(broker) =>",68],["prevController = broker",63],["throw new NotLeaderForPartitionException(\"Leader not local for partition [%s,%d] on broker %d\"",58],["props.put(\"metadata.broker.list\", TestUtils.getBrokerListStrFromConfigs(configs))",54],["throw new IllegalStateException(\"Controller to broker state change requests batch is not empty while creating a \" +",53],["* Represents the lifecycle of a single Kafka broker. Handles all functionality required",49]]},{"word":"buf","context":[["buf",604],["buf.toString",372],["val buf = new StringBuilder",363],["buf(\"\")",244],["buf += 99 // Mutate to make sure no other test sees this",240],["buf.append(\",\")",240],["buf.toList",205],["buf(\"  \")",182],["def decode(buf: BitVector) = {",118],["buf.size must_== 1",107]]},{"word":"buffer","context":[["buffer",828],["import org.jboss.netty.buffer.ChannelBuffer",606],["buffer.onComplete()",444],["import io.netty.buffer.ByteBuf",429],["import org.jboss.netty.buffer.ChannelBuffers",394],["buffer.rewind()",366],["buffer.clear()",337],["*       assert(buffer.isEmpty)",319],["import org.jboss.netty.buffer.{ChannelBuffer, ChannelBuffers}",318],["(0 until 9999).foreach(x => buffer.onNext(x))",260]]},{"word":"build","context":[[".build()",5037],[".build",3568],[".build())",639],["builder.build()",376],["builder.build",237],[".build(service)",205],["build",188],["//This class was generated by build script, please don't change this",186],["override def build(source: XContentBuilder): Unit = {",170],["}).build",164]]},{"word":"builder","context":[["builder.getTokenType match {",1216],["builder.result()",783],["builder",710],["builder.advanceLexer()",521],["val builder = new StringBuilder",453],["import org.jetbrains.plugins.scala.lang.parser.parsing.builder.ScalaPsiBuilder",439],["builder.toString",381],["builder.build()",376],["def parse(builder: ScalaPsiBuilder): Boolean = {",357],["val _builder = builder",353]]},{"word":"but","context":[["case other => fail(\"Expected cause to be TestFailedException, but got: \" + other)",606],["// SlowAsMolasses is included. both tests should be included but one ignored",225],["* @throws IllegalArgumentException if <code>testName</code> is defined, but no test with the specified test name",151],["* to <code>ignore</code> without deleting or commenting out the actual test code. The test will not be executed, but a",128],["* if the code is anything but DONTCARE_EXIT, assert the code is as expected",120],["// Shouldn't be called, but just in case don't invoke a OneArgTest",102],["// This is safer, but we lose the error information as it returns",102],["// this actor only runs our route, but you could add",92],["* A <em>pending test</em> is one that has been given a name but is not yet implemented. The purpose of",91],["* @return true, but false when elided",89]]},{"word":"by","context":[["* supplementary functions or services in addition to those offered by",1872],["* @author Highcharts Config Generator by Karasiq",1311],["* This instance is immutable and unaffected by this method call.",998],["* Created by IntelliJ IDEA.",753],["*  @param u  the vector to multiply by",407],["* HCI Group at the University of Würzburg. The project is funded by the German",336],["* @param formatter an optional formatter that provides extra information that can be used by reporters in determining",336],["* / /_/ / /_/ /  __/ / / / /_/ / / / /_/ /_/ / /       contributed by tegonal *",275],["*  @param x  the scalar to divide by",242],["*  by performing Gauss-Jordan reduction and extracting the negation of the",242]]},{"word":"bytes","context":[["bytes",708],["val bytes = new Array[Byte](CAPACITY)",200],["val wrapped = ChannelBuffers.wrappedBuffer(bytes)",180],["val bcb = new BufChannelBuffer(Buf.ByteArray.Owned(bytes))",168],["* @param bytes",126],["out.write(bytes)",123],["val bytes = new Array[Byte](length)",119],["buffer.get(bytes)",105],["val in = new ByteArrayInputStream(bytes)",94],["bytes.rewind()",89]]},{"word":"c","context":[["c",5888],["import c.universe._",4608],["c += 1",1075],["var c = 0",1033],["test.c: In function 'main':",906],["**    / __/ __// _ | / /  / _ | __ / // __/  (c) 2013, LAMP/EPFL        **",756],["DB.withConnection { implicit c =>",720],["c match {",643],["<resource path=\"/c\">",455],["assert(c.theTestThisCalled)",383]]},{"word":"cache","context":[["}.cache()",389],[".cache()",242],["import play.api.cache.Cache",208],["cache",145],["cache.clear()",121],["import play.api.cache.CacheApi",111],["// Memoized request function first checks to make sure the cache",108],[".check(headerRegex(\"Cache-Control\", \"no-cache\")))",105],[".cache",99],["import com.google.common.cache.{CacheBuilder, CacheLoader}",96]]},{"word":"call","context":[["* This instance is immutable and unaffected by this method call.",998],["call {",586],["case call: ScMethodCall =>",141],["* methods. This method exists to make it easy to ignore an existing test by changing the call to <code>it</code>",124],["// call web hook",112],["// has not been invalidated underneath (first call will always be",108],[".call",92],["//Show the spinny image when an Ajax call starts",86],["*  It can be used to solve 'a * x = b': augment 'a' with 'b' and call reduce.",78],["*     try super.afterEach() // To be stackable, must call super.afterEach",72]]},{"word":"called","context":[["it(\"should execute all tests when run is called with testName None\") {",193],["it(\"should execute one test when run is called with a defined testName\") {",193],["var called = false",157],["called = true",141],["* print to the standard output. This method can be called safely by any thread.",132],["* This method can be called safely by any thread.",132],["* throw an exception. This method can be called safely by any thread.",131],["// Shouldn't be called, but just in case don't invoke a OneArgTest",102],["// This must be called by the event handler thread",90],["* @param msg  the message object. `toString()` is called to convert it",80]]},{"word":"can","context":[["import spray.can.Http",1147],["* @param ordinal an <code>Ordinal</code> that can be used to place this event in order in the context of",520],["* @param formatter an optional formatter that provides extra information that can be used by reporters in determining",336],["* You can mock out a whole application including requests, plugins etc.",261],["// Set a known test id so we can validate the unique property is added",162],["// These are meant to be typed into the REPL. You can also run",150],["* This method can be called safely by any thread.",132],["* print to the standard output. This method can be called safely by any thread.",132],["* throw an exception. This method can be called safely by any thread.",131],["* @param configMap a <code>Map</code> of key-value pairs that can be used by the executing <code>Suite</code> of tests.",117]]},{"word":"case","context":[["case _ =>",58102],["case None =>",22089],["case _ => None",19486],["case _ => false",19294],["case e: Exception =>",5480],["case _ => {",4988],["case e: Exception => {",3905],["case None => None",3773],["case e: Throwable =>",3671],["case None => {",3313]]},{"word":"catch","context":[["} catch {",54067],["catch {",12830],["}catch{",557],["}catch {",541],["catch{",287],["catch",256],["catch { case e: Exception => Left(e) }",157],["catch { case _: Exception => fail(\"it shouldn't trown an exception\") }",140],["//    } catch {",120],["} catch{",96]]},{"word":"caught1","context":[["val caught1 = intercept[TestFailedException] {",6788],["assert(caught1.failedCodeLineNumber === Some(thisLineNumber - 4))",1280],["assert(caught1.failedCodeFileName === Some(fileName))",810],["assert(caught1.getMessage === \"lengthy had length 2, and lengthy had length 2\")",122],["assert(caught1.getMessage.startsWith(\"Map(\"))",120],["assert(caught1.getMessage === \"sizey had size 2, and sizey had size 2\")",108],["assert(caught1.failedCodeFileName === Some(\"ShouldBeShorthandForAllSpec.scala\"))",71],["assert(caught1.getMessage === \"lengthy did not have length 3\")",66],["assert(caught1.getMessage === \"lengthy did not have length 5\")",66],["assert(caught1.getMessage === \"lengthy did not have length -2\")",66]]},{"word":"caught2","context":[["val caught2 = intercept[TestFailedException] {",5192],["assert(caught2.failedCodeLineNumber === Some(thisLineNumber - 4))",850],["assert(caught2.failedCodeFileName === Some(fileName))",456],["val caught2 = intercept[NullPointerException] {",138],["assert(caught2.getMessage === \"a test tag was null\")",137],["assert(caught2.getMessage === \"lengthy had length 2, and lengthy had length 2\")",122],["assert(caught2.getMessage === \"sizey had size 2, and sizey had size 2\")",108],["assert(caught2.getMessage === \"lengthy did not have length 5\")",66],["assert(caught2.getMessage === \"lengthy did not have length 55, and lengthy did not have length 22\")",66],["assert(caught2.getMessage === \"lengthy did not have length 3, but lengthy had length 2\")",66]]},{"word":"caught3","context":[["val caught3 = intercept[TestFailedException] {",4858],["assert(caught3.failedCodeLineNumber === Some(thisLineNumber - 4))",792],["assert(caught3.failedCodeFileName === Some(fileName))",444],["assert(caught3.getMessage === \"lengthy had length 2, and lengthy had length 2\")",122],["assert(caught3.getMessage === \"sizey had size 2, and sizey had size 2\")",108],["assert(caught3.getMessage === \"lengthy did not have length 5\")",66],["assert(caught3.getMessage === \"lengthy did not have length 3, but lengthy had length 2\")",66],["assert(caught3.getMessage === \"lengthy did not have length 55, and lengthy did not have length 22\")",66],["assert(caught3.getMessage === \"sizey did not have size 5\")",60],["assert(caught3.getMessage === \"sizey did not have size 3, but sizey had size 2\")",60]]},{"word":"cause","context":[["case other => fail(\"Expected cause to be TestFailedException, but got: \" + other)",606],["assert(e.cause.isDefined)",211],["val causeThrowable = e.cause.get",211],["cause match {",123],["assert(cause.failedCodeLineNumber.get == thisLineNumber - 15)",80],["if (cause == null)",79],["override def exceptionCaught(ctx: ChannelHandlerContext, cause: Throwable): Unit = {",77],["val cause = causeThrowable.asInstanceOf[DuplicateTestNameException]",76],["cause: Option[Throwable],",72],["val cause = e.getCause",56]]},{"word":"cc","context":[["val cc = new ComponentCollection",595],["val c2 = cc(e2)",386],["val c1 = cc(e1)",354],["import cc.factorie._",346],["val c3 = cc(e3)",338],["val pr = new Problem(cc)",327],["import cc.factorie.variable._",256],["val c4 = cc(e4)",224],["import cc.factorie.app.nlp._",215],["import cc.factorie.la._",204]]},{"word":"cfg","context":[["(h: Heap, ctx: Context, cfg: CFG, fun: String, args: CFGExpr, fid: FunctionId) => {",501],["(h: Heap, ctx: Context, cfg: CFG, fun: String, args: CFGExpr) => {",485],["val addr1 = cfg.getAPIAddress(addr_env, 0)",482],["val PureLocalLoc = cfg.getPureLocal(cp)",438],["val addr2 = cfg.getAPIAddress(addr_env, 1)",200],["val cfg = KafkaConfig.fromProps(props)",172],["cfg",172],["override def getInstance(cfg: CFG): Option[Loc] = Some(newRecentLoc())",149],["import kr.ac.kaist.jsaf.analysis.cfg.CFG",129],["import kr.ac.kaist.jsaf.analysis.cfg._",124]]},{"word":"ch","context":[["import ch.usi.inf.l3.sana",361],["putChar(ch)",319],["import ch.qos.logback.classic.{Level, LoggerContext}",297],["* \\____/ .___/\\___/_/ /_/\\____/_/_/\\__/\\____/_/        http://openolitor.ch   *",275],["ch match {",194],["import ch.qos.logback.classic.spi.ILoggingEvent",128],["ch",119],["import ch.qos.logback.classic.Level",113],["import ch.openolitor.core.models._",79],["import ch.openolitor.stammdaten.models._",76]]},{"word":"chain","context":[["val chain = for {",727],["chain.successful {",412],["beWorkflow(chain(",334],["beWorkflow(chain[Workflow](",297],["header.checkStep (req2, response, chain, 1)",266],["header.checkStep (req1, response, chain, 0)",266],["validator.validate(req, response, chain)",190],["\"X-TESTO\"->List(\"boo\"))),response,chain)",166],["chain(",151],["),response,chain), 400)",150]]},{"word":"change","context":[["* To change this template use File | Settings | File Templates.",967],["//This class was generated by build script, please don't change this",186],["// Will try and implement that tomorrow. Subtypes will be able to change the order.",159],["change match {",129],["* To change this template file, choose Tools | Templates",118],["* To change this template, choose Tools | Template Manager",113],["* To change this template, choose Tools | Templates",93],["\"controller was elected with epoch %d. Aborting state change by this controller\".format(controllerEpoch))",70],["* @param force if the change has to be forced. A running upgrade process will be halted and the new one is started.",64],["</change>",60]]},{"word":"channel","context":[["import org.jboss.netty.channel._",480],["channel.disconnect()",239],["channel.close()",237],["import io.netty.channel._",230],["import io.netty.channel.nio.NioEventLoopGroup",165],["import io.netty.channel.socket.SocketChannel",161],["import io.netty.channel.ChannelHandlerContext",144],["if (channel != null) {",138],["channel = null",137],["import io.netty.channel.ChannelHandler.Sharable",132]]},{"word":"charset","context":[["import java.nio.charset.Charset",1952],["import java.nio.charset.StandardCharsets",1071],["import java.nio.charset.StandardCharsets.UTF_8",253],["import java.nio.charset._",116],["charset: Option[String] = None,",113],["header(\"Content-Type\") should equal(\"application/json; charset=utf-8\")",94],["import java.nio.charset.{Charset, StandardCharsets}",82],["<representation mediaType=\"text/plain;charset=UTF8\"/>",75],["header(\"Content-Type\") should equal(\"application/xml; charset=utf-8\")",74],["import java.nio.charset.CodingErrorAction",58]]},{"word":"check","context":[["check {",1185],["check(",733],[".check(status.is(200)))",656],[".check(status.is(200))",569],["bets.check",455],[".check(status.is(201))",390],[".check(headerRegex(\"Set-Cookie\", \"CSRF-TOKEN=(.*); [P,p]ath=/\").saveAs(\"csrf_token\")))",353],["// check",289],[".check(",283],[".check(status.is(401))",199]]},{"word":"checkAnswer","context":[["checkAnswer(",6628],["checkAnswer(sql(",84],["checkAnswer(TestHbase.sql(\"select * from testblk\"),",20],["checkAnswer(df, Seq(expectedAnswer))",13],["def checkAnswer(df: DataFrame, expectedAnswer: Seq[Row]): Option[String] = {",12],["checkAnswer(df, expectedAnswer.collect())",12],["def checkAnswer(df: DataFrame, expectedAnswer: java.util.List[Row]): String = {",11]]},{"word":"checker","context":[["assert (checker, \"count(/chk:checker/chk:step[@type='METHOD' and @match='POST']) = 2\")",287],["assert (checker, \"count(/chk:checker/chk:step[@type='METHOD' and @match='POST']) = 2\")",287],["assert (checker, \"count(/chk:checker/chk:step[@type='METHOD' and @match='GET']) = 1\")",283],["assert (checker, \"count(/chk:checker/chk:step[@type='METHOD' and @match='GET']) = 1\")",283],["assert (checker, \"count(/chk:checker/chk:step[@type='REQ_TYPE_FAIL' and @notMatch='(?i)(application/xml)(;.*)?']) = 1\")",281],["assert (checker, \"count(/chk:checker/chk:step[@type='METHOD' and @match='PUT']) = 1\")",281],["assert (checker, \"count(/chk:checker/chk:step[@type='REQ_TYPE_FAIL' and @notMatch='(?i)(application/xml)(;.*)?']) = 1\")",281],["assert (checker, \"count(/chk:checker/chk:step[@type='METHOD' and @match='PUT']) = 1\")",281],["assert (checker, \"count(/chk:checker/chk:step[@type='WELL_XML']) = 2\")",182],["assert (checker, \"count(/chk:checker/chk:step[@type='WELL_XML']) = 2\")",182]]},{"word":"children","context":[["children = Vector(",739],["children = Nil,",620],["def apply(children: ReactNode*) = {",208],["} children(",208],["extraAttributes: U[js.Object] = undefined)(children: ReactNode*)  = {",194],["f(toJs, js.Array(children: _*)).asInstanceOf[ReactComponentU_]",165],["def apply(children: TagMod*): ReactComponentU_ = {",164],["f(props, children.toJsArray).asInstanceOf[ReactComponentU_]",163],["for (child <- children) {",119],["@exclude extraAttributes: U[js.Object] = undefined)(children: ReactNode*) : ReactElement  = {",97]]},{"word":"chk","context":[["assert (checker, \"count(/chk:checker/chk:step[@type='METHOD' and @match='POST']) = 2\")",287],["assert (checker, \"count(/chk:checker/chk:step[@type='METHOD' and @match='POST']) = 2\")",287],["assert (checker, \"count(/chk:checker/chk:step[@type='METHOD' and @match='GET']) = 1\")",283],["assert (checker, \"count(/chk:checker/chk:step[@type='METHOD' and @match='GET']) = 1\")",283],["assert (checker, \"count(/chk:checker/chk:step[@type='METHOD' and @match='PUT']) = 1\")",281],["assert (checker, \"count(/chk:checker/chk:step[@type='METHOD' and @match='PUT']) = 1\")",281],["assert (checker, \"count(/chk:checker/chk:step[@type='REQ_TYPE_FAIL' and @notMatch='(?i)(application/xml)(;.*)?']) = 1\")",281],["assert (checker, \"count(/chk:checker/chk:step[@type='REQ_TYPE_FAIL' and @notMatch='(?i)(application/xml)(;.*)?']) = 1\")",281],["assert (checker, \"count(/chk:checker/chk:step[@type='WELL_XML']) = 2\")",182],["assert (checker, \"count(/chk:checker/chk:step[@type='WELL_XML']) = 2\")",182]]},{"word":"class","context":[["* <pre class=\"stHighlight\">",15662],["* <pre class=\"stREPL\">",1661],["class A {",1230],["class TestSpec extends WordSpec {",733],["class MyReporter extends Reporter {",553],["class Foo {",543],["|class A {",486],["class Test {",371],["class Fixture {",362],["class A",350]]},{"word":"classOf","context":[["@RunWith(classOf[JUnitRunner])",11522],["@throws(classOf[IOException])",1799],["@throws(classOf[Exception])",1579],[".ofType(classOf[String])",1561],[".ofType(classOf[java.lang.Integer])",1023],["classOf[String],",794],["classOf[Integer],",735],["@throws(classOf[InterruptedException])",610],["@throws(classOf[TimeoutException])",332],["@scala.throws[Exception](classOf[Exception])",306]]},{"word":"clazz","context":[["clazz match {",598],["case clazz: PsiClass =>",119],["case Some(clazz) =>",114],["val MetaDataItem(qualified, nullable, clazz) = meta",96],["case clazz: ScClass =>",86],["clazz",74],["case Some((clazz, subst)) =>",69],["if (!isInheritor(clazz, fqn)) return None",63],["if (clazz != null) {",57],["findChildrenByClass[T](clazz)",45]]},{"word":"clear","context":[["def clear() {",513],["clear()",450],["buffer.clear()",337],["def clear(): Unit = {",266],["out.clear",200],["em.clear()",164],["override def clear() {",125],["buffer.clear",123],["def clear() = {",121],["cache.clear()",121]]},{"word":"client","context":[["client.close()",1201],["client.execute {",859],["withRedisClient { client =>",662],["import spray.client.pipelining._",566],["client",446],["client =>",438],["val resp = client.execute {",360],["import org.elasticsearch.client.Client",343],["implicit client =>",337],["import net.minecraft.client.Minecraft",334]]},{"word":"close","context":[["writer.close()",1976],["out.close()",1403],["client.close()",1201],["def close() {",1051],["in.close()",843],["close()",758],["producer.close()",752],["reader.close()",688],["stream.close()",541],["server.close()",534]]},{"word":"cls","context":[["cls",116],["if (cls ne null) ctx.append(\" class=\\\"\"+h(cls)+\"\\\"\")",106],["if (cls ne null) ctx.append(\" class=\\\"\"+h(cls)+\"\\\"\")",106],["case New(cls, ctor, args) =>",91],["case AsInstanceOf(expr, cls) =>",80],["case IsInstanceOf(expr, cls) =>",68],["case StoreModule(cls, value) =>",67],["case ApplyStatic(cls, method, args) =>",64],["case ApplyStatically(receiver, cls, method, args) =>",64],["mixType(cls)",62]]},{"word":"cluster","context":[["import akka.cluster.Cluster",411],["import kafka.cluster.Broker",315],["// create my cluster client solely based on a zk client and a path",258],["Await.result(mycluster1.ready) // give it sometime for the cluster to get the initial set of memberships",187],["Await.result(mycluster2.ready) // give it sometime for the cluster to get the initial set of memberships",187],["import akka.cluster.ClusterEvent._",137],["val cluster = Cluster(context.system)",129],["cluster.close()",114],["freshRack, // list of tasks register in the cluster",111],["package spark.scheduler.cluster",93]]},{"word":"cmd","context":[["executor = \"//cmd\",",276],["cmd match {",173],["cmd = Some(\"foo\"),",161],["cmd = Some(\"cmd\"),",110],["cmd = Some(\"cmd\"),",110],["if (BuildConfig.DEBUG) Log.d(TAG, cmd.mkString(\" \"))",105],["cmd = Some(\"true\"),",104],["Full(() => LiftRules.jsArtifacts.show(\"ajax-loader\").cmd)",98],["Full(() => LiftRules.jsArtifacts.hide(\"ajax-loader\").cmd)",98],["val cmd = new ArrayBuffer[String]",77]]},{"word":"code","context":[["val code =",1046],["* This method enables the following syntax given a <code>MatcherFactory$arity$</code>:",668],["* This method enables the following syntax given a <code>MatcherFactory$arity$</code>:",668],["* disclosing the source code of your own applications.",540],["* The interactive user interfaces in modified source and object code versions",539],["compileCodeSnippet(code)",525],["* @param ordinal an <code>Ordinal</code> that can be used to place this event in order in the context of",520],["* @param ordinal an <code>Ordinal</code> that can be used to place this event in order in the context of",520],["val code = \"\"\"",462],["* in the main documentation for trait <code>FlatSpec</code>.",405]]},{"word":"codec","context":[["import org.apache.commons.codec.binary.Base64",696],[".clientBuilder(ClientBuilder().hostConnectionLimit(1).codec(Memcached()).failFast(false))",480],["import org.jboss.netty.handler.codec.http._",433],["import org.apache.commons.codec.digest.DigestUtils",194],["import org.apache.commons.codec.binary.Hex",174],[".codec(Http())",173],[".codec(codec)",158],[".codec(codec)",158],["package com.twitter.finagle.http.codec",134],["def codec[Req1, Rep1](",132]]},{"word":"col","context":[["val col = colFun(Set(1, 2, 3))",518],["\"in \" + decorateToStringValue(col)))",306],["\"val col = \" + col + \"\\n\" +",292],["\"val col = \" + col + \"\\n\" +",292],["col += 1",261],["var col = 0",235],["\"in \" + col))",211],["\"in \" + decorateToStringValue(prettifier, col)))",160],["val itr = col.toIterator",125],["*  @param col  the column to set",122]]},{"word":"collect","context":[[".collect()",1150],["val result2 = result collect {",571],["}.collect()",253],[".collect {",215],["}.collect.toSeq.sortBy(_._1)",215],["val result = someCass.collect",213],[".collect",196],["import com.google.common.collect.Lists",165],["val leftSide = source.collect",146],["}.collect {",145]]},{"word":"collection","context":[["import scala.collection.JavaConversions._",15808],["import scala.collection.JavaConverters._",13821],["import scala.collection.mutable",12078],["import scala.collection.mutable.ArrayBuffer",7092],["import scala.collection.mutable.ListBuffer",4804],["import scala.collection.mutable.HashMap",2382],["import scala.collection._",2144],["import collection.JavaConversions._",1806],["import scala.collection.immutable.Seq",1718],["import scala.collection.immutable",1689]]},{"word":"color","context":[["val colorOuter: js.UndefOr[String | js.Object] = color",300],["override val color: js.UndefOr[String | js.Object] = colorOuter",300],["val color: js.UndefOr[String | js.Object] = js.undefined",300],["* The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.",192],["* The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.",192],["color: Color,",136],["* @param fillColor The fill color of the point marker. When <code>null</code>, the series' or point's color is used.",131],["* @param fillColor The fill color of the point marker. When <code>null</code>, the series' or point's color is used.",131],["* The fill color of the point marker. When <code>null</code>, the series' or point's color is used.",131],["* The fill color of the point marker. When <code>null</code>, the series' or point's color is used.",131]]},{"word":"column","context":[["def id = column[Int](\"id\", O.PrimaryKey, O.AutoInc)",365],["def name = column[String](\"name\")",363],["def id = column[Int](\"id\")",354],["*  @param jr  the column range",349],["def id = column[Long](\"id\", O.PrimaryKey, O.AutoInc)",286],["*  @param j  the column index",275],["def id = column[Int](\"id\", O.PrimaryKey)",215],["*  last column augmented by 1.",190],["def a = column[Int](\"a\")",158],["def title = column[String](\"title\")",144]]},{"word":"com","context":[["import com.typesafe.config.ConfigFactory",4975],["import com.typesafe.config.Config",3441],["import com.twitter.conversions.time._",2236],["import com.intellij.openapi.project.Project",1985],["import com.twitter.util.Future",1912],["* Network Engine for Objects in Lund AB [http://neotechnology.com]",1841],["import com.typesafe.scalalogging.LazyLogging",1793],["import com.intellij.psi._",1694],["import com.highcharts.HighchartsUtils._",1316],["import com.highcharts.CleanJsObject",1312]]},{"word":"command","context":[["command match {",273],["|  command {",238],["val command =",156],["* @param expectedExitCode (optional) the expected exit code for the command",120],["command.getType match {",98],["import com.intellij.openapi.command.CommandProcessor",97],["* @param callback The command result callback",88],["command.getEnvironment.getVariablesList.asScala.toList.map(v => v.getName -> v.getValue).toMap",84],["* Invoked when some partitions are reassigned by the admin command",74],["* Companion object that does initialization of the command.",70]]},{"word":"common","context":[["import common._",2095],["import net.liftweb.common._",1874],["package common",665],["import kafka.common.TopicAndPartition",606],["import com.google.common.io.Files",554],["import kafka.common._",484],["import net.liftweb.common.Box",426],["import net.liftweb.common.Loggable",406],["import _root_.net.liftweb.common._",405],["import net.liftweb.common.Full",361]]},{"word":"commons","context":[["import org.apache.commons.io.FileUtils",1486],["import org.apache.commons.io.IOUtils",873],["import org.apache.commons.codec.binary.Base64",696],["import org.apache.commons.lang3.StringUtils",508],["import org.beangle.commons.lang.Strings",357],["import org.beangle.commons.collection.Collections",353],["import com.mongodb.casbah.commons.MongoDBObject",266],["package com.avsystem.commons",259],["import org.apache.commons.lang.StringUtils",215],["import org.apache.commons.logging.LogFactory",201]]},{"word":"compiler","context":[["import org.neo4j.cypher.internal.compiler.v2_3._",376],["import org.neo4j.cypher.internal.compiler.v2_3.test_helpers.CypherFunSuite",348],["compiler.scapegoat.feedback.warnings.size shouldBe 0",268],["package compiler",247],["/* NSC -- new Scala compiler",184],["import org.neo4j.cypher.internal.compiler.v2_3.symbols._",178],["package com.asakusafw.spark.compiler",174],["compiler.scapegoat.feedback.warnings.size shouldBe 1",172],["package jgo.tools.compiler",129],["* The main purpose of this method implementation is to render a compiler error an attempt",128]]},{"word":"complete","context":[["complete {",2727],["* underlying futures complete. It fails immediately if any of them",396],["val (activeLookup, _) = complete(1, CompletionType.BASIC)",301],["val (activeLookup, _) = complete(1, CompletionType.SMART)",116],["import complete.DefaultParsers._",116],["promise.complete(Success(succeed))",113],["def complete(denot: SymDenotation)(implicit ctx: Context): Unit = {",105],["complete(",103],["case Failure(ex) => complete(InternalServerError, s\"An error occurred: ${ex.getMessage}\")",103],["val complete = new CountDownLatch(1)",96]]},{"word":"concurrent","context":[["import scala.concurrent.duration._",18263],["import scala.concurrent.Future",15060],["import scala.concurrent.ExecutionContext.Implicits.global",8774],["import java.util.concurrent.TimeUnit",4323],["import scala.concurrent.Await",4064],["import scala.concurrent.duration.Duration",3344],["import scala.concurrent.ExecutionContext",3290],["import scala.concurrent._",2924],["import scala.concurrent.{ExecutionContext, Future}",2561],["import java.util.concurrent.atomic.AtomicInteger",2154]]},{"word":"conf","context":[["import org.apache.hadoop.conf.Configuration",2106],["val sc = new SparkContext(conf)",2072],["val conf = new SparkConf()",1023],["conf",327],["sc = new SparkContext(conf)",302],["import org.apache.hadoop.hive.conf.HiveConf",230],["val conf = new Configuration()",212],["p.println(conf)",169],["val conf = new SparkConf",162],["conf: SparkConf,",162]]},{"word":"config","context":[["import com.typesafe.config.ConfigFactory",4975],["import com.typesafe.config.Config",3441],["import com.typesafe.config.{Config, ConfigFactory}",779],["package com.highcharts.config",679],["import com.typesafe.config._",633],["config,",580],["config",551],["val config = ConfigFactory.load()",526],["config: Config,",484],["package com.highstock.config",468]]},{"word":"configuration","context":[["* @param configuration The Play configuration.",312],["* @param configuration The Play configuration.",312],["configuration: Configuration,",157],["/** ********* Offset management configuration ***********/",156],["/** ********* Replication configuration ***********/",156],["/** ********* Controlled shutdown configuration ***********/",156],["* val configuration = Configuration.load()",149],["import com.signalcollect.configuration.ExecutionMode",122],["/** ********* Consumer coordinator configuration ***********/",102],["* of client application activation, with optional configuration parameters",97]]},{"word":"conn","context":[["conn.withSessionDo { session =>",790],["conn.close()",488],["conn.commit()",250],["implicit conn =>",146],["conn",138],["val stmt = conn.createStatement()",125],["conn =>",122],["conn.setAutoCommit(false)",106],["conn.setDoOutput(true)",95],["conn,",94]]},{"word":"connection","context":[["DB.withConnection { implicit connection =>",656],["connection.close()",389],[".connection(\"keep-alive\")",328],["connection expectMsg readEvents(0)",222],["implicit connection =>",161],["connection",152],["connection =>",109],["connection expectMsg subscribeTo",108],["val connection = sender()",100],["backend.connection.setAutoCommit(false)",100]]},{"word":"constructor","context":[["} // constructor",406],["* <code>apply</code> method to the current reporter. If invoked in a constructor, it",383],["/* constructor or object*/",197],["// 4) constructor and deconstructor",196],["// 6) smart constructor and deconstructor",196],["* @constructor",180],["/* constructor */",175],["} // primary constructor",107],["case object Nil extends List[Nothing] // A `List` data constructor representing the empty list",100],["* The <code>run</code> method takes a <code>Filter</code>, whose constructor takes an optional",61]]},{"word":"consumer","context":[["package kafka.consumer",289],["import kafka.consumer.SimpleConsumer",261],["consumer.close()",201],["import kafka.consumer._",190],["import kafka.consumer.ConsumerConfig",185],["// create a consumer",126],["consumer",98],["val response = consumer.fetch(request)",98],["import org.apache.kafka.clients.consumer.ConsumerConfig",93],["import org.apache.kafka.clients.consumer.KafkaConsumer",76]]},{"word":"contain","context":[["def `should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value` {",1302],["it(\"should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value\") {",659],["it(\"should allow RHS to contain duplicated value\") {",270],["\"should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value\" in {",176],["features must contain(\"bill\", \"bob\", \"charles\")",125],["it(\"should do nothing when RHS contain duplicated value\") {",114],["features must contain(\"alice\", \"bill\")",102],["* resulting RDD will either contain all pairs (k, (Some(v), w)) for v in `this`, or the",96],["* resulting RDD will either contain all pairs (k, (v, Some(w))) for w in `other`, or the",96],["features must contain(\"bill\", \"bob\")",93]]},{"word":"contains","context":[["// Funnel the data through the parent pipeline that contains data to",120],["* contains nested suites, the result of invoking <code>toString</code> on each",98],["* For each key k in `this` or `other1` or `other2`, return a resulting RDD that contains a",96],["* For each key k in `this` or `other`, return a resulting RDD that contains a tuple with the",96],["* its `contains` predicate.",90],["* Indicates whether a set contains a given element.",89],["\"Response Code is allowed\" |: (possibleResponseTypes.contains(expectedCode) ?= true),",88],["val xs = for (i <- -bound to bound if contains(s, i)) yield i",88],["s\"Contains error: $m in ${contentAsString(path)}\" |:(contentAsString(path).contains(m) ?= true)",88],["def contains(s: Set, elem: Int): Boolean = s(elem)",87]]},{"word":"content","context":[["import android.content.Context",955],["Some(\"snapshots\" at nexus + \"content/repositories/snapshots\")",509],["import android.content.Intent",423],["val content =",290],["content",249],["content: String,",236],["import android.content.{Context, Intent}",164],["import android.content._",161],["content,",123],["import android.content.DialogInterface",122]]},{"word":"context","context":[["context.stop(self)",2351],["import context.dispatcher",2066],["import context._",846],["context stop self",636],["* @param ordinal an <code>Ordinal</code> that can be used to place this event in order in the context of",520],["def actorRefFactory = context",380],["context",372],["import context.system",335],["implicit val ec = context.dispatcher",317],["implicit val system = context.system",312]]},{"word":"control","context":[["import scala.util.control.NonFatal",3207],["import scala.util.control.Breaks._",662],["import scala.util.control.Exception._",439],["import scala.util.control.NoStackTrace",346],["import scala.util.control.ControlThrowable",171],["import scala.util.control.Exception.allCatch",169],["package org.orbeon.oxf.xforms.control.controls",127],["import scala.util.control.Breaks",124],["package org.orbeon.oxf.xforms.control",112],["import scala.util.control.Exception.catching",108]]},{"word":"controller","context":[["package controller",186],["package skinny.controller.feature",162],["import io.prediction.controller.Params",159],["val controllerContext = controller.controllerContext",157],["package gitbucket.core.controller",157],["package skinny.controller",140],["package kafka.controller",138],["import kafka.controller.KafkaController",133],["import org.apache.predictionio.controller.Params",117],["import uk.gov.hmrc.play.frontend.controller.FrontendController",115]]},{"word":"controllers","context":[["package controllers",6274],["import controllers._",537],["import controllers.helpers.FakeRequestHelper",220],["import controllers.routes",195],["import de.zalando.play.controllers.WriteableWrapper.anyContentAsMultipartFormWritable",176],["package controllers.admin",134],["package controllers.api",133],["import collins.controllers.actions.RequestDataHolder",102],["import collins.controllers.actions.SecureAction",99],["import collins.controllers.SecureController",97]]},{"word":"convert","context":[["convert(\"\"\"",189],["\"convert to the correct string\" in {",144],["it should \"properly convert to all supported Units of Measure\" in {",133],["val converted = UpConverter.convert(xml)",119],["// This is the least safe way to convert as an error is thrown if it fails",108],["* @param msg  the message object. `toString()` is called to convert it",80],["import scala.collection.convert.wrapAsScala._",80],["import scala.collection.convert.WrapAsScala._",77],["import scala.collection.convert.decorateAsScala._",71],["import org.neo4j.cypher.internal.compiler.v2_3.ast.convert.commands.ExpressionConverters",70]]},{"word":"copy","context":[["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",2556],["compareTokenCodes(tree, tree.copy())",513],["copy(",386],["def copy(",349],["* use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of",287],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",260],["* use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies",224],["def copyWithContext(c: Context) = copy(ctx = c)",196],["* copy, modify, merge, publish, distribute, sublicense, and/or sell",180],["copy",144]]},{"word":"core","context":[["package core",1081],["import io.gatling.core.Predef._",1016],["import core._",852],["import mesosphere.marathon.core.task.Task",486],["import com.yammer.metrics.core.Gauge",336],["import play.core.j.PlayMagicForJava._",317],["import _root_.io.gatling.core.scenario.Simulation",278],["import securesocial.core._",255],["import com.datastax.driver.core.Row",252],["import org.openmole.core.workflow.data._",236]]},{"word":"correct","context":[["def `should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value` {",1302],["correct(\"\"\"",1138],["it(\"should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value\") {",659],["def `should have correct negated MatcherResult` {",261],["def `should have correct MatcherResult` {",261],["it(\"should return the correct test count from its expectedTestCount method\") {",193],["\"should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value\" in {",176],["\"associate the correct error message to the error\" in {",169],["\"convert to the correct string\" in {",144],["it(\"should have correct negated MatcherResult\") {",111]]},{"word":"count","context":[["var count = 0",2464],["count += 1",2249],["count",787],["count = count + 1",322],["count = count + 1",322],["assert (checker, \"count(/chk:checker/chk:step[@type='METHOD' and @match='POST']) = 2\")",287],["assert (checker, \"count(/chk:checker/chk:step[@type='METHOD' and @match='GET']) = 1\")",283],["assert (checker, \"count(/chk:checker/chk:step[@type='METHOD' and @match='PUT']) = 1\")",281],["assert (checker, \"count(/chk:checker/chk:step[@type='REQ_TYPE_FAIL' and @notMatch='(?i)(application/xml)(;.*)?']) = 1\")",281],["assert(data.count() === 1000)",252]]},{"word":"cra","context":[["* See http://www.cra.com or email figaro@cra.com for information.",856],["* See http://www.cra.com or email figaro@cra.com for information.",856],["import com.cra.figaro.language._",599],["* Created By:      Avi Pfeffer (apfeffer@cra.com)",478],["import com.cra.figaro.algorithm._",268],["import com.cra.figaro.util._",229],["import com.cra.figaro.algorithm.sampling._",208],["import com.cra.figaro.library.compound._",189],["import com.cra.figaro.algorithm.factored._",175],["* Created By:      Brian Ruttenberg (bruttenberg@cra.com)",147]]},{"word":"create","context":[["* licence, when you create a Related Module, this Related Module is",1268],["def create(",385],["// create topic",344],[".create()",284],["// create my cluster client solely based on a zk client and a path",258],["// create path and map variables",245],["// create the topic",237],["// create brokers",217],["dataFileWriter.create(record.getSchema(), file);",167],["* Given the driver type, return the string required to create the column in the database",139]]},{"word":"created","context":[["* that is created or manipulated using TA Buddy.",534],["*        or a <code>Throwable</code> created to capture stack trace information about the problem.",139],["describe(\"when created\") {",133],["\"when created\" - {",132],["Then(\"The app is created\")",127],["// NOTE: Expect the request to be created with a unique id",124],["// fill the created matrix with values",103],["* Return an RDD created by piping elements to a forked external process.",91],["<created-by>{creatorString}</created-by>",89],["<created-by>{creatorString}</created-by>",89]]},{"word":"ct","context":[["import uk.gov.hmrc.ct.box._",641],["package uk.gov.hmrc.ct.computations",492],["package uk.gov.hmrc.ct.accounts.frs102.boxes",386],["import uk.gov.hmrc.ct.accounts.frs102.retriever.Frs102AccountsBoxRetriever",303],["import uk.gov.hmrc.ct.computations.retriever.ComputationsBoxRetriever",282],["package uk.gov.hmrc.ct.ct600.v3",244],["import uk.gov.hmrc.ct.box.{CtBoxIdentifier, CtOptionalInteger, Input}",219],["package uk.gov.hmrc.ct.ct600.v2",209],["val contentHeaders = for { ct <- contentTypes; ac <- acceptHeaders } yield (ac, ct)",176],["val contentHeaders = for { ct <- contentTypes; ac <- acceptHeaders } yield (ac, ct)",176]]},{"word":"ctx","context":[["import ctx._",1379],["val ctx = new Ctx",587],["(h: Heap, ctx: Context, cfg: CFG, fun: String, args: CFGExpr, fid: FunctionId) => {",501],["(h: Heap, ctx: Context, cfg: CFG, fun: String, args: CFGExpr) => {",485],["* @param ctx the parse tree",446],["implicit ctx => {",376],["val (h_1, ctx_1) = Helper.Oldify(h, ctx, addr1)",354],["implicit val req = ctx.body",314],["ctx",259],["visitChildren(ctx)",227]]},{"word":"current","context":[["import play.api.Play.current",3657],["current",503],["if (!compareAndSet(current, update))",488],["val current = get",434],["* <code>apply</code> method to the current reporter. If invoked in a constructor, it",383],["* the current reporter immediately. If invoked at any other time, it will",263],["* the current threads name as <code>threadname</code>, and the current time as <code>timeStamp</code>.",172],["* the current threads name as <code>threadname</code>, and the current time as <code>timeStamp</code>.",172],["db = lila.db.Env.current,",148],["current match {",137]]},{"word":"currentTimeMillis","context":[["val start = System.currentTimeMillis()",755],["val startTime = System.currentTimeMillis()",676],["val start = System.currentTimeMillis",665],["val startTime = System.currentTimeMillis",537],["val now = System.currentTimeMillis()",360],["val now = System.currentTimeMillis",298],["val end = System.currentTimeMillis()",261],["val time = System.currentTimeMillis()",199],["val t0 = System.currentTimeMillis()",172],["val t1 = System.currentTimeMillis",166]]},{"word":"d","context":[["case Def(d) => unapply(d)",1722],["case Def(d) => unapply(d)",1722],["d",599],["assert(!d.theTestThisCalled)",383],["d match {",323],["assert(d.theTestThatCalled)",211],["val f = new Suites(a, b, c, d, e)",196],["assert(d.expectedTestCount(Filter()) === 3)",182],["d: D Or Every[ERR],",180],["assert(d.expectedTestCount(Filter(Some(Set(\"org.scalatest.SlowAsMolasses\")), Set(\"org.scalatest.FastAsLight\"))) === 1)",179]]},{"word":"data","context":[["import play.api.data.Forms._",2020],["import play.api.data.Form",1258],["import play.api.data._",1159],["data",1085],["import cats.data.Xor",537],["import play.api.data.validation.ValidationError",485],["data match {",344],["val ad = a.data",330],["import play.api.data.Field",326],["import play.data._",325]]},{"word":"date","context":[["date,",228],["val date = new DateTime",207],["date",177],["* @throws DateTimeException if the result exceeds the supported date range",132],["val date = new Date()",100],["\"be equivalent to inputType with date type\" in {",97],["* @throws CalendricalException if the result exceeds the supported date range",79],["date\"\"\"",77],["// Type: date-time-iso8601",74],["*  @date    Sun Sep 16 14:09:25 EDT 2012",73]]},{"word":"db","context":[["db.withSession { implicit session =>",588],["import play.api.db.slick.Config.driver.simple._",569],["import play.api.db._",457],["$read(Collection(\"db\", \"zips\")),",448],["import play.api.db.DB",436],["$read(collection(\"db\", \"zips\")),",420],["db.close()",418],["import im.actor.server.db.DbExtension",390],["package db",353],["import lila.db.dsl._",292]]},{"word":"de","context":[["* @author Chris de Vreeze",681],["*  contact@sciss.de",539],["package de.sciss.fscape",265],["* @author Florian Leibert (flo@leibert.de)",220],["*\tcontact@sciss.de",209],["import de.zalando.play.controllers.WriteableWrapper.anyContentAsMultipartFormWritable",176],["import de.sciss.file._",133],["* @author <a href=\"mailto:chr_reisinger@yahoo.de\">Christian Reisinger</a>",98],["import de.unihamburg.vsis.sddf.reading.Tuple",81],["* contact@sciss.de",79]]},{"word":"debug","context":[["logger.debug(\"\", e)",305],["if (debug) {",267],["log.debug(",188],["logger.debug(",152],["package org.scalaide.debug.internal.expression",134],["logger.debug(\"\\nStackTrace:\" + stackTrace)",125],["logger.debug(\"StackTrace:\"+stackTrace)",122],["var debug = false",80],["import org.scalaide.debug.internal.expression.Names.Java",79],["logger.debug(s\"Successfully inserted with LastError: $lastError\")",77]]},{"word":"def","context":[["def main(args: Array[String]) {",11494],["def main(args: Array[String]): Unit = {",6748],["def receive = {",6615],["def apply(",2624],["override def run() {",2601],["override def toString: String = {",2286],["override def toString = {",2182],["def run() {",1874],["def name: String",1791],["def withFixture(test: OneArgTest): Outcome = { test(\"hi\") }",1727]]},{"word":"default","context":[["default",618],["case _ => default",521],["case default => if (in.skipField(default) == true) doParse(partialMessage)",296],["case default => if (in.skipField(default) == true) doParse(partialMessage)",296],["case None => default",274],["private val prettifier = Prettifier.default",265],["* <p>The default implementation does nothing.</p>",254],["import upickle.default._",211],["default = None)",191],["import reactivemongo.api.collections.default.BSONCollection",176]]},{"word":"defined","context":[["it(\"should execute one test when run is called with a defined testName\") {",193],["if (propertyList.isEmpty) throw new IllegalStateException(s\"No 'produces' defined for the $url\")",176],["* @throws IllegalArgumentException if <code>testName</code> is defined, but no test with the specified test name",151],["System.err.println(\"* Warning: Semantics of the DOM API function '\"+fun+\"' are not defined.\")",98],["*   <td>The point object. The point name, if defined, is available",77],["* <code>tagsToExclude</code> <code>Set</code>. If <code>tagsToInclude</code> is defined, only tests",76],["* the two functions defined above.",66],["defined(",63],["items shouldBe defined",60],["if (! isSquare) flaw (\"~^\", \"only defined on square matrices\")",55]]},{"word":"delete","context":[["file.delete()",583],["delete {",302],["f.delete()",234],["file.delete",157],["def delete() {",121],["Await.result(client.delete(\"foo\"))",100],["* @param requestId The id of the request used to retrieve and delete it",98],["dir.delete()",97],[".delete",84],["tempFile.delete()",81]]},{"word":"depth","context":[["def `should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value` {",1302],["it(\"should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value\") {",659],["\"should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value\" in {",176],["def `should throw TestFailedException with correct stack depth when xs is not sorted` {",86],["depth: Int,",86],["it(\"should fire TestFailed event with correct stack depth info when test failed\") {",86],["depth += 1",74],["it(\"should throw NotAllowedException with correct stack depth and message when RHS is empty\") {",68],["var depth = 0",55],["*  professionals having in-depth computer knowledge. Users are therefore",53]]},{"word":"description","context":[["description: String,",913],["description: Option[String],",350],["description,",233],["description: Option[String] = None,",215],["* No description given",175],["def description: String",165],["(__ \\ \"description\").readNullable[String] and",153],["description: _root_.scala.Option[String] = None,",146],["case Some(x) => play.api.libs.json.Json.obj(\"description\" -> play.api.libs.json.JsString(x))",145],["* TODO: Add description.",143]]},{"word":"dir","context":[["dir: U[String] = undefined,",452],["dir.foreach(v => props.updateDynamic(\"dir\")(v))",339],["dir.foreach(v => props.updateDynamic(\"dir\")(v))",339],["dir",279],["dir.mkdirs()",276],["withTempPath { dir =>",122],["if (dir ne null) ctx.append(\" dir=\\\"\"+h(dir)+\"\\\"\")",106],["if (dir ne null) ctx.append(\" dir=\\\"\"+h(dir)+\"\\\"\")",106],["if (dir ne null) ctx.append(\" dir=\\\"\"+h(dir)+\"\\\"\")",106],["withTempDir { dir =>",103]]},{"word":"dispatcher","context":[["import context.dispatcher",2066],["import system.dispatcher",1267],["implicit val ec = system.dispatcher",420],["implicit val ec = context.dispatcher",317],["implicit val executionContext = system.dispatcher",180],["implicit val ec: ExecutionContext = system.dispatcher",149],["override implicit val ec: ExecutionContext = actorSystem.dispatcher",119],["import actorSystem.dispatcher",102],["implicit val executor = system.dispatcher",95],["implicit lazy val ec = App.system.dispatcher",88]]},{"word":"distributed","context":[["* distributed with this work for additional information",4340],["* See the NOTICE file distributed with this work for additional",769],["// See the LICENCE.txt file distributed with this work for additional",740],["* See the notice.md file distributed with this work for additional",637],["* See the LICENCE.txt file distributed with this work for additional",344],["import org.apache.spark.mllib.linalg.distributed.RowMatrix",121],["* See the NOTICE file distributed with this work for additional information",112],["// Jubatus: Online machine learning framework for distributed environment",111],["distributed with this work for additional information",106],["// v. 2.0. If a copy of the MPL was not distributed with this file, You can",106]]},{"word":"distribution","context":[["* which accompanies this distribution and is available at",1232],["* accompanies this distribution and is available at",1026],["* documentation and/or other materials provided with the distribution.",943],["* which accompanies this distribution, and is available at",935],["*    and/or other materials provided with the distribution.",906],["*     documentation and/or other materials provided with the distribution.",491],["<distribution>repo</distribution>",450],["<distribution>repo</distribution>",450],["*       documentation and/or other materials provided with the distribution.",322],["documentation and/or other materials provided with the distribution.",300]]},{"word":"div","context":[["</div>",6204],["<.div(",965],["<div>",915],["div(",304],["<div class=\"evloglmargin\">",246],["<div class=\"span12\">",212],["<div class=\"row-fluid\">",189],["<div class=\"row\">",167],["|</div>",160],["<div class=\"container\">",132]]},{"word":"do","context":[["* furnished to do so, subject to the following conditions:",2674],["do {",2558],["def `should do nothing if valid, else throw a TFE with an appropriate error message` {",1594],["* Automatically generated file. Please do not edit.",1311],["it(\"should do nothing if valid, else throw a TFE with an appropriate error message\") {",1196],["* do.",417],["\"should do nothing if valid, else throw a TFE with an appropriate error message\" in {",286],["furnished to do so, subject to the following conditions:",262],["case _ => // do nothing",253],["// do nothing",238]]},{"word":"doc","context":[["</doc>",468],["def doc =",456],["<doc>",456],["doc",372],["lazy val doc = Jsoup.parse(view.body)",231],["lazy val doc = Jsoup.parse(bodyOf(result))",111],["writeDoc(w, doc)",105],["* @tparam T type of the doc",89],["val sizeElemOption = (doc.documentElement \\\\ (_.localName == \"size\")).headOption",88],["val doc =",79]]},{"word":"documentation","context":[["* documentation that, without modification of the Source Code, enables",1872],["* documentation and/or other materials provided with the distribution.",943],["*     documentation and/or other materials provided with the distribution.",491],["* in the main documentation for trait <code>FlatSpec</code>.",405],["*       documentation and/or other materials provided with the distribution.",322],["documentation and/or other materials provided with the distribution.",300],["* of the main documentation for class <code>Or</code>.",130],["*    documentation and/or other materials provided with the distribution.",127],["* <a href=\"#sharedFixtures\">Shared fixtures</a> section in the main documentation for this trait.",124],["* documentation and/or other materials provided with the",106]]},{"word":"does","context":[["* <p>The default implementation does nothing.</p>",254],["require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), \"FieldDescriptor does not match message type.\")",172],["\"the key does not exist\" should {",130],["<console>:15: error: org.scalatest.words.NewContainWord does not take parameters",100],["require(__field.getContainingType() == descriptor, \"FieldDescriptor does not match message type.\")",97],["* to a class, and when it does, the fully qualified name of that class should be reported by passing a",86],["* method that allows a subclass of a class which does not",77],["def `should throw TestFailedException if object size does not match specified size` {",72],["it(\"should do nothing if object size does not match and used with should not\") {",72],["def `should do nothing if object length does not match and used with should not` {",72]]},{"word":"domain","context":[["import com.normation.inventory.domain.NodeId",519],["import kr.ac.kaist.jsaf.analysis.typing.domain._",480],["import kr.ac.kaist.jsaf.analysis.typing.domain.{BoolFalse => F, BoolTrue => T}",331],["import com.normation.rudder.domain.policies._",259],["import kr.ac.kaist.jsaf.analysis.typing.domain.Context",252],["import kr.ac.kaist.jsaf.analysis.typing.domain.Heap",252],["import com.normation.rudder.domain.policies.RuleId",240],["import com.normation.rudder.domain.policies.DirectiveId",213],["import com.normation.cfclerk.domain._",191],["import com.normation.inventory.domain._",178]]},{"word":"driver","context":[["import driver.api._",814],["import slick.driver.PostgresDriver.api._",712],["import slick.driver.JdbcProfile",621],["import play.api.db.slick.Config.driver.simple._",569],["import driver.simple._",494],["* @param driver the <code>WebDriver</code> with which to drive the browser",350],["driver,",340],["import scala.slick.driver.H2Driver.simple._",327],["import slick.driver.H2Driver.api._",294],["import com.datastax.driver.core.Row",252]]},{"word":"duration","context":[["import scala.concurrent.duration._",18263],["import scala.concurrent.duration.Duration",3344],["import scala.concurrent.duration.FiniteDuration",1647],["import scala.concurrent.duration.DurationInt",1076],["duration = 0,",864],["val result = Await.result(future,duration)",492],["import concurrent.duration._",459],["import akka.util.duration._",441],["duration: Option[Long],",179],["import scala.concurrent.duration.Duration.Zero",174]]},{"word":"e","context":[["case e: Exception =>",5480],["throw e",4110],["case e: Exception => {",3905],["case e: Throwable =>",3671],["case e =>",1735],["case Failure(e) =>",1514],["e.printStackTrace()",1487],["e match {",1295],["val e = intercept[TestFailedException] {",1269],["case NonFatal(e) =>",1174]]},{"word":"e1","context":[["val e1 = intercept[TestFailedException] {",7354],["e1.failedCodeLineNumber.get should be (thisLineNumber - 3)",3278],["val e1 = intercept[exceptions.NotAllowedException] {",2223],["e1.failedCodeFileName.get should be (fileName)",1428],["val e1 = intercept[exceptions.TestFailedException] {",781],["e1.message should be (Some(\"'all' inspection failed, because: \\n\" +",610],["val c1 = cc(e1)",354],["e1.failedCodeLineNumber should be (Some(thisLineNumber - 4))",279],["pr.add(e1)",257],["e1.message should be (",216]]},{"word":"e2","context":[["val e2 = intercept[TestFailedException] {",3429],["val e2 = intercept[exceptions.TestFailedException] {",1046],["e2.failedCodeLineNumber.get should be (thisLineNumber - 3)",608],["val e2 = intercept[exceptions.NotAllowedException] {",553],["e2.failedCodeFileName.get should be (fileName)",534],["val c2 = cc(e2)",386],["e2.message should be (Some(\"'all' inspection failed, because: \\n\" +",322],["e2.getCause match {",290],["e2.failedCodeLineNumber should be (Some(thisLineNumber - 3))",285],["case e2: Throwable => throw e2",284]]},{"word":"each","context":[["* from outside in, and the passed spec text, with one space placed between each item. (See the documenation",248],["// send some messages to each broker",195],["* of the concatenation of the text of each surrounding describer, in order from outside in, and the text of the",122],["* Return a new DStream in which each RDD is generated by applying a function",116],["* Merge the values for each key using an associative reduce function. This will also perform",113],["* the merging locally on each mapper before sending results to a reducer, similarly to a",113],["* For each test in the <code>testName</code> <code>Set</code>, in the order",111],["* @param stepSize Step size to be used for each iteration of gradient descent.",101],["* from outside in, and the test's  spec text, with one space placed between each item. (See the documenation",99],["* contains nested suites, the result of invoking <code>toString</code> on each",98]]},{"word":"ec","context":[["implicit val ec = system.dispatcher",420],["implicit val ec = apiExecutionContext",408],["implicit val ec = context.dispatcher",317],["* @param ec ExecutionContext for async processing",273],["implicit val ec = longRunningExecutionContext",237],["ec: ExecutionContext,",161],["val pec = ec.prepare()",158],["ec:      ExecutionContext",151],[")(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {",150],[")(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]",150]]},{"word":"eclipse","context":[["* http://www.eclipse.org/legal/epl-v10.html",689],["import org.eclipse.jgit.api.Git",404],["import org.eclipse.swt.SWT",265],["import org.eclipse.jetty.server.Server",229],["import org.eclipse.core.runtime.IProgressMonitor",164],["import org.eclipse.jgit.lib._",155],["import org.eclipse.jetty.webapp.WebAppContext",152],["import org.eclipse.swt.widgets.Composite",144],["import org.eclipse.core.resources.IFile",142],["import org.eclipse.jface.text.IDocument",136]]},{"word":"editor","context":[["import com.intellij.openapi.editor.Editor",713],["// </editor-fold>",504],["* and open the template in the editor.",324],["val offset = editor.getCaretModel.getOffset",197],["override def invoke(project: Project, editor: Editor, element: PsiElement) {",193],["import com.intellij.openapi.editor.Document",147],["def isAvailable(project: Project, editor: Editor, element: PsiElement): Boolean = {",141],["PsiDocumentManager.getInstance(project).commitDocument(editor.getDocument)",133],["val document = editor.getDocument",132],["//</editor-fold>",117]]},{"word":"edu","context":[["http://factorie.cs.umass.edu, http://github.com/factorie",1285],["import edu.latrobe._",528],["import edu.latrobe.blaze._",388],["* @author <a href=\"http://shams.web.rice.edu/\">Shams Imam</a> (shams@rice.edu)",365],["* @author <a href=\"http://shams.web.rice.edu/\">Shams Imam</a> (shams@rice.edu)",365],["import edu.rice.habanero.benchmarks.{Benchmark, BenchmarkRunner}",328],["import edu.gemini.spModel.target.SPTarget",199],["import edu.gemini.spModel.obs.context.ObsContext",196],["import edu.berkeley.nlp.futile.util.Logger",175],["import edu.gemini.spModel.core._",165]]},{"word":"elem","context":[["elem match {",607],["elem(",582],["sum += elem",434],["def onNext(elem: Long) = {",428],["elem",263],["def onNext(elem: Int) = {",212],["def onNext(elem: Int): Future[Ack] = {",206],["// elem for concrete class",196],["received += elem",152],["case elem: scala.xml.Elem =>",136]]},{"word":"element","context":[["element match {",1054],["override def invoke(project: Project, editor: Editor, element: PsiElement) {",193],["val k = partialPivoting (b, i)  // find the maxiumum element below pivot",182],["element",148],["def isAvailable(project: Project, editor: Editor, element: PsiElement): Boolean = {",141],["__elementLabel getOrElse { sys.error(\"missing element label.\") },",131],["element.getParent match {",122],["val element = positionFromParameters(parameters)",106],["val k = partialPivoting (u, i)   // find the maxiumum element below pivot",102],["* Perform a left outer join of `this` and `other`. For each element (k, v) in `this`, the",96]]},{"word":"elements","context":[["package elements",217],["* Return an RDD with the elements from `this` that are not in `other`.",151],["/** Filter the elements of 'this' vector based on the predicate 'p', returning",104],["/** Set 'this' vector's elements over the given range (vector slicing).",104],["* Return a new RDD containing the distinct elements in this RDD.",98],["* Return an RDD created by piping elements to a forked external process.",91],["* the sets of all elements that are in either `s` or `t`.",90],["* the set of all elements of `s` that are not in `t`.",90],["// so long as we have some way of comparing elements of the `Array`",89],["* @param p the predicate used to test elements.",85]]},{"word":"else","context":[["} else {",150371],["else",57438],["else {",42318],["} else",5117],["else None",3784],["} else None",2570],["}else{",2160],["else TizenHelper.TizenExceptionBot",1759],["def `should do nothing if valid, else throw a TFE with an appropriate error message` {",1594],["else{",1444]]},{"word":"email","context":[["* See http://www.cra.com or email figaro@cra.com for information.",856],["email: String,",452],["val email = buildEmail(gmail)",210],["whenReady(startEmailAuth(email)) { resp ⇒",190],["email: Option[String],",189],["\"email\" -> email,",174],["\"email\" -> email,",174],["email = email,",122],["email = email,",122],["* by email Sergey Kotlov, sergey.kotlov@happymelly.com or",114]]},{"word":"empty","context":[["Seq.empty",959],["case _ => Seq.empty",788],["Map.empty",490],["Iterator.empty",389],["ConfigMap.empty, None, new Tracker, Set.empty))",369],["ConfigMap.empty, None, new Tracker, Set.empty))",369],["case None => Seq.empty",340],["import ReverseRouteContext.empty",313],["val partialMessage = doParse(Partial.empty)",296],["Set.empty",277]]},{"word":"enables","context":[["* This method enables the following syntax:",3913],["* documentation that, without modification of the Source Code, enables",1872],["* This method enables syntax such as the following:",1148],["* This method enables the following syntax given a <code>MatcherFactory$arity$</code>:",668],["* This class enables syntax such as the following:",155],["* This field enables the following syntax:",120],["* This class enables syntax such as the following test registration:",88],["* For example, this method enables syntax such as the following:",73],["* This class is enables the following syntax:",72],["* This field enables syntax such as the following:",72]]},{"word":"end","context":[["end",1004],["val end = System.currentTimeMillis()",261],["/*end*/",202],["val end = readNat() + readIndex",176],["val end = System.currentTimeMillis",150],[".end",119],["while (i < end) {",110],["*  @param end   the end column of the slice (exclusive)",104],["*  @param end   the end column of the slice (exclusive)",104],["*  @param end   the end row of the slice (exclusive)",98]]},{"word":"entity","context":[["import net.minecraft.entity.player.EntityPlayer",929],["entity",288],["import net.minecraft.entity.Entity",265],["import net.minecraft.entity.EntityLivingBase",163],["result.entity should not be empty",156],["result.entity.data should not be empty",156],["entity match {",148],["|           <code>{Text(entity)}</code>",134],["entity(as[String]) { body =>",96],["import simx.core.entity.Entity",93]]},{"word":"entry","context":[["entry",188],["case entry: java.util.Map.Entry[_, _] =>",147],["val entry = iter.next()",114],["entry match {",109],["entry =>",103],["(entry.getKey, entry.getValue) match {",97],["(entry.getKey, entry.getValue) match {",97],["case Some(entry) =>",78],["if (entry != null) {",77],["</entry>",75]]},{"word":"env","context":[["if (set_addr.size > 1) throw new InternalError(\"API heap allocation: Size of env address is \" + set_addr.size)",521],["val env = ExecutionEnvironment.getExecutionEnvironment",311],["val lset_env = h(SinglePureLocalLoc)(\"@env\")._2._2",283],["val lset_env = h(SinglePureLocalLoc)(\"@env\")._1._2._2",267],["env,",253],["env",250],["* @param env The Silhouette environment.",216],["env.execute()",176],["implicit val env = env0",165],["SparkEnv.set(env)",152]]},{"word":"eq","context":[["when(mockDataManager.findUserByToken(Matchers.eq(SOME_TOKEN), any[DateTime])",296],["if (mutatedInfo eq null) tree",233],["def equalInferredTypes[A,B](a: A, b: B)(implicit eq: A =:= B) {}",125],["import spire.syntax.eq._",121],["eq match {",103],["val eq = eqocc.formula",72],["when(mockDataManager.findUserByToken(Matchers.eq(SOME_TOKEN), Matchers.any[DateTime])(Matchers.any[ExecutionContext]))",70],["verify(settable).set(Matchers.eq(0), Matchers.eq(jValue), any[TCodec])",62],["verify(settable).set(Matchers.eq(0), Matchers.eq(jValue), any[TCodec])",62],["when(gettable.get(Matchers.eq(0), any[TCodec])).thenReturn(jValue)",62]]},{"word":"equal","context":[["status should equal(200)",1130],["// |______\\__, |\\__,_|\\__,_|_| https://github.com/svenjacobs/equal",261],["} should equal(",198],["|      status should equal(200)",185],["status should equal (200)",162],["result should equal (expectedResult)",156],["/** Returns `true` if this value is greater than or equal to x, `false` otherwise. */",149],["/** Returns `true` if this value is less than or equal to x, `false` otherwise. */",149],["import scalaz.syntax.equal._",145],["s should equal (\"hi\")",125]]},{"word":"equals","context":[["override def equals(other: Any): Boolean = other match {",959],["override def equals(other: Any) = other match {",602],["override def equals(that: Any) = that match {",576],["override def equals(that: Any): Boolean = that match {",447],["override def equals(other: Any): Boolean = {",389],["override def equals(other: Any): Boolean =",341],["override def equals(o: Any) = o match {",320],["override def equals(obj: Any): Boolean = {",285],["override def equals(that: Any): Boolean = {",220],["override def equals(that: Any): Boolean =",181]]},{"word":"err","context":[["System.err.println(",386],["ex.printStackTrace(System.err)",351],["if (err != 0) {",303],["case Failure(err) =>",248],["case err: play.api.libs.json.JsError => err",190],["case err: play.api.libs.json.JsError => err",190],["val rn: FunnelResponse = new HttpReturningError(err)",162],["parser.printHelpOn(System.err)",148],["checkStreams(out, err, {",143],["err",124]]},{"word":"error","context":[["def `should do nothing if valid, else throw a TFE with an appropriate error message` {",1594],["error(\"\"\"",1233],["it(\"should do nothing if valid, else throw a TFE with an appropriate error message\") {",1196],["sys.error(\"todo\")",518],["case Failure(error) =>",305],["\"should do nothing if valid, else throw a TFE with an appropriate error message\" in {",286],["logger.error(msg)",239],["if (ERR.get == types.error.ESUCCESS) {",232],["case Left(error) =>",230],["*             On any error.",228]]},{"word":"errors","context":[["tree.errors must beEmpty",377],["errors => {",203],["form.errors.length shouldBe 1",193],["errors",177],["tree.errors mustEqual Set(OperationOnUnrelatedSets)",166],["hasErrors.errors.size should be(2)",157],["form.errors.size shouldBe 1",125],["case r if r.status == 409 => throw new com.bryzek.apidoc.api.v0.errors.ErrorsResponse(r)",116],["val errors = l2pBox.validate(boxRetriever)",102],["case r if r.status == 401 => throw new com.bryzek.dependency.v0.errors.UnitResponse(r.status)",98]]},{"word":"es","context":[["val es =",369],["es => new Future[A] {",129],["es => {",127],["import es.weso.rdf.nodes._",124],["import es.weso.rdf._",113],["es =>",96],["package es.weso.shex",86],["val (h_e, ctx_e) = Helper.RaiseException(h, ctx, es)",80],["(es: ExecutorService) => {",78],["val (h_e, ctx_e) = TizenHelper.TizenRaiseException(h, ctx, es ++ est)",77]]},{"word":"event","context":[["event match {",1411],["import akka.event.Logging",1161],["import akka.event.LoggingReceive",631],["def apply(event: Event) {",565],["import akka.event.LoggingAdapter",564],["import akka.event.EventStream",547],["* @param ordinal an <code>Ordinal</code> that can be used to place this event in order in the context of",520],["*        how to present this event to the user",376],["import scala.swing.event._",249],["for (event <- recordedEvents) {",237]]},{"word":"events","context":[["import org.scalatest.events._",569],["*        other events reported during the same run",562],["import org.scaladebugger.api.lowlevel.events.data.JDIEventDataResult",164],["events",115],["package org.scalatest.events",110],["import org.scalatest.events.Event",101],["assert(events.size === 12)",96],["it(\"should send InfoProvided events with aboutAPendingTest set to false for info \" +",94],["it(\"should send InfoProvided events with aboutAPendingTest set to true for info \" +",94],["import events.TestFailed",82]]},{"word":"ex","context":[["throw ex",1157],["case ex: Exception =>",1086],["case Failure(ex) =>",857],["case ex: Throwable =>",581],["case NonFatal(ex) =>",531],["ex.printStackTrace()",444],["def onError(ex: Throwable): Unit = {",403],["ex.printStackTrace(System.err)",351],["def onError(ex: Throwable) = {",299],["case ex: Exception => {",289]]},{"word":"example","context":[["* For example:",1064],["package example",663],["* @example {{{",607],["// $example off$",537],["// $example on$",536],["* For example, this method supports syntax such as the following:",501],["package com.example",404],["* Here's an example:",334],["* @example",264],["* for <code>testNames</code> for an example.) The resulting test name must not have been registered previously on",255]]},{"word":"examples","context":[["forAll(examples) { colFun =>",693],["package examples",393],["package org.apache.spark.examples.mllib",216],["package org.apache.spark.examples",215],["package org.apache.spark.examples.ml",193],["val examples =",188],["examples = Seq(",111],["forAll (examples) { e =>",105],["package spark.examples",102],["* For examples of test registration, see the <a href=\"FlatSpec.html\">main documentation</a>",101]]},{"word":"exception","context":[["throw exception",243],["case t:IllegalArgumentException => Future.exception(new ClientError(t.getMessage))",170],["import org.I0Itec.zkclient.exception.ZkNodeExistsException",158],["case Failure(exception) =>",152],["case e: Exception => Future.exception(e)",152],["catch { case _: Exception => fail(\"it shouldn't trown an exception\") }",140],["* throw an exception. This method can be called safely by any thread.",131],["_localctx.exception = re",125],["it(\"should throw an exception if there is no underlying profile\") {",122],["* particular file as subject to the \"Classpath\" exception as provided",106]]},{"word":"exceptions","context":[["val e1 = intercept[exceptions.NotAllowedException] {",2223],["val e2 = intercept[exceptions.TestFailedException] {",1046],["val e = intercept[exceptions.TestFailedException] {",946],["val e1 = intercept[exceptions.TestFailedException] {",781],["val e3 = intercept[exceptions.TestFailedException] {",754],["import org.scalatest.exceptions.TestFailedException",629],["case tfe: exceptions.TestFailedException =>",614],["val e2 = intercept[exceptions.NotAllowedException] {",553],["val e4 = intercept[exceptions.TestFailedException] {",492],["val e5 = intercept[exceptions.TestFailedException] {",420]]},{"word":"execute","context":[["client.execute {",859],[".execute()",430],["val resp = client.execute {",360],["processor.execute()",322],["session.execute(",272],[").execute()",241],["import org.specs2.execute.Result",199],["it(\"should execute one test when run is called with a defined testName\") {",193],["it(\"should execute all tests when run is called with testName None\") {",193],["env.execute()",176]]},{"word":"exists","context":[["if (file.exists()) {",325],["if (file.exists) {",200],["file.exists must_==true",144],["if (!file.exists()) {",140],["*     exists in this <code>Suite</code>",138],["* methods. This method exists to make it easy to ignore an existing test by changing the call to <code>it</code>",124],["assert(new File(outputPath).exists())",119],["def exists(p: A => Boolean): Boolean =",108],["exists",107],["if (exists) {",107]]},{"word":"exit","context":[["System.exit(1)",3108],["System.exit(0)",1347],["sys.exit(1)",1327],["exit()",1035],["System.exit(-1)",515],["sys.exit(0)",324],["sys.exit()",180],["exit",141],["* @param expectedExitCode (optional) the expected exit code for the command",120],["exit(1)",110]]},{"word":"expect","context":[["expect {",619],["expect(None) {",279],["expect(resBytes(i)).toEqual(rBytes(i))",277],["expect(c).toEqual(result.toString)",144],["expect(result.signum()).toEqual(1)",135],[".expect",112],["expect(resScale).toEqual(result.scale())",107],["expect(Map()) {",103],["expect(obj).toBeDefined",91],["expect(js.typeOf(accessor)).toEqual(\"function\")",89]]},{"word":"expected","context":[["actual should be (expected)",3093],["val expected =",912],["assert(actual === expected)",683],["val expected = false",530],["val expected = Seq(",526],["val expected = true",493],[".returning(expected).once()",437],["val expected = List(",437],["actual should be(expected)",378],["val expected = None",312]]},{"word":"expr","context":[["expr match {",961],["import org.jetbrains.plugins.scala.lang.psi.api.expr._",868],["import at.logic.gapt.expr._",828],["package expr",420],["import org.jetbrains.plugins.scala.lang.psi.api.expr.ScExpression",271],["expr",149],["case Throw(expr) =>",148],["import org.orbeon.saxon.expr.XPathContext",129],["case Block(stats, expr) =>",119],["expr()",111]]},{"word":"expression","context":[["package org.scalaide.debug.internal.expression",134],["expression match {",85],["import org.scalaide.debug.internal.expression.Names.Java",79],["it(\"should do nothing when object size matches and used in a logical-or expression\") {",72],["def `should do nothing when object length matches and used in a logical-and expression` {",72],["it(\"should do nothing when object length doesn't match and used in a logical-or expression with not\") {",72],["def `should throw an assertion error when object length doesn't match and used in a logical-or expression` {",72],["def `should throw an assertion error when object size matches and used in a logical-and expression with not` {",72],["def `should do nothing when object length matches and used in a logical-or expression` {",72],["it(\"should throw an assertion error when object size matches and used in a logical-or expression with not\") {",72]]},{"word":"extends","context":[["object Main extends App {",1221],["object Test extends dotty.runtime.LegacyApp {",832],["object Application extends Controller {",779],["class TestSpec extends WordSpec {",733],["object ApplicationBuild extends Build {",701],["class MyReporter extends Reporter {",553],["extends Logging {",421],["extends Serializable {",407],["object Global extends GlobalSettings {",345],["object Test extends App {",335]]},{"word":"f","context":[["f",2937],["val f = new Fixture",1701],["f match {",623],["import f._",455],["f.verifyNoMoreInteractions()",447],["val f = fixture",435],["* @param f",344],["assert(!f.isDefined)",292],["f()",282],["case Some(f) =>",271]]},{"word":"factorie","context":[["http://factorie.cs.umass.edu, http://github.com/factorie",1285],["http://factorie.cs.umass.edu, http://github.com/factorie",1285],["import cc.factorie._",346],["import cc.factorie.variable._",256],["import cc.factorie.app.nlp._",215],["import cc.factorie.la._",204],["package cc.factorie.util",170],["package cc.factorie.variable",135],["http://factorie.cs.umass.edu, http://code.google.com/p/factorie/",104],["http://factorie.cs.umass.edu, http://code.google.com/p/factorie/",104]]},{"word":"factory","context":[["import org.springframework.beans.factory.annotation.Autowired",795],["import org.geotools.factory.Hints",396],["assert(factory.isAvailable)",221],["assert(!factory.isAvailable)",208],["import org.geotools.factory.CommonFactoryFinder",203],["val documentSet = factory.documentSet()",133],["import org.springframework.beans.factory.config.BeanDefinition",113],["Await.result(factory())",86],["* All factory methods throw <code>NullPointerException</code> if any of the passed values are <code>null</code>.",84],["import org.geotools.factory.{CommonFactoryFinder, Hints}",78]]},{"word":"fail","context":[["case _ => fail()",807],["case other => fail(\"Expected cause to be TestFailedException, but got: \" + other)",606],["fail()",588],["fail",252],["case _ => fail",174],["fail(\"Unexpected behavior\")",169],["success => fail(\"Should have errored out\")",147],["fail(",144],["catch { case _: Exception => fail(\"it shouldn't trown an exception\") }",140],["case Left(x) => fail(x)",124]]},{"word":"failed","context":[["e1.message should be (Some(\"'all' inspection failed, because: \\n\" +",610],["e2.message should be (Some(\"'all' inspection failed, because: \\n\" +",322],["e.message should be (Some(\"'all' inspection failed, because: \\n\" +",307],["// Log failed HTTP requests",285],["\"'all' inspection failed, because: \\n\" +",199],["failed = true",173],["var failed = false",169],["case _ => Left(\"reads failed: seq must be scala.xml.Node\")",143],["(req:HttpRequest) => Future.failed(mockFailureResponse)",123],["def `should throw TFE with friendly reminder when single GenTraversable argument is passed and failed` {",112]]},{"word":"failedCodeFileName","context":[["e1.failedCodeFileName.get should be (fileName)",1428],["e.failedCodeFileName should be (Some(fileName))",824],["assert(caught1.failedCodeFileName === Some(fileName))",810],["assert(e.failedCodeFileName === (Some(fileName)))",581],["tfe.failedCodeFileName should be (Some(\"InspectorShorthandsSpec.scala\"))",572],["e2.failedCodeFileName.get should be (fileName)",534],["assert(caught2.failedCodeFileName === Some(fileName))",456],["assert(caught4.failedCodeFileName === Some(fileName))",444],["assert(caught3.failedCodeFileName === Some(fileName))",444],["assert(e.failedCodeFileName == (Some(fileName)))",375]]},{"word":"failedCodeLineNumber","context":[["e1.failedCodeLineNumber.get should be (thisLineNumber - 3)",3278],["assert(caught1.failedCodeLineNumber === Some(thisLineNumber - 4))",1280],["assert(caught2.failedCodeLineNumber === Some(thisLineNumber - 4))",850],["assert(caught3.failedCodeLineNumber === Some(thisLineNumber - 4))",792],["assert(caught4.failedCodeLineNumber === Some(thisLineNumber - 4))",726],["e2.failedCodeLineNumber.get should be (thisLineNumber - 3)",608],["e.failedCodeLineNumber should be (Some(thisLineNumber - 3))",563],["assert(e.failedCodeLineNumber === (Some(thisLineNumber - 4)))",543],["tfe.failedCodeLineNumber should be (Some(thisLineNumber - 11))",517],["e.failedCodeLineNumber should be (Some(thisLineNumber - 14))",444]]},{"word":"failure","context":[["failure",222],["it(\"should generate a test failure if a Throwable, or an Error other than direct Error subtypes \" +",193],["// Check to make sure the error message \"short circuits\" (i.e., just reports the left side's failure)",137],["promise.failure(e)",101],["case Failure(f) => p failure f",79],["case Failure(ex) => p.failure(ex)",73],["describe(\"when failure happens\") {",73],["generateEntry(id, failure, {",70],["\"means the current controller with epoch %d went through a soft failure and another \".format(epoch) +",69],["* @return On success the build social profile, otherwise a failure.",68]]},{"word":"false","context":[["case _ => false",19294],["false",15502],["return false",5622],["var theTestThatCalled = false",3518],["var theTestThisCalled = false",3518],["false,",1586],["var theTestTheOtherCalled = false",1511],["case None => false",1499],["else false",1197],["case false =>",1185]]},{"word":"feature","context":[["import org.opengis.feature.simple.{SimpleFeature, SimpleFeatureType}",535],["import org.opengis.feature.simple.SimpleFeatureType",495],["\"-feature\",",441],["import org.opengis.feature.simple.SimpleFeature",287],["import org.geotools.feature.simple.SimpleFeatureBuilder",187],["package org.apache.spark.ml.feature",168],["package skinny.controller.feature",162],["package feature",159],["import org.geotools.feature.DefaultFeatureCollection",158],["describe(\"a feature\") {",144]]},{"word":"features","context":[["features must haveLength(2)",265],["features must haveLength(1)",193],["import org.locationtech.geomesa.features.ScalaSimpleFeature",182],["* @param input RDD of (label, array of features) pairs.",178],["features must haveLength(3)",176],["features must contain(\"bill\", \"bob\", \"charles\")",125],["package epic.features",118],[".setInputCol(\"features\")",115],["features must haveSize(1)",113],[".setOutputCol(\"features\")",104]]},{"word":"field","context":[["field",326],["field.setAccessible(true)",286],["field match {",258],["import scala.annotation.meta.field",186],["* If the specified field is optional, it is set to None.  Otherwise, if the field is",181],["* If the specified field is optional, it is set to None.  Otherwise, if the field is",181],["field =>",145],["field.map { field =>",145],["field.map { field =>",145],["* If the field is not a {@code ChronoField}, then the result of this method",138]]},{"word":"fields","context":[["{{#fields}}",353],["{{/fields}}",298],["for (f <- r.fields) {",214],["|   fields = [",177],["\"fields\": [",177],["* Checks that all required fields are non-null.",167],["fields:",128],["fields",121],["val fields = line.split(\"\\t\")",116],["val fields = XMLDataFields(xml)",109]]},{"word":"file","context":[["* This file is part of Neo4j.",1823],["This file is part of \"FACTORIE\" (Factor graphs, Imperative, Extensible)",1389],["* Automatically generated file. Please do not edit.",1311],["import java.nio.file.Path",1084],["protocol = \"file\",",854],["import java.nio.file.Paths",841],["base = file(\".\"),",796],["* See the NOTICE file distributed with this work for additional",769],["import java.nio.file.Files",763],["// See the LICENCE.txt file distributed with this work for additional",740]]},{"word":"fileName","context":[["e1.failedCodeFileName.get should be (fileName)",1428],["e.failedCodeFileName should be (Some(fileName))",824],["assert(caught1.failedCodeFileName === Some(fileName))",810],["assert(e.failedCodeFileName === (Some(fileName)))",581],["e2.failedCodeFileName.get should be (fileName)",534],["assert(caught2.failedCodeFileName === Some(fileName))",456],["assert(caught3.failedCodeFileName === Some(fileName))",444],["assert(caught4.failedCodeFileName === Some(fileName))",444],["assert(e.failedCodeFileName == (Some(fileName)))",375],["e1.failedCodeFileName should be (Some(fileName))",216]]},{"word":"files","context":[["* A \"Related Module\" means a set of sources files including their",1872],["* serving files in a web or/and network application,",540],["* along with Kiama.  (See files COPYING and COPYING.LESSER.)  If not, see",317],["import better.files._",299],["val form = new MultipartFormData(data, files, Nil, Nil)",176],["val files: Seq[FilePart[TemporaryFile]] = Nil",170],["files",161],["for (file <- files) {",113],["/** This file is part of TextCompose, a program for producing PDF from text files.",110],["IMPORTANT NOTE: All patches (modifications to existing files and/or the addition of new files) submitted for inclusion",104]]},{"word":"filter","context":[["import org.geotools.filter.text.ecql.ECQL",464],["import org.opengis.filter.Filter",435],["val options = splitter.getQueryOptions(filter)",273],["filter match {",195],["import org.geotools.filter.identity.FeatureIdImpl",160],[".filter {",138],["eventsReceived filter {",135],["package com.sksamuel.scrimage.filter",129],["assertEquals(1, filter.count())",124],["import org.locationtech.geomesa.filter._",123]]},{"word":"finagle","context":[["import com.twitter.finagle.Service",1058],["import com.twitter.finagle._",921],["import com.twitter.finagle.transport.Transport",627],["package com.twitter.finagle",560],["import com.twitter.finagle.stats.StatsReceiver",435],["import com.twitter.finagle.http.{Request, Response}",363],["import com.twitter.finagle.builder.ClientBuilder",346],["package com.twitter.finagle.service",309],["package com.twitter.finagle.http",300],["* import com.twitter.finagle.Http",295]]},{"word":"final","context":[["final class Env(",258],["final def apply()",209],["final override def serializedSize: Int = {",152],["* This trait's implementation of this method is  marked as final. For insight onto why, see the",124],["@inline final",103],["final def find(f: A => Boolean): Option[A] = this match {",91],["final def apply()(implicit ctx: Html5RenderCtx): Unit = apply(\"\")",90],["final",83],["final val logger = LoggerFactory.getLogger(this.getClass)",81],["* @param end The final bound of the range to make.",69]]},{"word":"finally","context":[["} finally {",15662],["finally {",3404],["finally",346],["*     finally {",279],["} finally",181],["}finally {",125],["}finally{",104],["*     finally writer.close() // clean up the fixture",98],["try { op(p) } finally { p.close() }",91],["*   finally {",76]]},{"word":"find","context":[["val k = partialPivoting (b, i)  // find the maxiumum element below pivot",182],["val k = partialPivoting (u, i)   // find the maxiumum element below pivot",102],["val valuesFor2 = groups.find(_._1 == 2).get._2",97],["final def find(f: A => Boolean): Option[A] = this match {",91],["whenReady(db.run(persist.HistoryMessage.find(user1.id, models.Peer.group(groupOutPeer.groupId)))) { serviceMessages ⇒",91],["refs.find(c.ty)",90],["* @param loginInfo The login info of the user to find.",90],["case Cons(h, t) => if (f(h())) Some(h()) else t().find(f)",89],["coll.find(",89],["go to (host + \"find-select.html\")",84]]},{"word":"first","context":[["var first = true",467],["first = false",371],["if (first) {",171],["// Memoized request function first checks to make sure the cache",108],["// has not been invalidated underneath (first call will always be",108],["var r = firstRow // the first row of the matrix that this thread processes",104],["*  @param u  the vector to multiply by (requires same first dimensions)",104],["// This is the safest as it collects all error information (not just first error) and reports it",102],["* @param queryString the string with which to search, first by ID then by name",93],["override val theTestNames = Vector(\"should first test\", \"should second test\")",90]]},{"word":"fixture","context":[["assert(fixture === hello)",514],["val f = fixture",435],["package org.scalatest.fixture",351],["* import org.scalatest.fixture",202],["\"should blow up\" in { fixture =>",199],["val f = fixture()",186],["ignore(\"test this\") { fixture =>",180],["def testThis(fixture: FixtureParam) { theTestThisCalled = true }",170],["def testThat(fixture: FixtureParam, info: Informer) { theTestThatCalled = true }",170],["\"test that\" taggedAs(mytags.SlowAsMolasses) in { fixture => theTestThatCalled = true }",161]]},{"word":"flatMap","context":[[".flatMap {",370],["}.flatMap { _ =>",191],["} flatMap {",187],["}.flatMap {",165],["val words = lines.flatMap(_.split(\" \"))",147],["elem.attributes.toList flatMap {",127],["params(\"id\").toIntOpt.flatMap{ issueId =>",99],["): Gen[R] = arbitrary[T1] flatMap {",95],["userService.retrieve(loginInfo).flatMap {",93],["lazy val validations = errors flatMap { _.messages } map { m =>",88]]},{"word":"flush","context":[["writer.flush()",800],["out.flush()",717],["flush()",325],["out.flush",222],["em.flush()",181],["oos.flush()",164],["pw.flush()",152],["os.flush()",150],["def flush() {",150],["writer.flush",137]]},{"word":"fold","context":[["// </editor-fold>",504],[").fold(",165],["result.fold(cancel(\"expected result not computed\")) { item =>",152],["form.bindFromRequest.fold(",141],["//</editor-fold>",117],["loginForm.bindFromRequest.fold(",116],["_.fold(",114],[".fold(",84],["result.fold(",69],["}).fold(succ = { a: Result => a }, fail = { t: Throwable => Status(BAD_REQUEST)(t.getMessage) })",63]]},{"word":"following","context":[["* This method enables the following syntax:",3913],["* furnished to do so, subject to the following conditions:",2674],["* This method enables syntax such as the following:",1148],["* This method supports syntax such as the following:",1004],["* This method enables the following syntax given a <code>MatcherFactory$arity$</code>:",668],["* For example, this method supports syntax such as the following:",501],["* subject to the following conditions:",295],["And(\"The following assertions should also hold:\")",275],["furnished to do so, subject to the following conditions:",262],["* so, subject to the following conditions:",224]]},{"word":"foo","context":[["b = foo();",1091],["val foo = (new Foo).asInstanceOf[js.Dynamic]",319],["val dyn = foo.asInstanceOf[js.Dynamic]",192],["\"\"\"foo(",190],["val methodName: String = \"foo\"",170],["foo",170],["cmd = Some(\"foo\"),",161],["$read(Collection(\"db\", \"foo\")),",153],["int * foo();",150],["$read(collection(\"db\", \"foo\")),",120]]},{"word":"for","context":[["for {",33005],["} // for",6254],["* distributed with this work for additional information",4340],["(for {",3647],["* Network Engine for Objects in Lund AB [http://neotechnology.com]",1841],["for (",1556],["val result = for {",921],["* See http://www.cra.com or email figaro@cra.com for information.",856],["* See the NOTICE file distributed with this work for additional",769],["// See the LICENCE.txt file distributed with this work for additional",740]]},{"word":"forAll","context":[["forAll(examples) { colFun =>",693],["import org.scalacheck.Prop.forAll",475],["forAll {",431],["forAll(seqExamples) { colFun =>",172],["forAll(nullableExamples) { colFun =>",153],["forAll(larGen) { lar =>",140],["val prop = forAll ($famousArgs$) { ($namesAndTypes$) =>",120],["forAll(traversableExamples) { colFun =>",116],["forAll(mapExamples) { colFun =>",108],["forAll (examples) { e =>",105]]},{"word":"foreach","context":[["onWheel.foreach(v => props.updateDynamic(\"onWheel\")(v))",339],["onAnimationStart.foreach(v => props.updateDynamic(\"onAnimationStart\")(v))",339],["onCut.foreach(v => props.updateDynamic(\"onCut\")(v))",339],["contentEditable.foreach(v => props.updateDynamic(\"contentEditable\")(v))",339],["onDragEnter.foreach(v => props.updateDynamic(\"onDragEnter\")(v))",339],["ref.foreach(v => props.updateDynamic(\"ref\")(v))",339],["className.foreach(v => props.updateDynamic(\"className\")(v))",339],["is.foreach(v => props.updateDynamic(\"is\")(v))",339],["onDragStart.foreach(v => props.updateDynamic(\"onDragStart\")(v))",339],["onSelect.foreach(v => props.updateDynamic(\"onSelect\")(v))",339]]},{"word":"form","context":[["* you must retain the producer line in every report, form or document",540],["</form>",451],["form.hasErrors shouldBe true",309],["* to form the test name",274],["val form = Form(",236],["\"raise form error\" in {",197],["if(contentType.startsWith(\"multipart/form-data\")) {",196],["form.errors.length shouldBe 1",193],["def `should work on parallel form` {",184],["\"raise 1 form error\" in {",178]]},{"word":"format","context":[["import org.joda.time.format.DateTimeFormat",932],["import org.joda.time.format.ISODateTimeFormat",675],["// format: OFF",374],["import java.time.format.DateTimeFormatter",354],["format match {",274],["// format: ON",216],["import org.joda.time.format.DateTimeFormatter",192],["val format = RegRmFormat",190],["val format = RmFormat",178],["package format",171]]},{"word":"formatter","context":[["formatter match {",531],["import scalariform.formatter.preferences._",501],["* @param formatter an optional formatter that provides extra information that can be used by reporters in determining",336],["* @param formatter an optional formatter that provides extra information that can be used by reporters in determining",336],["formatter: Option[Formatter],",171],["import formatter._",137],["if (formatter == null)",132],["throw new NullPointerException(\"formatter was null\")",132],["formatter: Option[Formatter] = None,",126],["case ScopeOpened(ordinal, message, nameInfo, formatter, location, payload, threadName, timeStamp) =>",125]]},{"word":"forms","context":[["* Redistribution and use in source and binary forms, with or without",3573],["Redistribution and use in source and binary forms, with or without",639],["* Redistribution and use in source and binary forms, with or without modification,",339],["import jp.sf.amateras.scalatra.forms._",227],["package forms",176],["// Redistribution and use in source and binary forms, with or without",113],["import forms._",95],["Note that we can go back and forth between the two forms. We can curry",94],["and uncurry and the two forms are in some sense \"the same\". In FP jargon,",94],["import io.github.gitbucket.scalatra.forms._",84]]},{"word":"found","context":[["var found = false",419],["found = true",414],["found",196],["* @return The found user or None if no user for the given login info could be found.",92],["* @return The found user or None if no user for the given login info could be found.",92],["* @return The found user or None if no user for the given ID could be found.",83],["* @return The found user or None if no user for the given ID could be found.",83],["assert(file != null, \"file \" + filePath + \" not found\")",80],["* @param default The default value to use if the property is not found",79],["* of the set can be found quickly. If you want to learn more you can take a look",71]]},{"word":"from","context":[["from",525],["when(\"one is subracted from the other\")",253],["* from outside in, and the passed spec text, with one space placed between each item. (See the documenation",248],["it(\"should return the correct test count from its expectedTestCount method\") {",193],["* from the passthroughFields map, if present.",181],["* Return an RDD with the elements from `this` that are not in `other`.",151],["\"calls made from a test that is pending\") {",134],["it should \"create values from properly formatted Strings\" in {",134],["it should \"provide implicit conversion from Double\" in {",133],["*  @param from  the position to start extracting from",123]]},{"word":"fs","context":[["import org.apache.hadoop.fs.Path",1128],["import org.apache.hadoop.fs.{FileSystem, Path}",356],["import org.apache.hadoop.fs.FileSystem",281],["val fs = ds.getFeatureSource(sftName).asInstanceOf[AccumuloFeatureStore]",206],["import quasar.fs._",128],["package com.pavelfatin.fs",120],["val fs = FileSystem.get(conf)",118],["conv.assertArityMatches(fs._1)",116],["fs.addFeatures(featureCollection)",103],["import org.apache.hadoop.fs.{ FileSystem, Path }",92]]},{"word":"fun","context":[["(h: Heap, ctx: Context, cfg: CFG, fun: String, args: CFGExpr, fid: FunctionId) => {",501],["(h: Heap, ctx: Context, cfg: CFG, fun: String, args: CFGExpr) => {",485],["case fun: ScFunction =>",240],["fun",196],["fun match {",163],["*       assert(builder.toString === \"ScalaTest is fun!\")",143],["*       builder.append(\"fun!\")",143],["case Apply(fun, args) =>",117],["val sym = fun.symbol",106],["*     builder.append(\"fun!\")",102]]},{"word":"function","context":[["test.c: In function 'main':",906],["function() {",597],["* @param testFun the test function",571],["test.c: In function 'x':",318],["* @param reduceFunc associative reduce function",177],["test.c: In function ‘foo’:",173],["*  @param f  the function to apply",150],["package monocle.function",144],["package org.orbeon.oxf.xforms.function.xxforms",143],["import monocle.function._",138]]},{"word":"functions","context":[["* supplementary functions or services in addition to those offered by",1872],["import org.apache.spark.sql.functions._",557],["object List { // `List` companion object. Contains functions for creating and working with lists.",97],["// Some examples of anonymous functions:",96],["// Polymorphic functions are often so constrained by their type",95],["import functions._",83],["def foldRight[A,B](as: List[A], z: B)(f: (A, B) => B): B = // Utility functions",82],["it(\"should work with test functions whose inferred result type is not Unit\") {",81],["package org.neo4j.cypher.internal.compiler.v2_3.functions",80],["* The name of a symbol to use for the border around the label. Symbols are predefined functions on the Renderer object.",77]]},{"word":"future","context":[["promise.future",1341],["p.future",1206],["promise.future.map { repo =>",602],["val result = Await.result(future,duration)",492],["future",321],[".future()",284],["future {",253],["Await.result(promise.future, 5.seconds)",209],["Await.result(future, timeout.duration)",146],["val resp = Await.result(future, 3.seconds)",140]]},{"word":"g","context":[["g",283],["*  @param k  how far above the main diagonal, e.g., (-1, 0, 1) for (sub, main, super)",228],["assert(!g.theTestTheOtherCalled)",211],["assert(!g.theTestThisCalled)",211],["assert(g.theTestThatCalled)",211],["g: G Or Every[ERR],",150],["g.tags",124],["*  @param rowIndex  the row index positions (e.g., (0, 2, 5))",121],["*  @param colIndex  the column index positions (e.g., (0, 2, 5))",121],["super.paintComponent(g)",115]]},{"word":"game","context":[["package lila.game",177],["val game = ChessGame.fromGridString(",96],["case game =>",91],["import lila.game.{ Game, GameRepo }",84],["game: Game,",77],["package game",70],["val game: Game = Game(cols, rows)",69],["import lila.game.Game",64],["import lila.game.tube.gameTube",58],["it(\"should lead the whole game\") {}",56]]},{"word":"gatling","context":[["import io.gatling.core.Predef._",1016],["import io.gatling.http.Predef._",891],["//context.getLogger(\"io.gatling.http\").setLevel(Level.valueOf(\"TRACE\"))",285],["//context.getLogger(\"io.gatling.http\").setLevel(Level.valueOf(\"DEBUG\"))",285],["import _root_.io.gatling.core.scenario.Simulation",278],["import io.gatling.jdbc.Predef._",199],["import io.gatling.core.config.GatlingConfiguration",184],["import io.gatling.core.session.Session",133],["import io.gatling.commons.validation._",127],["import io.gatling.core.session._",126]]},{"word":"gen","context":[["import com.twitter.zipkin.gen",273],["val id = gen[UUID]",222],["val row = gen[JodaRow]",188],["val recipe = gen[Recipe]",175],["val row = gen[Primitive]",162],["val sample = gen[ThriftTest]",132],["gen.writeEndObject()",132],["val sample2 = gen[ThriftTest]",117],["val gen = new Generator(SpecificRecord)",115],["gen.writeStartObject()",110]]},{"word":"generate","context":[["*                       the new DStream will generate RDDs); must be a multiple of this",321],["// An Ignored test that was not included should not generate a TestIgnored event",225],["// An Ignored test that was both included and excluded should not generate a TestIgnored event",225],["it(\"should generate a test failure if a Throwable, or an Error other than direct Error subtypes \" +",193],["it(\"should generate a TestPending message when the test body is (pending)\") {",177],["def generate(mv: MethodVisitor, symbolTable: SymbolTable) {",114],["* Hash partitioning is used to generate the RDDs with `numPartitions` partitions.",104],["* generate the RDDs with Spark's default number of partitions.",79],["def nextInt: (Int, RNG) // Should generate a random `Int`. We'll later define other functions in terms of `nextInt`.",75],["\"generate confirmation mustache model with correctly rendered values and correct URLs\" in {",68]]},{"word":"generated","context":[["* Automatically generated file. Please do not edit.",1311],["* generated. We want to make it easy and obvious for users of",217],["// Automatically generated - edit tools/thread-code.py, rather than this code",200],["package generated.scala",189],["//This class was generated by build script, please don't change this",186],["package generated",183],["* Return a new DStream in which each RDD is generated by applying a function",116],["*  results of that function by feeding it with arbitrarily generated input",113],["* generated based on `prefix` and `suffix`: \"prefix-TIME_IN_MS.suffix\".",96],["* @param fun the property check function to apply to the generated arguments",80]]},{"word":"geomesa","context":[["import org.locationtech.geomesa.utils.geotools.SimpleFeatureTypes",683],["import org.locationtech.geomesa.utils.text.WKTUtils",375],["import org.locationtech.geomesa.utils.geotools.RichSimpleFeatureType.RichSimpleFeatureType",359],["import org.locationtech.geomesa.utils.geotools.Conversions._",276],["package org.locationtech.geomesa.accumulo.index",212],["package org.locationtech.geomesa.accumulo.iterators",191],["import org.locationtech.geomesa.features.ScalaSimpleFeature",182],["package org.locationtech.geomesa.accumulo.data",153],["import org.locationtech.geomesa.filter._",123],["import org.locationtech.geomesa.accumulo.data._",119]]},{"word":"geotools","context":[["import org.locationtech.geomesa.utils.geotools.SimpleFeatureTypes",683],["import org.geotools.filter.text.ecql.ECQL",464],["import org.geotools.factory.Hints",396],["import org.locationtech.geomesa.utils.geotools.RichSimpleFeatureType.RichSimpleFeatureType",359],["import org.locationtech.geomesa.utils.geotools.Conversions._",276],["import org.geotools.data.Query",241],["import org.geotools.factory.CommonFactoryFinder",203],["import org.geotools.data._",189],["import org.geotools.feature.simple.SimpleFeatureBuilder",187],["import org.geotools.geometry.jts.ReferencedEnvelope",182]]},{"word":"get","context":[["e1.failedCodeLineNumber.get should be (thisLineNumber - 3)",3278],["get {",2738],["e1.failedCodeFileName.get should be (fileName)",1428],["e2.failedCodeLineNumber.get should be (thisLineNumber - 3)",608],["}.get",573],[".get(\"/api/account\")",570],["e2.failedCodeFileName.get should be (fileName)",534],[".get",495],["val current = get",434],["resp.toOption.get.transactionHash",412]]},{"word":"getClass","context":[["val log = LoggerFactory.getLogger(getClass)",453],["private[this] val log = LoggerFactory.getLogger(getClass)",391],["private[this] val log = Logger.getLogger(getClass.getName)",338],["private val log = LoggerFactory.getLogger(getClass)",336],["val logger = LoggerFactory.getLogger(getClass)",304],["assert(testFailedEvents(0).throwable.get.getClass() === classOf[TestRegistrationClosedException])",215],["val log = Logger.getLogger(getClass.getName)",173],["log.fatal(\"Unknown item \" + unknown.getClass())",170],["val loggerName = this.getClass.getName",167],["val logger = LoggerFactory.getLogger(this.getClass)",167]]},{"word":"getInstance","context":[["val dummyFile = PsiFileFactory.getInstance(manager.getProject).",360],["CarbonProperties.getInstance()",264],["val cal = Calendar.getInstance()",194],["val cal = Calendar.getInstance",158],["override def getInstance(cfg: CFG): Option[Loc] = Some(newRecentLoc())",149],["PsiDocumentManager.getInstance(project).commitDocument(editor.getDocument)",133],["PsiDocumentManager.getInstance(project).commitAllDocuments()",112],["EventBusFactory.getInstance.post(new ProjectEvent.GotoMyProject(this, chain))",99],["val calendar = Calendar.getInstance()",95],["PsiDocumentManager.getInstance(project).commitDocument(document)",86]]},{"word":"getLogger","context":[["val log = LoggerFactory.getLogger(getClass)",453],["private[this] val log = LoggerFactory.getLogger(getClass)",391],["private[this] val log = Logger.getLogger(getClass.getName)",338],["private val log = LoggerFactory.getLogger(getClass)",336],["val logger = LoggerFactory.getLogger(getClass)",304],["//context.getLogger(\"io.gatling.http\").setLevel(Level.valueOf(\"DEBUG\"))",285],["//context.getLogger(\"io.gatling.http\").setLevel(Level.valueOf(\"TRACE\"))",285],["val log = Logger.getLogger(getClass.getName)",173],["val logger = LoggerFactory.getLogger(this.getClass)",167],["private val logger = LoggerFactory.getLogger(this.getClass)",151]]},{"word":"getMessage","context":[["assert(e.getMessage == \"on purpose\")",270],["case t:IllegalArgumentException => Future.exception(new ClientError(t.getMessage))",170],["println(e.getMessage)",168],["error(e.getMessage)",160],["assert(e.getMessage === \"A they clause must only appear after a top level subject clause.\")",160],["assert(e.getMessage === \"An it clause must only appear after a top level subject clause.\")",160],["e.getMessage match {",159],["log.error(e.getMessage, e)",156],["assert(caught2.getMessage === \"a test tag was null\")",137],["assert(caught.getMessage === \"a test tag was null\")",137]]},{"word":"getName","context":[["private[this] val log = Logger.getLogger(getClass.getName)",338],["encoder = classOf[StringEncoder].getName,",228],["val log = Logger.getLogger(getClass.getName)",173],["val loggerName = this.getClass.getName",167],["threadName: String = Thread.currentThread.getName,",141],["keyEncoder = classOf[StringEncoder].getName,",120],["private val log = Logger.getLogger(this.getClass.getName)",107],["val name = file.getName",98],["private val log = Logger.getLogger(getClass.getName)",98],["def getName = name",93]]},{"word":"getOrElse","context":[["} getOrElse {",1968],["}.getOrElse {",1651],["} getOrElse NotFound",965],["partialMessage.toComplete.map(Right(_)).getOrElse({",296],["val baseURL = Option(System.getProperty(\"baseURL\")) getOrElse \"\"\"http://127.0.0.1:8080\"\"\"",284],["}.getOrElse(false)",270],["} getOrElse NotFound()",229],[".getOrElse {",224],["}.getOrElse(\"\")",199],["}.getOrElse(Nil)",190]]},{"word":"git","context":[["using(Git.open(getRepositoryDir(repository.owner, repository.name))){ git =>",490],["* @param git the Git object",210],["using(new RevWalk(git.getRepository)){ revWalk =>",187],["git: www.github.com/code-helix/slatekit",132],["using(new TreeWalk(git.getRepository)){ treeWalk =>",127],["val inserter = git.getRepository.newObjectInserter()",99],["getPathObjectId(git, path, revCommit).map { objectId =>",84],["using(Git.open(Directory.getWikiRepositoryDir(owner, repository))){ git =>",81],["using(Git.open(getRepositoryDir(owner, name))){ git =>",78],["* saved in git. Else, no modification in git are saved.",76]]},{"word":"github","context":[["http://factorie.cs.umass.edu, http://github.com/factorie",1285],["import com.github.nscala_time.time.Imports._",892],["* https://github.com/jeffheaton/aifh",341],["\\* *  http://github.com/alexcab  * * * * * * * * * * * * * * * * * * * * * * * * * */",271],["// |______\\__, |\\__,_|\\__,_|_| https://github.com/svenjacobs/equal",261],["package com.github.shadowsocks",220],["package com.github.tminglei.slickpg",205],["*  @https://github.com/scouter-project/scouter",182],["url: https://github.com/kishorereddy/scala-slate",172],["git: www.github.com/code-helix/slatekit",132]]},{"word":"given","context":[["// given",1894],["* This method enables the following syntax given a <code>MatcherFactory$arity$</code>:",668],["//given",611],["given(\"two integers\")",257],["* No description given",175],["*  @param r  the given range",174],["* Register a test with the given spec text, optional tags, and test function value that takes no arguments.",121],["*  @param i  the given index",116],["/** Set 'this' vector's elements over the given range (vector slicing).",104],["given()",101]]},{"word":"global","context":[["import scala.concurrent.ExecutionContext.Implicits.global",8774],["import ExecutionContext.Implicits.global",982],["import global._",845],["/* global */",211],["import concurrent.ExecutionContext.Implicits.global",179],["import context.global._",139],["import com.novus.salat.global._",129],["implicit val context = scala.concurrent.ExecutionContext.Implicits.global",102],["val global: Global",92],["implicit val ec = ExecutionContext.Implicits.global",79]]},{"word":"go","context":[["go to BeforeYouStartPage",539],["go to (host + \"click.html\")",420],["else go(mid2 + 1, mid2, high)",178],["def go(low: Int, mid: Int, high: Int): Int = {",178],["go(0)",129],["go(n, 1)",118],["presenter.go(projectView, data)",117],["go",117],["def go(n: Int, acc: Int): Int =",112],["// Make the spinny image go away when it ends",99]]},{"word":"google","context":[["import com.google.inject.Inject",1108],["import com.google.common.io.Files",554],["val out = com.google.protobuf.CodedOutputStream.newInstance(res)",316],["def writeTo(out: com.google.protobuf.CodedOutputStream) {",316],["import com.google.protobuf.ByteString",309],["import com.google.common.base.Charsets",273],["import com.google.inject.AbstractModule",270],["import com.google.inject.{Inject, Singleton}",181],["def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {",168],["import com.google.common.collect.Lists",165]]},{"word":"gov","context":[["import uk.gov.hmrc.ct.box._",641],["package uk.gov.hmrc.ct.computations",492],["package uk.gov.hmrc.ct.accounts.frs102.boxes",386],["import uk.gov.hmrc.play.test.{UnitSpec, WithFakeApplication}",352],["import uk.gov.hmrc.ct.accounts.frs102.retriever.Frs102AccountsBoxRetriever",303],["import uk.gov.hmrc.ct.computations.retriever.ComputationsBoxRetriever",282],["import uk.gov.hmrc.play.http.HeaderCarrier",258],["package uk.gov.hmrc.ct.ct600.v3",244],["import uk.gov.hmrc.play.test.UnitSpec",221],["import uk.gov.hmrc.ct.box.{CtBoxIdentifier, CtOptionalInteger, Input}",219]]},{"word":"graph","context":[["import graph._",400],["package graph",340],["graph",256],["val graph = new ComputeGraph(Optimize) with RefTestInterface {",226],["graph.shutdown",185],["graph.inTx {",123],["import org.digimead.tabuddy.model.graph.Graph",112],["graph.awaitIdle",95],["val graph = new OperatorGraph(Seq(",94],["* Pixel with of the graph line.",90]]},{"word":"group","context":[["* @group Constructors (Primitives)",4661],["* @group Constructors (Lifting)",848],["/** @group setParam */",823],["* @group collection",568],["* @group Algebra",560],["* @group combinators",413],["$group(",410],["/** @group getParam */",397],["* @group param",377],["* @group numbers",271]]},{"word":"h","context":[["import h._",792],["(h: Heap, ctx: Context, cfg: CFG, fun: String, args: CFGExpr, fid: FunctionId) => {",501],["(h: Heap, ctx: Context, cfg: CFG, fun: String, args: CFGExpr) => {",485],["val lset_this = h(SinglePureLocalLoc)(\"@this\")._2._2",380],["val lset_this = h(SinglePureLocalLoc)(\"@this\")._1._2._2",367],["val (h_1, ctx_1) = Helper.Oldify(h, ctx, addr1)",354],["case Cons(h, t) =>",348],["h",342],["val lset_env = h(SinglePureLocalLoc)(\"@env\")._2._2",283],["val lset_env = h(SinglePureLocalLoc)(\"@env\")._1._2._2",267]]},{"word":"hadoop","context":[["import org.apache.hadoop.conf.Configuration",2106],["import org.apache.hadoop.fs.Path",1128],["import org.apache.hadoop.io.Text",666],["import org.apache.hadoop.hbase.util.Bytes",494],["import org.apache.hadoop.mapred.JobConf",433],["import org.apache.hadoop.fs.{FileSystem, Path}",356],["import org.apache.hadoop.mapreduce.Job",305],["import org.apache.hadoop.io.Writable",292],["package hadoop",285],["import org.apache.hadoop.fs.FileSystem",281]]},{"word":"handler","context":[["import org.jboss.netty.handler.codec.http._",433],["handler =>",180],["import io.netty.handler.codec.http._",131],["handler: SecureController",128],["package com.twitter.server.handler",121],["handler",112],["import org.jboss.netty.handler.codec.http.HttpMethod",109],["// start a new HTTP server on port 8080 with our service actor as the handler",96],["// This must be called by the event handler thread",90],["* @throws XNIException Thrown by handler to signal an error.",90]]},{"word":"has","context":[["* @throws TestRegistrationClosedException if invoked after <code>run</code> has been invoked on this suite",350],["* @throws DuplicateTestNameException if a test with the same name has been registered previously",350],["// This object has all properties of the HTMLElement object",218],["describe(\"(when a nesting rule has been violated)\") {",145],["// has not been invalidated underneath (first call will always be",108],["// NB: The `Function2` trait has a `curried` method already",96],["* A <em>pending test</em> is one that has been given a name but is not yet implemented. The purpose of",91],["* Called after the zookeeper session has expired and a new session has been created. You would have to re-create",88],["* Called after the zookeeper session has expired and a new session has been created. You would have to re-create",88],["if(!options.has(arg)) {",87]]},{"word":"hasNext","context":[["while (iter.hasNext) {",1010],["while (iterator.hasNext) {",805],["while (it.hasNext) {",755],["override def hasNext: Boolean = {",283],["if (it.hasNext)",281],["if (iter.hasNext) {",214],["while(iter.hasNext) {",208],["while (itr.hasNext) {",202],["if (it.hasNext) {",196],["while(it.hasNext) {",188]]},{"word":"have","context":[["def `should have pretty toString` {",375],["* or visit www.oracle.com if you need additional information or have any",372],["result should have length 3",313],["mr should have (",298],["nmr should have (",292],["result should have length 1",279],["def `should have correct MatcherResult` {",261],["def `should have correct negated MatcherResult` {",261],["* for <code>testNames</code> for an example.) The resulting test name must not have been registered previously on",255],["result should have length 2",198]]},{"word":"head","context":[["\"\"\").head",822],["</head>",755],["<head>",733],["case head :: tail =>",418],["statement = rest.head",399],["val addr_env = (cp._1._1, set_addr.head)",260],["val addr_env = set_addr.head",233],["options.head.filters must haveLength(1)",230],[".head",217],["}.head",203]]},{"word":"header","context":[["* @param request The request header.",321],["header.checkStep (req2, response, chain, 1)",266],["header.checkStep (req1, response, chain, 0)",266],[".header(\"Content-Type\", \"application/json\")",172],["serviceMessage.header,",170],["val header = update.header",138],["val header = update.header",138],["header:         Int,",121],["header match {",120],["UpdateMessageSent.header,",111]]},{"word":"headers","context":[[".headers(headers_http_authenticated)",1058],[".headers(headers_http_authenticated))",570],[".headers(headers_http)",285],[".headers(headers_0),",259],[".headers(headers)",224],[".headers(headers)",224],["val headers =",218],[".headers(headers_2),",186],["def apply(body: Any = Unit, headers: Map[String, String] = Map.empty, reason: String = \"\") =",180],["headers: Map[String, String] = Map.empty,",176]]},{"word":"here","context":[["// Add your own project settings here",301],["// Add your project dependencies here,",293],["* Add your spec here.",234],["|    \"stop here\"",213],["* Question: Should we implment this method here, or should it remain abstract",178],["* add your integration spec here.",149],["// I'm returning a ListSet here so that they tests will be run in registration order",129],["// We can't have the ensureTopicExists check here since the controller sends it as an advisory to all brokers so they",111],["* If the field is a {@link ChronoField} then the query is implemented here.",96],["* any ephemeral nodes here.",88]]},{"word":"hi","context":[["def withFixture(test: OneArgTest): Outcome = { test(\"hi\") }",1727],["def withFixture(test: OneArgTest) { test(\"hi\") }",1633],["\"hi there\"",341],["test(\"hi\")",298],["val msg = \"hi there, dude\"",250],["assert(alertList(0).message == \"hi there\")",176],["assert(noteList(0).message == \"hi there\")",176],["s should equal (\"hi\")",125],["a.run(None, Args(SilentReporter, Stopper.default, Filter(), ConfigMap(\"hi\" -> \"there\"), None, new Tracker, Set.empty))",112],["info(\"hi there\")",96]]},{"word":"hmrc","context":[["import uk.gov.hmrc.ct.box._",641],["package uk.gov.hmrc.ct.computations",492],["package uk.gov.hmrc.ct.accounts.frs102.boxes",386],["import uk.gov.hmrc.play.test.{UnitSpec, WithFakeApplication}",352],["import uk.gov.hmrc.ct.accounts.frs102.retriever.Frs102AccountsBoxRetriever",303],["import uk.gov.hmrc.ct.computations.retriever.ComputationsBoxRetriever",282],["import uk.gov.hmrc.play.http.HeaderCarrier",258],["package uk.gov.hmrc.ct.ct600.v3",244],["import uk.gov.hmrc.play.test.UnitSpec",221],["import uk.gov.hmrc.ct.box.{CtBoxIdentifier, CtOptionalInteger, Input}",219]]},{"word":"host","context":[["host: String,",553],["go to (host + \"click.html\")",420],["host,",154],["// we need an ActorSystem to host our application in",134],["* @param master Cluster URL to connect to (e.g. mesos://host:port, spark://host:port, local[4]).",102],["props.put(\"host\", \"localhost\")",102],["* @param master Cluster URL to connect to (e.g. mesos://host:port, spark://host:port, local[4]).",102],["val host = \"localhost\"",91],["val host: String,",90],["host = Some(\"host.mega.corp\"),",84]]},{"word":"href","context":[["* @author <a href=\"http://hiramchirino.com\">Hiram Chirino</a>",494],["<include href=\"src/test/resources/xsd/test-urlxsd.xsd\"/>",446],["* @author <a href=\"mailto:fgwei521@gmail.com\">Fengguo Wei</a>",398],["* @author <a href=\"http://shams.web.rice.edu/\">Shams Imam</a> (shams@rice.edu)",365],["* @author <a href=\"mailto:maxime.colmant@gmail.com\">Maxime Colmant</a>",155],["* @author <a href=\"mailto:sroy@k-state.edu\">Sankardas Roy</a>",135],["// Generated by <a href=\"http://scalaxb.org/\">scalaxb</a>.",127],["* <a href=\"#sharedFixtures\">Shared fixtures</a> section in the main documentation for this trait.",124],["* <a href=\"WebBrowser.html\"><code>WebBrowser</code></a> for an overview of the Selenium DSL.",123],["* @author <a href=\"steffen.krause@soabridge.com\">Steffen Krause</a>",112]]},{"word":"html","context":[["</html>",798],["<html>",746],["* http://www.eclipse.org/legal/epl-v10.html",689],["import views.html._",480],["ref: U[(_ <: dom.html.Element) => _] = undefined,",452],["go to (host + \"click.html\")",420],["contentType = \"text/html\"",337],["package views.html",315],["Ok(views.html.index())",248],["contentType(home) must beSome.which(_ == \"text/html\")",195]]},{"word":"http","context":[["* Network Engine for Objects in Lund AB [http://neotechnology.com]",1841],["import spray.http._",1353],["http://factorie.cs.umass.edu, http://github.com/factorie",1285],["http://factorie.cs.umass.edu, http://github.com/factorie",1285],["import javax.servlet.http.HttpServletRequest",1274],["**  __\\ \\/ /__/ __ |/ /__/ __ |/_// /_\\ \\    http://scala-js.org/       **",1068],["**  __\\ \\/ /__/ __ |/ /__/ __ |    http://scala-lang.org/               **",945],["import io.gatling.http.Predef._",891],["import akka.http.scaladsl.server.Directives._",877],["* See http://www.cra.com or email figaro@cra.com for information.",856]]},{"word":"https","context":[["* See the project homepage at: https://monix.io",820],["<resources base=\"https://test.api.openstack.com\">",786],["val nexus = \"https://oss.sonatype.org/\"",630],["* https://github.com/jeffheaton/aifh",341],["// |______\\__, |\\__,_|\\__,_|_| https://github.com/svenjacobs/equal",261],["*  @https://github.com/scouter-project/scouter",182],["url: https://github.com/kishorereddy/scala-slate",172],["* Original work: SecureSocial (https://github.com/jaliss/securesocial)",120],["* Derivative work: Silhouette (https://github.com/mohiva/play-silhouette)",106],["// from https://github.com/apache/thrift/blob/master/lib/java/src/org/apache/thrift/protocol/TType.java",92]]},{"word":"i","context":[["i += 1",18646],["var i = 0",15521],["var i: Int = 0",1330],["i = i + 1",1215],["i = i + 1",1215],["var i = 1",1018],["i = 0",963],["i -= 1",955],["i",905],["while (i < len) {",863]]},{"word":"id","context":[["id: String,",1564],["id",926],["id,",789],["id: Long,",707],["* @param id",553],["id = id,",551],["id = id,",551],["id: Int,",521],["id: U[String] = undefined,",452],["def id = column[Int](\"id\", O.PrimaryKey, O.AutoInc)",365]]},{"word":"idx","context":[["idx += 1",865],["var idx = 0",639],["idx",132],["override val index: Int = idx",129],["computeTo(sessionId, idx)",90],["if (idx >= 0) {",79],["endIndex = idx",74],["v1(idx) = currTriple; idx += 1",70],["v1(idx) = currTriple; idx += 1",70],["idx: Int,",56]]},{"word":"if","context":[["} // if",2658],["def `should do nothing if valid, else throw a TFE with an appropriate error message` {",1594],["it(\"should do nothing if valid, else throw a TFE with an appropriate error message\") {",1196],["if (set_addr.size > 1) throw new InternalError(\"API heap allocation: Size of env address is \" + set_addr.size)",521],["if (stub != null) {",511],["if (!compareAndSet(current, update))",488],["if (result != null) return",472],["if (value == null) {",420],["if (_passthroughFields == null)",418],["//remove if not needed",407]]},{"word":"ignore","context":[["// ignore",252],["ignore(\"test this\") { fixture =>",180],["ignore(\"test this\") {}",161],["it(\"should ignore a test marked as ignored if run is invoked with that testName\") {",149],["// If I provide a specific testName to run, then it should ignore an Ignore on that test",148],["case _ => // ignore",144],["* to <code>ignore</code> without deleting or commenting out the actual test code. The test will not be executed, but a",128],["* methods <code>test</code> and <code>ignore</code>.",125],["* methods. This method exists to make it easy to ignore an existing test by changing the call to <code>it</code>",124],["ignore(\"test this\", mytags.SlowAsMolasses, mytags.FastAsLight) { fixture => theTestThisCalled = true }",123]]},{"word":"im","context":[["import im.actor.server.db.DbExtension",390],["import im.actor.api.rpc._",356],["import im.actor.server.acl.ACLUtils",169],["import im.actor.server._",166],["import im.actor.server.models",163],["package im.actor.server",151],["import im.actor.server.{ models, persist }",147],["package im.actor.server.api.rpc.service",145],["import im.actor.api.rpc.messaging._",142],["import im.actor.server.db.ActorPostgresDriver.api._",133]]},{"word":"immutable","context":[["import scala.collection.immutable.Seq",1718],["import scala.collection.immutable",1689],["* This instance is immutable and unaffected by this method call.",998],["import scala.collection.immutable.HashMap",841],["import scala.collection.immutable.ListMap",566],["import scala.collection.immutable.Queue",561],["import scala.collection.immutable.HashSet",526],["import scala.collection.immutable.Map",501],["import scala.collection.immutable.List",385],["immutable$Map(",384]]},{"word":"impl","context":[["package impl",1433],["import org.jetbrains.plugins.scala.lang.psi.impl.ScalaPsiElementFactory",803],["import com.mohiva.play.silhouette.impl.providers._",291],["import org.jetbrains.plugins.scala.lang.psi.impl.ScalaPsiManager",240],["import com.mohiva.play.silhouette.impl.authenticators.CookieAuthenticator",166],["import com.mohiva.play.silhouette.impl.daos.DelegableAuthInfoDAO",165],["import org.apache.http.impl.client.DefaultHttpClient",118],["import com.mohiva.play.silhouette.impl.authenticators.JWTAuthenticator",99],["import com.mohiva.play.silhouette.impl.authenticators.SessionAuthenticator",94],["import org.jetbrains.plugins.scala.lang.psi.impl.{ScalaPsiElementFactory, ScalaPsiManager}",92]]},{"word":"implementation","context":[["* @param httpLayer The HTTP layer implementation.",386],["* <p>The default implementation does nothing.</p>",254],["*     Guillaume DUBUISSON DUPLESSIS <guillaume.dubuisson_duplessis@insa-rouen.fr> - initial API and implementation",231],["* @param userService The user service implementation.",155],["* This trait's implementation returns tags that were passed as strings contained in <code>Tag</code> objects passed to",149],["* implementation.",140],["* The main purpose of this method implementation is to render a compiler error an attempt",128],["* <p>The default implementation returns the result of calling",125],["* This trait's implementation of this method is  marked as final. For insight onto why, see the",124],["* @param stateProvider The OAuth2 state provider implementation.",123]]},{"word":"implicit","context":[["implicit val ise = upperCaseStringEquality",2774],["implicit",2293],["def `should use the implicit Equality in scope` {",1594],["implicit request =>",1351],["it(\"should use the implicit Equality in scope\") {",1196],["implicit val formats = DefaultFormats",1174],["(implicit",1053],[")(implicit",902],["implicit val tid = transid()",760],["DB.withConnection { implicit c =>",720]]},{"word":"implicitConversions","context":[["import scala.language.implicitConversions",6306],["import language.implicitConversions",690],["\"-language:implicitConversions\",",188],["import scala.language.{higherKinds, implicitConversions}",133],["import scala.language.{implicitConversions, postfixOps}",129],["import scala.language.{implicitConversions, reflectiveCalls}",91],["import scala.languageFeature.implicitConversions",52],["import scala.language.{implicitConversions, higherKinds}",36],["|import scala.language.implicitConversions",36],["import scala.language.{implicitConversions, existentials}",36]]},{"word":"import","context":[["import scala.concurrent.duration._",18263],["import java.io.File",17855],["import scala.collection.JavaConversions._",15808],["import scala.concurrent.Future",15060],["import scala.collection.JavaConverters._",13821],["import scala.collection.mutable",12078],["import org.junit.runner.RunWith",11532],["import org.scalatest.FunSuite",10421],["import org.scalatest._",9769],["import sbt._",9410]]},{"word":"in","context":[["* Redistribution and use in source and binary forms, with or without",3573],["* supplementary functions or services in addition to those offered by",1872],["* Network Engine for Objects in Lund AB [http://neotechnology.com]",1841],["def `should use the implicit Equality in scope` {",1594],["it(\"should use the implicit Equality in scope\") {",1196],["in match {",925],["in.close()",843],["publishArtifact in Test := false,",777],["\"serialize and deserialize correctly\" in {",758],["in.nextToken()",658]]},{"word":"include","context":[["* These activities include: offering paid services to customers,",539],["<include href=\"src/test/resources/xsd/test-urlxsd.xsd\"/>",446],["it(\"should run only those tests selected by the tags to include and exclude sets\") {",177],["caught.getMessage should include (\"Passed length\")",120],["* because the \"name\" provided to a JUnit <code>org.junit.runner.Description</code> appears to usually include",86],["* bit of behavior required by the system being tested. The test can also include some code that",85],["contentAsString(result) should include(",85],["res should include regex (\"\\\"Status Code\\\" : 0\")",79],["contentAsString(result) should include(\"Please answer this question\")",72],["it(\"should include the comm_id in the message\") {",65]]},{"word":"index","context":[["index += 1",1070],["def index = Action {",880],["var index = 0",800],["*  @param i  the row index",661],["*  @param e  the ending index (exclusive) for the search",516],["index",324],["*  @param j  the column index",275],["Ok(views.html.index())",248],["*  @param e  the ending row index (exclusive) for the search",244],["index: Int,",217]]},{"word":"info","context":[["info(msg)",600],["log.info(",354],["if (cur < info.transformers.length) {",268],["val trans = info.transformers(cur)",224],["* @param loginInfo The linked login info.",187],["info(",182],["logger.info(",174],["info",173],["def testThat(fixture: FixtureParam, info: Informer) { theTestThatCalled = true }",170],["case Some(info) =>",168]]},{"word":"information","context":[["* distributed with this work for additional information",4340],["* See http://www.cra.com or email figaro@cra.com for information.",856],["* For more information, please contact Digimead Team at this",540],["*  For further information, please contact Hanns Holger Rutz at",539],["* or visit www.oracle.com if you need additional information or have any",372],["* @param formatter an optional formatter that provides extra information that can be used by reporters in determining",336],["* For more information, consult the wiki.",260],["*\tFor further information, please contact Hanns Holger Rutz at",209],["* For more information see",197],["* bytefrog: a tracing framework for the JVM. For more information",176]]},{"word":"init","context":[["init()",644],["def init() {",410],["init",316],["def init(): Unit = {",223],["override def init(context: ServletContext) {",185],["def init() = {",180],["import net.minecraft.init.Blocks",178],["def init = {",135],["override def init() {",130],["init,",126]]},{"word":"inject","context":[["import javax.inject.Inject",2351],["import com.google.inject.Inject",1108],["import javax.inject.{Inject, Singleton}",545],["import javax.inject._",394],["import javax.inject.Singleton",364],["users.inject(rampUsers(100) over (1 minutes))",285],["import com.google.inject.AbstractModule",270],["import javax.inject.Named",183],["import com.twitter.inject.Test",182],["import com.google.inject.{Inject, Singleton}",181]]},{"word":"inline","context":[["@inline",8225],["@inline private def bss = GlobalStyles.bootstrapStyles",134],["@inline final",103],["/* Override the inline-styles of the root element.*/",57],["@inline final def none = this := \"none\"",42],["@inline private def med3 (i: Int, j: Int, k: Int): Int =",38],["@inline private def swap (i: Int, j: Int) { val t = a(i); a(i) = a(j); a(j) = t }",38],["@inline final def auto = this := \"auto\"",36],["@inline private def imed3 (rk: Array [Int], i: Int, j: Int, k: Int): Int =",35],["@inline private def iswap (rk: Array [Int], i: Int, j: Int)",35]]},{"word":"input","context":[["val input =",961],["val result = testEval(input)",523],["val t = new Tester(input)",480],["val input = \"\"\"",423],["input: \"null\"",382],["run(input)",370],["input",362],["input: double",285],["input: string",266],["input match {",266]]},{"word":"instance","context":[["* This instance is immutable and unaffected by this method call.",998],["/* instance */",304],["instance",237],["</xf:instance>",174],["* @return the [[JQLite instance]]",170],["/* list of properties in the instance object */",155],["* instance.",145],["xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"",137],["import mesosphere.marathon.core.instance.Instance",128],["* @param clock The clock instance.",121]]},{"word":"int","context":[["output: int",234],["struct S { int x; int y; };",192],["struct S { int x; int y; };",192],["int * foo();",150],["struct T { int x; int y; int z; };",147],["typedef struct { int x; } struct_anonymous;",147],["struct T { int x; int y; int z; };",147],["struct T { int x; int y; int z; };",147],[".value(_.intColumn, row.int)",132],["input: int",104]]},{"word":"intellij","context":[["import com.intellij.openapi.project.Project",1985],["import com.intellij.psi._",1694],["import com.intellij.psi.PsiElement",1303],["import com.intellij.psi.util.PsiTreeUtil",1108],["import com.intellij.lang.ASTNode",1023],["import com.intellij.openapi.editor.Editor",713],["import com.intellij.openapi.util.TextRange",566],["import com.intellij.openapi.application.ApplicationManager",395],["import com.intellij.openapi.util.text.StringUtil",369],["import com.intellij.psi.search.GlobalSearchScope",365]]},{"word":"intercept","context":[["val e1 = intercept[TestFailedException] {",7354],["val caught1 = intercept[TestFailedException] {",6788],["val caught2 = intercept[TestFailedException] {",5192],["val caught3 = intercept[TestFailedException] {",4858],["intercept[TestFailedException] {",4645],["intercept[IllegalArgumentException] {",4388],["val e2 = intercept[TestFailedException] {",3429],["val e1 = intercept[exceptions.NotAllowedException] {",2223],["val caught4 = intercept[TestFailedException] {",1419],["val e = intercept[TestFailedException] {",1269]]},{"word":"internal","context":[["package internal",497],["import org.neo4j.cypher.internal.compiler.v2_3._",376],["import org.neo4j.cypher.internal.compiler.v2_3.test_helpers.CypherFunSuite",348],["package monix.reactive.internal.operators",191],["import org.neo4j.cypher.internal.compiler.v2_3.symbols._",178],["import org.apache.spark.internal.Logging",163],["import org.trustedanalytics.sparktk.frame.internal.rdd.FrameRdd",149],["package org.scalaide.debug.internal.expression",134],["package sbt.internal.util",127],["package monifu.internal.operators",118]]},{"word":"interval","context":[["*                       batching interval",371],["* @param slideDuration  sliding interval of the window (i.e., the interval after which",346],["* @param slideDuration  sliding interval of the window (i.e., the interval after which",346],["*                       DStream's batching interval",321],["eventually(timeout(1000 milliseconds), interval(10 milliseconds)) {",105],["* Save each RDD in `this` DStream as a Hadoop file. The file name at each batch interval is",96],["* @param batchDuration The time interval at which streaming data will be divided into batches",82],["val interval = new Interval(timestamp.minusDays(1), timestamp.plusDays(1))",71],["interval = 60.seconds,",69],["Thread.sleep(interval)",67]]},{"word":"into","context":[["// These are meant to be typed into the REPL. You can also run",150],["\"set into BoundStatement\" in {",93],["* // Unfolding into a Task",91],["val d = ds(mid2) // We index into an array using the same",88],["/** Converts a function into a universally quantified property */",88],["// 1. Parse XML file into Elem",86],["* Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.",85],["*  Ex: Can be used to divide a matrix into a basis and a non-basis.",84],["* Return a new RDD that is reduced into `numPartitions` partitions.",82],["* @param batchDuration The time interval at which streaming data will be divided into batches",82]]},{"word":"io","context":[["import java.io.File",17855],["import java.io._",6140],["import scala.io.Source",5744],["import java.io.IOException",2487],["import java.io.InputStream",1955],["import java.io.PrintWriter",1521],["import org.apache.commons.io.FileUtils",1486],["import com.twitter.io.Buf",1267],["import java.io.FileInputStream",1200],["import java.io.ByteArrayOutputStream",1070]]},{"word":"is","context":[["* This file is part of Neo4j.",1823],["This file is part of \"FACTORIE\" (Factor graphs, Imperative, Extensible)",1389],["* licence, when you create a Related Module, this Related Module is",1268],["* which accompanies this distribution and is available at",1232],["* accompanies this distribution and is available at",1026],["* This instance is immutable and unaffected by this method call.",998],["* which accompanies this distribution, and is available at",935],["* This Source Code Form is subject to the terms of the Mozilla Public",767],[".check(status.is(200)))",656],["* This file is part of Rudder.",604]]},{"word":"isDefined","context":[["if(extraAttributes.isDefined && extraAttributes != null) addJsObjects(props,extraAttributes.get)",339],["assert(!f.isDefined)",292],["assert(task.isDefined)",276],["assert(f.isDefined)",248],["response.isDefined mustEqual true",221],["assert(e.cause.isDefined)",211],["assert(repC.lastEvent.isDefined)",191],["assert(repB.lastEvent.isDefined)",191],["assert(repD.lastEvent.isDefined)",191],["}.isDefined",145]]},{"word":"isEmpty","context":[["def isEmpty: Boolean",457],["*       assert(buffer.isEmpty)",319],["def isEmpty = false",251],["newProgram.script.isEmpty must be (true)",219],["*     assert(buffer.isEmpty)",207],["def isEmpty = true",194],["assert(buffer.isEmpty)",182],["if (propertyList.isEmpty) throw new IllegalStateException(s\"No 'produces' defined for the $url\")",176],["if (isEmpty)",173],["if (as.isEmpty) Nil",171]]},{"word":"isInstanceOf","context":[["assert (req2.contentError.isInstanceOf[Exception])",248],["assert (req1.contentError.isInstanceOf[Exception])",248],["class Fruit { override def equals(o: Any) = o.isInstanceOf[Fruit] }",170],["assert(!rep.eventsReceived.exists(_.isInstanceOf[TestFailed]))",106],["if (field.isInstanceOf[ChronoField]) {",98],["assert(backend.connect().isInstanceOf[java.sql.Connection] )",97],["e.getCause.isInstanceOf[org.openqa.selenium.NoSuchElementException] should be (true)",96],["assert(recordedEvent.isInstanceOf[InfoProvided])",96],["assert(recordedEvent.isInstanceOf[MarkupProvided])",96],["assert(causeThrowable.isInstanceOf[DuplicateTestNameException])",76]]},{"word":"it","context":[["it(\"should do nothing if valid, else throw a TFE with an appropriate error message\") {",1196],["it(\"should use an explicitly provided Equality\") {",1196],["it(\"should use the implicit Equality in scope\") {",1196],["while (it.hasNext) {",755],["it(\"should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value\") {",659],["it should \"work\" in {",441],["* <code>apply</code> method to the current reporter. If invoked in a constructor, it",383],["if (it.hasNext)",281],["it(\"should allow RHS to contain duplicated value\") {",270],["* the current reporter immediately. If invoked at any other time, it will",263]]},{"word":"item","context":[["import net.minecraft.item.ItemStack",945],["import net.minecraft.item.Item",275],["item",273],["* from outside in, and the passed spec text, with one space placed between each item. (See the documenation",248],["item match {",245],["log.fatal(\"Unknown item \" + unknown.getClass())",170],["result.fold(cancel(\"expected result not computed\")) { item =>",152],["item.getItemId match {",130],["import net.minecraft.item.{Item, ItemStack}",127],["</item>",126]]},{"word":"items","context":[["items => {",261],["* of items, as you do not have the option to unsubscribe.",110],["case JSArrayConstr(items) =>",91],["items",89],["items.isDefined shouldBe true",80],["* @return an Observable that emits items that are the results of invoking the selector on items emitted by",70],["* Returns an Observable that emits items that are the results of invoking a specified selector on items",70],["* Returns an Observable that emits items that are the results of invoking a specified selector on items",70],["* @return an Observable that emits items that are the results of invoking the selector on items emitted by",70],["EName(nsOrd, \"items\"),",68]]},{"word":"iter","context":[["while (iter.hasNext) {",1010],["if (iter.hasNext) {",214],["while(iter.hasNext) {",208],["iter",191],["iter += 1",185],["iter.remove()",162],["var iter = 0",145],["iter.next()",143],["iter: Int,",124],["val entry = iter.next()",114]]},{"word":"iterator","context":[["while (iterator.hasNext) {",805],["a.testNames.iterator.toList",216],["b.testNames.iterator.toList",216],["c.testNames.iterator.toList",203],["* iterator will return those names in the order in which the tests were registered. Each test's name is composed",128],[".iterator",117],["while(iterator.hasNext) {",115],["val it = args.iterator",102],["iterator.next()",78],["val (_, n) = iterator.next()",78]]},{"word":"its","context":[["*  * Neither the name of JSR-310 nor the names of its contributors",331],["it(\"should return the correct test count from its expectedTestCount method\") {",193],["* its tests.",128],["* known, it is reverted to its default value; if the field is unknown, it is removed",120],["* Returns a <code>Documenter</code> that during test execution will forward strings passed to its",98],["* We represent a set by its characteristic function, i.e.",90],["* its `contains` predicate.",90],["* Finds a user by its login info.",90],["* Returns an <code>Informer</code> that during test execution will forward strings (and other objects) passed to its",88],["* Returns an <code>Informer</code> that during test execution will forward strings passed to its",79]]},{"word":"j","context":[["j += 1",3062],["var j = 0",2153],["for (j <- b.range2) {",373],["j = 0",358],["import play.core.j.PlayMagicForJava._",317],["*  @param j  the column index",275],["var j = 0;",238],["for (j <- range2) {",226],["j",220],["assert(j.theTestTheOtherCalled)",211]]},{"word":"jackson","context":[["import org.json4s.jackson.JsonMethods._",1416],["import com.fasterxml.jackson.databind.ObjectMapper",774],["import com.fasterxml.jackson.module.scala.DefaultScalaModule",585],["import org.json4s.jackson.Serialization",267],["import com.fasterxml.jackson.databind.JsonNode",215],["import com.fasterxml.jackson.annotation.JsonProperty",188],["import com.fasterxml.jackson.core.JsonGenerator",163],["import com.fasterxml.jackson.core.JsonParseException",151],["import org.json4s.jackson.JsonMethods",141],["import com.fasterxml.jackson.module.scala.experimental.ScalaObjectMapper",133]]},{"word":"java","context":[["import java.io.File",17855],["import java.util.UUID",7625],["import java.util.Date",6599],["import java.io._",6140],["import java.util",4979],["import java.nio.ByteBuffer",4897],["import java.util.concurrent.TimeUnit",4323],["import java.util.Properties",3916],["import java.net.URL",3544],["import java.net.URI",3076]]},{"word":"javax","context":[["import javax.inject.Inject",2351],["import javax.servlet.http.HttpServletRequest",1274],["import javax.imageio.ImageIO",563],["import javax.swing._",555],["import javax.inject.{Inject, Singleton}",545],["import javax.servlet.ServletContext",484],["import javax.inject._",394],["import javax.sql.DataSource",392],["import javax.ws.rs._",386],["import javax.inject.Singleton",364]]},{"word":"jetbrains","context":[["package org.jetbrains.plugins.scala",5764],["import org.jetbrains.plugins.scala.extensions._",1579],["import org.jetbrains.plugins.scala.lang.lexer.ScalaTokenTypes",1189],["import org.jetbrains.plugins.scala.lang.psi.api.expr._",868],["import org.jetbrains.plugins.scala.lang.psi.impl.ScalaPsiElementFactory",803],["import org.jetbrains.plugins.scala.lang.psi.ScalaPsiUtil",744],["import org.jetbrains.plugins.scala.lang.psi.types._",704],["import org.jetbrains.plugins.scala.lang.psi.api.ScalaFile",672],["import org.jetbrains.plugins.scala.lang.psi.api.statements._",521],["import org.jetbrains.plugins.scala.lang.parser.parsing.builder.ScalaPsiBuilder",439]]},{"word":"joda","context":[["import org.joda.time.DateTime",8580],["import org.joda.time._",961],["import org.joda.time.format.DateTimeFormat",932],["import org.joda.time.LocalDate",726],["import org.joda.time.format.ISODateTimeFormat",675],["import org.joda.time.{DateTime, DateTimeZone}",655],["import org.joda.time.DateTimeZone",349],["import org.joda.time.{DateTimeZone, DateTime}",285],["import org.joda.time.LocalDateTime",236],["import org.joda.time.Duration",221]]},{"word":"join","context":[["server.join()",177],["thread.join()",125],["* Perform a left outer join of `this` and `other`. For each element (k, v) in `this`, the",96],["* Perform a right outer join of `this` and `other`. For each element (k, w) in `other`, the",96],["t.join()",92],["Future.join(",76],["/***** start 5 more memcached servers and join the cluster ******/",70],["* (k, v2) is in `other`. Performs a hash join across the cluster.",64],["server.join",63],["\"join tuples with the same key\" in {",60]]},{"word":"js","context":[["@js.native",5665],["import scala.scalajs.js",5558],["import scalajs.js, js.`|`",1311],["import scalajs.js, js.`|`",1311],["@js.annotation.ScalaJSDefined",1291],["**  __\\ \\/ /__/ __ |/ /__/ __ |/_// /_\\ \\    http://scala-js.org/       **",1068],["**     ________ ___   / /  ___      __ ____  Scala.js Test Suite        **",618],["style: U[js.Any] = undefined,",485],["import scala.scalajs.js.annotation.ScalaJSDefined",482],["implicit pos: Position): js.Tree = {",433]]},{"word":"jsaf","context":[["import kr.ac.kaist.jsaf.analysis.typing.AddressManager._",517],["import kr.ac.kaist.jsaf.analysis.typing.domain._",480],["import kr.ac.kaist.jsaf.analysis.typing.models._",466],["import kr.ac.kaist.jsaf.analysis.typing.models.AbsConstValue",335],["import kr.ac.kaist.jsaf.analysis.typing.domain.{BoolFalse => F, BoolTrue => T}",331],["import kr.ac.kaist.jsaf.analysis.typing._",274],["import kr.ac.kaist.jsaf.analysis.typing.domain.Heap",252],["import kr.ac.kaist.jsaf.analysis.typing.domain.Context",252],["import kr.ac.kaist.jsaf.analysis.typing.models.AbsBuiltinFunc",172],["package kr.ac.kaist.jsaf.analysis.typing.models.Tizen",165]]},{"word":"json","context":[["import play.api.libs.json._",6149],["import play.api.libs.json.Json",4321],["import spray.json._",3067],["import net.liftweb.json._",1200],["import play.api.libs.json.JsValue",960],["<representation mediaType=\"application/json\"/>",851],["play.api.libs.json.Json.obj(",812],["case None => play.api.libs.json.Json.obj()",723],["val json =",696],["import play.api.libs.json.JsObject",658]]},{"word":"json4s","context":[["import org.json4s._",2679],["import org.json4s.jackson.JsonMethods._",1416],["import org.json4s.JsonDSL._",1401],["import org.json4s.native.JsonMethods._",597],["// json4s",419],["import org.json4s.DefaultFormats",397],["import org.json4s.JValue",344],["import org.json4s.JsonAST._",274],["import org.json4s.jackson.Serialization",267],["package org.json4s",249]]},{"word":"junit","context":[["import org.junit.runner.RunWith",11532],["import org.scalatest.junit.JUnitRunner",7883],["import org.junit.Test",6088],["import org.junit.Assert._",4383],["import org.junit._",1167],["import org.scalatest.junit.AssertionsForJUnit",791],["import org.scalatest.junit.JUnitSuite",751],["import org.junit.runner._",721],["import junit.framework.Assert._",642],["import org.junit.Assert",497]]},{"word":"k","context":[["k += 1",1009],["var k = 0",749],["case (k, v) =>",497],["for (k <- 0 until 20) {",362],["for (k <- 0 until dim1 if k != i) {",242],["for (k <- 0 until dim1 if k != i) {",242],["*  @param k  how far above the main diagonal, e.g., (-1, 0, 1) for (sub, main, super)",228],["case (k: String, v: String) => Entry(k.toUpperCase, v.toUpperCase)",222],["case (k: String, v: String) => Entry(k.toUpperCase, v.toUpperCase)",222],["k",220]]},{"word":"kafka","context":[["import kafka.utils._",1122],["package kafka.server",705],["import kafka.common.TopicAndPartition",606],["import kafka.message._",538],["import kafka.common._",484],["package kafka.api",459],["import kafka.api._",400],["import kafka.zk.ZooKeeperTestHarness",359],["import kafka.admin.AdminUtils",350],["import kafka.server.KafkaConfig",348]]},{"word":"kaist","context":[["import kr.ac.kaist.jsaf.analysis.typing.AddressManager._",517],["import kr.ac.kaist.jsaf.analysis.typing.domain._",480],["import kr.ac.kaist.jsaf.analysis.typing.models._",466],["import kr.ac.kaist.jsaf.analysis.typing.models.AbsConstValue",335],["import kr.ac.kaist.jsaf.analysis.typing.domain.{BoolFalse => F, BoolTrue => T}",331],["import kr.ac.kaist.jsaf.analysis.typing._",274],["import kr.ac.kaist.jsaf.analysis.typing.domain.Heap",252],["import kr.ac.kaist.jsaf.analysis.typing.domain.Context",252],["import kr.ac.kaist.jsaf.analysis.typing.models.AbsBuiltinFunc",172],["package kr.ac.kaist.jsaf.analysis.typing.models.Tizen",165]]},{"word":"key","context":[["* @param key",660],["key: String,",566],["key: U[String | Int] = undefined,",452],["key match {",386],["key.foreach(v => props.updateDynamic(\"key\")(v))",339],["key.foreach(v => props.updateDynamic(\"key\")(v))",339],["case (key, value) =>",295],["key,",268],["key",198],["\"the key does not exist\" should {",130]]},{"word":"keys","context":[["require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), \"FieldDescriptor does not match message type.\")",172],[".keys",139],["for (key <- keys) {",93],["keyAtPosition = keys(position)",84],["var keyAtPosition = keys(position)",84],["* Return an RDD containing all pairs of elements with matching keys in `this` and `other`. Each",81],["if (nrows != keys.nrows || ncols != keys.ncols)",78],["if (nrows != keys.nrows || ncols != keys.ncols)",78],["override val keys: js.UndefOr[js.Array[String]] = keysOuter",72],["val keys: js.UndefOr[js.Array[String]] = js.undefined",72]]},{"word":"kr","context":[["import kr.ac.kaist.jsaf.analysis.typing.AddressManager._",517],["import kr.ac.kaist.jsaf.analysis.typing.domain._",480],["import kr.ac.kaist.jsaf.analysis.typing.models._",466],["import kr.ac.kaist.jsaf.analysis.typing.models.AbsConstValue",335],["import kr.ac.kaist.jsaf.analysis.typing.domain.{BoolFalse => F, BoolTrue => T}",331],["import kr.ac.kaist.jsaf.analysis.typing._",274],["import kr.ac.kaist.jsaf.analysis.typing.domain.Context",252],["import kr.ac.kaist.jsaf.analysis.typing.domain.Heap",252],["import kr.ac.kaist.jsaf.analysis.typing.models.AbsBuiltinFunc",172],["package kr.ac.kaist.jsaf.analysis.typing.models.Tizen",165]]},{"word":"l","context":[["l match {",889],["val set_addr = lset_env.foldLeft[Set[Address]](Set())((a, l) => a + locToAddr(l))",591],["val set_addr = lset_env.foldLeft[Set[Address]](Set())((a, l) => a + locToAddr(l))",591],["l",498],["case Some(l) =>",201],["case l =>",189],["List(\"-l\", \"SlowTests\"),",149],["case _ => l",145],["Tuple2 (l, u)",132],["collectCutFormulas(l) ++ collectCutFormulas(r)",124]]},{"word":"label","context":[["label: String,",315],["</label>",183],["* @param input RDD of (label, array of features) pairs.",178],["val Label(label) = params[Label]",156],["__elementLabel getOrElse { sys.error(\"missing element label.\") },",131],["label",122],["label match {",112],["label,",111],["label: String",105],["def label: String",86]]},{"word":"lang","context":[["package lang",3070],["import org.jetbrains.plugins.scala.lang.lexer.ScalaTokenTypes",1189],["import com.intellij.lang.ASTNode",1023],[".ofType(classOf[java.lang.Integer])",1023],["**  __\\ \\/ /__/ __ |/ /__/ __ |    http://scala-lang.org/               **",945],["import org.jetbrains.plugins.scala.lang.psi.api.expr._",868],["import org.jetbrains.plugins.scala.lang.psi.impl.ScalaPsiElementFactory",803],["import org.jetbrains.plugins.scala.lang.psi.ScalaPsiUtil",744],["import org.jetbrains.plugins.scala.lang.psi.types._",704],["import org.jetbrains.plugins.scala.lang.psi.api.ScalaFile",672]]},{"word":"language","context":[["import scala.language.implicitConversions",6306],["import scala.language.postfixOps",4928],["import scala.language.reflectiveCalls",2077],["import scala.language.experimental.macros",1886],["import scala.language.higherKinds",1550],["import scala.language.existentials",1156],["import language.implicitConversions",690],["import com.cra.figaro.language._",599],["import language.experimental.macros",397],["import language.higherKinds",395]]},{"word":"last","context":[["*  last column augmented by 1.",190],["assert(repD.lastEvent.get.testName endsWith \"test that\") // last because should be in order of appearance",159],["// the last row of the matrix that this thread processes",107],["last",95],["* it should \"pop values in last-in-first-out order\" in { ... }",84],["* ignore should \"pop values in last-in-first-out order\" in { ... }",84],["last match {",81],["*  @param u  the vector to be concatenated as the new last row in matrix",75],["* The value up to where the zone extends, if undefined the zones stretches to the last value in the series.",72],["val part = Integer.valueOf(topicPartition.split(\"-\").last).intValue",69]]},{"word":"lazy","context":[["lazy val root = Project(",332],["@transient lazy val logger = Logger[this.type]",261],["override lazy val tag = {",251],["lazy val doc = Jsoup.parse(view.body)",231],["lazy val tag = {",215],["lazy val target = setupTarget(None)",179],["lazy val structAnnotations: immutable$Map[String, String] =",159],["override lazy val projectSettings = Seq(",158],["override lazy val settings = super.settings :+ {",151],["lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](",150]]},{"word":"leader","context":[["// wait until leader is elected",96],["scheduler.leader.set(true)",91],["info(\"%d/%d replicas have caught up with the leader for partition %s being reassigned.\"",72],["// refresh leader and isr from zookeeper again",69],["var leader: Option[Int] = None",65],["leader",65],["* Return the leader for each partition.",60],["* Wait until the leader is elected and the metadata is propagated to all brokers.",60],["WaitTestSupport.waitUntil(\"a leader has been elected\", 30.seconds) { marathon.leader().code == 200 }",56],["WaitTestSupport.waitUntil(\"a leader has been elected\", 30.seconds) { marathon.leader().code == 200 }",56]]},{"word":"left","context":[["left,",481],["* <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: left\">",284],["*  @param p  the left cursor",257],["def apply(left: T): MatchResult = {",231],["left",190],["*  The left nullspace of matrix 'a' is the same as the right nullspace of 'a.t'.",190],["*  @param p   the left cursor",187],["def allErrMsg(index: Int, message: String, lineNumber: Int, left: Any): String =",178],["(left, right) match {",174],["*   <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: left\">",169]]},{"word":"len","context":[["while (i < len) {",863],["val len = data.length",229],["check((len: Int) => returnsNormally(new Lengthy(len) should have length (len)))",144],["check((len: Int) => throwsTestFailedException(new Lengthy(len) should have length (len + 1)))",144],["check((len: Int) => throwsTestFailedException(new Sizey(len) should have size (len + 1)))",144],["check((len: Int) => throwsTestFailedException(new Sizey(len) should have size (len + 1)))",144],["check((len: Int) => throwsTestFailedException(new Sizey(len) should have size (len + 1)))",144],["check((len: Int) => returnsNormally(new Sizey(len) should have size (len)))",144],["check((len: Int) => returnsNormally(new Lengthy(len) should have length (len)))",144],["check((len: Int) => throwsTestFailedException(new Lengthy(len) should have length (len + 1)))",144]]},{"word":"length","context":[["for (i <- 0 until resBytes.length) {",634],["var resBytes = Array.ofDim[Byte](rBytes.length)",627],["while (i < length) {",626],["if (args.length == 0) {",402],["require(b.length == a.length, \"Vectors must be the same length!\")",373],["require(b.length == a.length, \"Vectors must be the same length!\")",373],["require(b.length == a.length, \"Vectors must be the same length!\")",373],["length",354],["if (args.length < 2) {",333],["result should have length 3",313]]},{"word":"level","context":[["level = 2,",384],["level = 3,",166],["level match {",163],["assert(e.getMessage === \"An it clause must only appear after a top level subject clause.\")",160],["assert(e.getMessage === \"A they clause must only appear after a top level subject clause.\")",160],["* @param storageLevel  Storage level to use for storing the received objects",129],["level = 1,",125],["level: Int,",114],["* In addition, this trait's implementation will also auto-tag tests with class level annotations.",110],["level += 1",99]]},{"word":"lhs","context":[["(lhs, rhs) match {",614],["lhs match {",144],["case Assign(lhs, rhs) =>",142],["val mr = mt(lhs)",116],["case JSBinaryOp(op, lhs, rhs) =>",90],["case JSUnaryOp(op, lhs) =>",90],["case BinaryOp(op, lhs, rhs) =>",87],["case UnaryOp(op, lhs) =>",87],["val lhs = c.prefix.tree",72],["lhs",67]]},{"word":"li","context":[["</li>",785],["<li>",498],["* @author zepeng.li@gmail.com",182],["* <li><code>stopper</code> - the <code>Stopper</code> passed to this method, or one that wraps and delegates to it</li>",166],["* <li><code>stopper</code> - the <code>Stopper</code> passed to this method, or one that wraps and delegates to it</li>",166],["</a></li>",149],["* </li>",94],["*   </li>",83],["*   to this method</li>",83],["* <li><code>testName</code> - the <code>String</code> value of the <code>testName</code> <code>Option</code> passed",83]]},{"word":"lib","context":[["import org.digimead.digi.lib.log.api.XLoggable",392],["package lib",276],["import org.digimead.digi.lib.aop.log",172],["import org.digimead.digi.lib.api.XDependencyInjection",159],["import org.eclipse.jgit.lib._",155],["import lib.Text._",100],["import org.eclipse.jgit.lib.ObjectId",97],["import org.digimead.digi.lib.DependencyInjection",95],["import org.apache.hadoop.mapreduce.lib.input.FileInputFormat",93],["// from https://github.com/apache/thrift/blob/master/lib/java/src/org/apache/thrift/protocol/TType.java",92]]},{"word":"libraryDependencies","context":[["libraryDependencies ++= Seq(",3788],["libraryDependencies ++= provided(play.api, RM, PRM)",222],["libraryDependencies ++= provided(",183],["libraryDependencies <++= (scalaVersion) { scalaVersion => Seq(",170],["libraryDependencies ++=",161],["libraryDependencies ++= {",108],["libraryDependencies ++= appDependencies,",106],[".settings(libraryDependencies ++=",86],["libraryDependencies ++= jacksonLibs",85],["libraryDependencies ++= testDependencies,",82]]},{"word":"libs","context":[["import play.api.libs.json._",6149],["import play.api.libs.json.Json",4321],["import play.api.libs.functional.syntax._",1600],["import play.api.libs.concurrent.Execution.Implicits.defaultContext",1556],["import play.api.libs.concurrent.Execution.Implicits._",1360],["import play.api.libs.json.JsValue",960],["play.api.libs.json.Json.obj(",812],["case None => play.api.libs.json.Json.obj()",723],["import play.api.libs.json.JsObject",658],["import play.api.libs.iteratee._",612]]},{"word":"liftweb","context":[["import net.liftweb.common._",1874],["import net.liftweb.json._",1200],["package net.liftweb",1060],["import net.liftweb.util.Helpers._",917],["import net.liftweb._",725],["import net.liftweb.util._",700],["import net.liftweb.http._",641],["package net.liftweb {",619],["import _root_.net.liftweb.util._",560],["import net.liftweb.common.Box",426]]},{"word":"lila","context":[["import lila.user.User",326],["import lila.app._",298],["import lila.db.dsl._",292],["import lila.user.{ User, UserRepo }",230],["import lila.common.PimpedJson._",227],["import lila.api.Context",219],["package lila.tournament",217],["import lila.common.PimpedConfig._",193],["package lila.game",177],["import lila.db.api._",174]]},{"word":"limit","context":[["limit: Long = 25,",459],["limit = limit,",263],["limit = limit,",263],["| limit 100",188],["// scalastyle:off line.size.limit",174],["limit: Int",173],["Some(\"limit\" -> limit.toString),",151],["Some(\"limit\" -> limit.toString),",151],["limit: Int,",137],["limit: Option[Int] = None,",133]]},{"word":"linalg","context":[["import breeze.linalg._",1279],["import org.apache.spark.mllib.linalg.Vectors",757],["import breeze.linalg.DenseVector",752],["package breeze.linalg",416],["import org.apache.spark.mllib.linalg.Vector",373],["import breeze.linalg.DenseMatrix",369],["import org.apache.spark.mllib.linalg.{Vector, Vectors}",230],["import org.apache.spark.mllib.linalg._",185],["import breeze.linalg.{DenseMatrix, DenseVector}",151],["import org.apache.spark.mllib.linalg.distributed.RowMatrix",121]]},{"word":"line","context":[["* you must retain the producer line in every report, form or document",540],["val line = Line(1, 1, \"\")",387],["line match {",333],["line",290],["while (line != null) {",258],["for (line <- lines) {",197],["println(line)",175],["// scalastyle:off line.size.limit",174],["line =>",151],["var line: String = null",149]]},{"word":"list","context":[["list",614],["list match {",610],[".list",423],["import scalaz.std.list._",421],["* @param testTags the optional list of tags for this test",316],["* all returns a list of all the valid, known values. We use",218],["* @param xs A list of natural numbers",162],["/* list of properties in the instance object */",155],["props.put(\"metadata.broker.list\", brokerList)",117],["freshRack, // list of tasks register in the cluster",111]]},{"word":"load","context":[["val config = ConfigFactory.load()",526],["val textCaseXml = XML.load(source)",270],[".load()",151],["val conf = ConfigFactory.load()",150],["* val configuration = Configuration.load()",149],["private val config = ConfigFactory.load()",139],["val config = ConfigFactory.load",93],["load()",91],["val conf = ConfigFactory.load(\"test01\")",89],["ConfigFactory.load()",78]]},{"word":"local","context":[["sc = new SparkContext(\"local\", \"test\")",878],["Some(\"releases\"  at nexus + \"service/local/staging/deploy/maven2\")",265],["Some(\"releases\" at nexus + \"service/local/staging/deploy/maven2\")",246],[".setMaster(\"local[*]\")",152],[".setMaster(\"local\")",125],["val output = runInterpreter(\"local\",",115],["* @param master Cluster URL to connect to (e.g. mesos://host:port, spark://host:port, local[4]).",102],["/** Distribute a local Scala collection to form an RDD. */",100],["// A definition of factorial, using a local, tail recursive function",98],["sc = new SparkContext(\"local\", \"test\", conf)",92]]},{"word":"locationtech","context":[["import org.locationtech.geomesa.utils.geotools.SimpleFeatureTypes",683],["import org.locationtech.geomesa.utils.text.WKTUtils",375],["import org.locationtech.geomesa.utils.geotools.RichSimpleFeatureType.RichSimpleFeatureType",359],["import org.locationtech.geomesa.utils.geotools.Conversions._",276],["package org.locationtech.geomesa.accumulo.index",212],["package org.locationtech.geomesa.accumulo.iterators",191],["import org.locationtech.geomesa.features.ScalaSimpleFeature",182],["package org.locationtech.geomesa.accumulo.data",153],["import org.locationtech.geomesa.filter._",123],["import org.locationtech.geomesa.accumulo.data._",119]]},{"word":"log","context":[["val log = LoggerFactory.getLogger(getClass)",453],["import org.digimead.digi.lib.log.api.XLoggable",392],["private[this] val log = LoggerFactory.getLogger(getClass)",391],["log.info(",354],["private[this] val log = Logger.getLogger(getClass.getName)",338],["private val log = LoggerFactory.getLogger(getClass)",336],["log.append(set)",328],["val log = streams.value.log",308],["val log = streams.value.log",308],["package kafka.log",285]]},{"word":"logger","context":[["logger.finest(",640],["logger.debug(\"\", e)",305],["val logger = LoggerFactory.getLogger(getClass)",304],["@transient lazy val logger = Logger[this.type]",261],["logger.error(msg)",239],["if (logger.isDebugEnabled) {",213],["logger.info(",174],["val logger = LoggerFactory.getLogger(this.getClass)",167],["if (logger.isDebugEnabled)",159],["logger.debug(",152]]},{"word":"logging","context":[["import java.util.logging.Logger",877],["import com.twitter.logging.Logger",682],["import java.util.logging.{Level, Logger}",380],["import java.util.logging.Level",346],["import org.scalaide.logging.HasLogger",249],["import org.apache.commons.logging.LogFactory",201],["import org.apache.logging.log4j.{ Logger, LogManager }",152],["import org.apache.logging.log4j._",152],["import org.scalajs.core.tools.logging._",136],["util(\"logging\"),",118]]},{"word":"loop","context":[["loop()",912],["loop {",387],["loop(0)",164],["// ending loop",132],["def loop() {",129],["loop",129],["// Another implementation of `factorial`, this time with a `while` loop",97],["loop.done",96],["loop(this)",78],["def loop(): Unit = {",75]]},{"word":"m","context":[["m",1383],["case Some(m) =>",494],["m match {",411],["*  FIX: remove the 'n = m+1' restriction.",190],["case m =>",187],["if (dim2 != dim1 + 1) flaw (\"nullspace\", \"requires n (columns) = m (rows) + 1\")",174],["sentMessages.zipWithIndex foreach { case (m, i) =>",159],["m =>",148],["for (m <- i.methods) {",136],["// I'm returning a ListSet here so that they tests will be run in registration order",129]]},{"word":"macros","context":[["import scala.language.experimental.macros",1886],["import scala.reflect.macros.blackbox.Context",651],["import scala.reflect.macros.Context",577],["import language.experimental.macros",397],["import chandu0101.macros.tojs.JSMacro",316],["import scala.reflect.macros.blackbox",308],["import scala.reflect.macros.whitebox.Context",292],["import scala.reflect.macros.whitebox",233],["import breeze.macros.expand",157],["import scala.reflect.macros._",139]]},{"word":"main","context":[["def main(args: Array[String]) {",11494],["def main(args: Array[String]): Unit = {",6748],["void main() {",1437],["def main(args: Array[String]) = {",1296],["|  def main(args: Array[String]) {",1041],["test.c: In function 'main':",906],["def main(args : Array[String]) {",410],["val main = play.Project(appName, appVersion, appDependencies).settings(",406],["* in the main documentation for trait <code>FlatSpec</code>.",405],["def main(): Unit = {",304]]},{"word":"make","context":[["vec :+= 99 // Mutate to make sure no other test sees this",288],["buf += 99 // Mutate to make sure no other test sees this",240],["def make(",239],["* generated. We want to make it easy and obvious for users of",217],["// Check to make sure the error message \"short circuits\" (i.e., just reports the left side's failure)",137],["* methods. This method exists to make it easy to ignore an existing test by changing the call to <code>it</code>",124],["// Memoized request function first checks to make sure the cache",108],["// At end of previous describe, buf equaled List(1). Now doing it again to make",88],["* @param end The final bound of the range to make.",69],["* This method just provides syntax sugar intended to make the intent of the code clearer.",65]]},{"word":"manager","context":[["val dummyFile = PsiFileFactory.getInstance(manager.getProject).",360],["package kafka.manager",195],["package kafka.manager.utils",95],["import org.infinispan.manager.DefaultCacheManager",86],["manager.stop()",84],["config.put(kafka.manager.utils.logkafka82.LogConfig.TopicProp, createLogkafkaTopic)",76],["import kafka.manager.features.ClusterFeatures",75],["def manager = IdleManager",63],["val manager = new TaskSetManager(sched, taskSet, MAX_TASK_FAILURES, clock)",58],["import mesosphere.marathon.core.matcher.manager.OfferMatcherManager",57]]},{"word":"map","context":[[".map {",1125],["map",932],["}.map {",644],["} map {",632],["promise.future.map { repo =>",602],["__obj.attributes.toList map {",325],["val authorizedAction = requireAuth(clientData).map { implicit client ⇒",303],["partialMessage.toComplete.map(Right(_)).getOrElse({",296],[".map(_._2)",274],["// create path and map variables",245]]},{"word":"marathon","context":[["package mesosphere.marathon",761],["import mesosphere.marathon.state.PathId._",497],["import mesosphere.marathon.core.task.Task",486],["import mesosphere.marathon.state._",440],["import mesosphere.marathon.metrics.Metrics",394],["import mesosphere.marathon.Protos.MarathonTask",363],["package mesosphere.marathon.state",355],["import mesosphere.marathon.api.v2.json.Formats._",322],["package mesosphere.marathon.api.v2",303],["package mesosphere.marathon.upgrade",261]]},{"word":"match","context":[["value match {",2570],["tree match {",2031],["} match {",1997],["result match {",1883],["this match {",1881],["t match {",1803],["event match {",1411],["e match {",1295],["builder.getTokenType match {",1216],["other match {",1213]]},{"word":"matches","context":[["'matches (false),",316],["'matches (true),",310],["if (result.matches != shouldBeTrue)",109],["matches",88],["if (matcherResult.matches != shouldBeTrue) {",84],["if (result.matches != shouldBeTrue) {",82],["mr.matches shouldBe true",76],["it(\"should throw an assertion error when object length matches and used in a logical-and expression with not\") {",72],["it(\"should do nothing when object size matches and used in a logical-or expression\") {",72],["def `should do nothing if object length matches specified length` {",72]]},{"word":"math","context":[["import scala.math._",1277],["import java.math.BigInteger",679],["import math._",446],["import spire.math._",310],["import java.math.BigDecimal",251],["import scala.math.abs",226],["import spire.math.Rational",207],["import scala.math",204],["import scala.math.BigInt",192],["import scala.math.Ordering",179]]},{"word":"matrix","context":[["*  @param b  the matrix to add (requires leDimensions)",213],["*  The left nullspace of matrix 'a' is the same as the right nullspace of 'a.t'.",190],["*  @param b  the matrix to subtract (requires leDimensions)",182],["if (dim2 != b.dim1) flaw (\"*\", \"matrix * matrix - incompatible cross dimensions\")",175],["if (dim2 != b.dim1) flaw (\"*\", \"matrix * matrix - incompatible cross dimensions\")",175],["*  @param b  the matrix to multiply by (requires sameCrossDimensions)",139],["*  @param u  the upper triangular matrix",130],["*  @param p  the size of identity matrix Ip",124],["*  @param col   the column to extract from the matrix",121],["*  @param q  the size of identity matrix Iq",117]]},{"word":"max","context":[["} // max",206],["max",195],["import scala.math.max",173],["* @author max talanov",75],["var max = 0.0",69],["}.max",66],["val (j, l) = (math.max (-k, 0), math.min (dim1-k, dim1))",66],["var max = Double.MinValue",64],[".check(headerRegex(\"Cache-Control\", \"max-age=864000, public\")))",63],["assert(max(List(3, 7, 2)) === 7)",62]]},{"word":"mesosphere","context":[["package mesosphere.marathon",761],["import mesosphere.marathon.state.PathId._",497],["import mesosphere.marathon.core.task.Task",486],["import mesosphere.marathon.state._",440],["import mesosphere.marathon.metrics.Metrics",394],["import mesosphere.marathon.Protos.MarathonTask",363],["package mesosphere.marathon.state",355],["import mesosphere.marathon.api.v2.json.Formats._",322],["package mesosphere.marathon.api.v2",303],["import mesosphere.mesos.protos.Implicits._",272]]},{"word":"message","context":[["def `should do nothing if valid, else throw a TFE with an appropriate error message` {",1594],["def `should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value` {",1302],["it(\"should do nothing if valid, else throw a TFE with an appropriate error message\") {",1196],["e.message should be (",824],["it(\"should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value\") {",659],["message: String,",631],["e1.message should be (Some(\"'all' inspection failed, because: \\n\" +",610],["import kafka.message._",538],["message match {",531],["case message =>",435]]},{"word":"messages","context":[["messages",224],["// send some messages to each broker",195],["assertMatches(messages(code)) {",165],["override def validate(name: String, value: String, messages: Messages): Option[String] =",146],["* @param messagesApi The Play messages API.",134],["// send some messages",126],["val messages = configureMessageReader(handle)",118],["* The error messages.",102],["override def validate(name: String, value: String, messages: Messages): Option[String] = {",98],["messages.clear()",93]]},{"word":"meta","context":[["import scala.meta._",480],["import scala.meta.dialects.Scala211",382],["package scala.meta",377],["val meta = Http(req)",247],["val resp = meta()",247],["import scala.annotation.meta.field",186],["import djinni.meta._",153],["import scala.slick.jdbc.meta.MTable",134],["import slick.jdbc.meta.MTable",126],["</meta>",112]]},{"word":"metadata","context":[["import com.ligadata.kamanja.metadata._",174],["props.put(\"metadata.broker.list\", brokerList)",117],["metadata,",74],["import org.beangle.commons.entity.metadata.Model",66],["// wait until the update metadata request for new topic reaches all servers",63],["* Wait until the leader is elected and the metadata is propagated to all brokers.",60],["val metadata = DefaultParamsReader.loadMetadata(path, sc, className)",60],["assertEquals(\"Expecting metadata for 1 partition\", 1, partitionMetadata.size)",57],["DefaultParamsReader.getAndSetParams(model, metadata)",56],["import com.ligadata.kamanja.metadata.MdMgr._",55]]},{"word":"method","context":[["* This method enables the following syntax:",3913],["</method>",2285],["<method name=\"POST\">",1293],["* This method enables syntax such as the following:",1148],["* This method supports syntax such as the following:",1004],["* This instance is immutable and unaffected by this method call.",998],["* This method enables the following syntax given a <code>MatcherFactory$arity$</code>:",668],["* For example, this method supports syntax such as the following:",501],["<method name=\"GET\"/>",490],["<method name=\"PUT\">",459]]},{"word":"methods","context":[["* The following methods are already implemented",209],["import org.apache.http.client.methods.HttpGet",144],["for (m <- i.methods) {",136],["* methods. The name of the test will be a concatenation of the text of all surrounding describers,",129],["* methods <code>test</code> and <code>ignore</code>.",125],["* methods. This method exists to make it easy to ignore an existing test by changing the call to <code>it</code>",124],["import org.apache.http.client.methods.HttpPost",109],["* This class is used in conjunction with an implicit conversion to enable <code>should</code> methods to",100],["* to enable <code>should</code> methods to be invokable on that object.",99],["* All factory methods throw <code>NullPointerException</code> if any of the passed values are <code>null</code>.",84]]},{"word":"metrics","context":[["import com.codahale.metrics.MetricRegistry",548],["import mesosphere.marathon.metrics.Metrics",394],["import com.yammer.metrics.core.Gauge",336],["import kafka.metrics.KafkaMetricsGroup",333],["import com.codahale.metrics.annotation.Timed",172],["metrics,",142],["metrics",137],["import org.apache.kafka.common.metrics.Metrics",137],["metrics: Metrics,",128],["implicit val metrics = new Metrics(new MetricRegistry)",123]]},{"word":"minecraft","context":[["import net.minecraft.item.ItemStack",945],["import net.minecraft.entity.player.EntityPlayer",929],["import net.minecraft.world.World",850],["import net.minecraft.block.Block",563],["import net.minecraft.nbt.NBTTagCompound",484],["import net.minecraft.tileentity.TileEntity",407],["import net.minecraft.client.Minecraft",334],["import net.minecraft.item.Item",275],["import net.minecraft.block.material.Material",272],["import net.minecraft.entity.Entity",265]]},{"word":"mkString","context":[["}.mkString(\"\\n\")",498],["}.mkString",248],["}.mkString(\", \")",227],[").mkString(\"\\n\")",214],["}.mkString(\",\")",198],["}).mkString(\"\\n\")",147],[".mkString(\"\\n\")",130],[".mkString",123],["if (BuildConfig.DEBUG) Log.d(TAG, cmd.mkString(\" \"))",105],["}.mkString(\"\")",102]]},{"word":"mllib","context":[["import org.apache.spark.mllib.regression.LabeledPoint",896],["import org.apache.spark.mllib.linalg.Vectors",757],["import org.apache.spark.mllib.linalg.Vector",373],["import org.apache.spark.mllib.util.MLUtils",347],["import org.apache.spark.mllib.linalg.{Vector, Vectors}",230],["package org.apache.spark.examples.mllib",216],["import org.apache.spark.mllib.linalg._",185],["import org.apache.spark.mllib.util.MLlibTestSparkContext",182],["import org.apache.spark.mllib.evaluation.BinaryClassificationMetrics",123],["import org.apache.spark.mllib.linalg.distributed.RowMatrix",121]]},{"word":"mock","context":[["import org.scalatest.mock.MockitoSugar",3559],["import org.specs2.mock.Mockito",1192],["val protocol = mock[TProtocol]",407],["import org.specs.mock.Mockito",348],["val response = mock[WSResponse]",317],["val extraArguments = Seq(mock[JDIRequestArgument])",309],["* You can mock out a whole application including requests, plugins etc.",261],["val requestHolder = mock[WSRequest]",230],["val storage = mock[Storage]",201],["val driver = mock[SchedulerDriver]",193]]},{"word":"mockito","context":[["import org.mockito.Mockito._",2720],["import org.mockito.Matchers._",965],["import org.mockito.Mockito",451],["import org.mockito.Matchers",433],["import org.mockito.invocation.InvocationOnMock",375],["import org.mockito.Matchers.any",370],["import org.mockito.stubbing.Answer",365],["import org.mockito.Mockito.when",337],["import org.mockito.ArgumentCaptor",232],["import org.scalatest.mockito.MockitoSugar",179]]},{"word":"mode","context":[["mode match {",482],["mode: Mode,",122],[".mode(SaveMode.Overwrite)",92],["mode: SaveMode,",88],["def runStats(conf: Config, mode: Mode, cache: EvalCache)(implicit cec: ConcurrentExecutionContext) =",82],["mode = Mode.RO",80],["|      \"mode\": \"RW\"",80],["override def createTap(readOrWrite: AccessMode)(implicit mode: Mode): Tap[_, _, _] = {",66],[".mode(SaveMode.Append)",64],["if (ctx.mode is Mode.Type)",58]]},{"word":"model","context":[["package model",1129],["import model._",582],["model",515],["import akka.http.scaladsl.model._",506],["import akka.http.scaladsl.model.StatusCodes._",340],["import akka.http.scaladsl.model.StatusCodes",324],["import hmda.model.fi.lar.LoanApplicationRegister",253],["model,",206],["package io.swagger.client.model",193],["import rpgboss.model._",188]]},{"word":"models","context":[["package models",3595],["import models._",2342],["import models.User",768],["import kr.ac.kaist.jsaf.analysis.typing.models._",466],["import kr.ac.kaist.jsaf.analysis.typing.models.AbsConstValue",335],["package models.daos",249],["import collins.models.Asset",176],["import kr.ac.kaist.jsaf.analysis.typing.models.AbsBuiltinFunc",172],["package kr.ac.kaist.jsaf.analysis.typing.models.Tizen",165],["import im.actor.server.models",163]]},{"word":"modify","context":[["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",2556],["* use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of",287],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",260],["* use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies",224],["* copy, modify, merge, publish, distribute, sublicense, and/or sell",180],["* to modify lift's environment",175],["// test direct sorting (will modify the data array)",143],["// test indirect sorting (will not modify the data array)",143],["* modify, merge, publish, distribute, sublicense, and/or sell copies",112],["// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",100]]},{"word":"module","context":[["import com.fasterxml.jackson.module.scala.DefaultScalaModule",585],["import com.intellij.openapi.module.Module",196],["def module[Req, Rep]: Stackable[ServiceFactory[Req, Rep]] =",188],["import com.fasterxml.jackson.module.scala.experimental.ScalaObjectMapper",133],["import com.fasterxml.jackson.databind.module.SimpleModule",115],["val module = new AbstractModule with ScalaModule {",86],["import com.esofthead.mycollab.module.user.domain.SimpleUser",77],["<exclude module=\"jmxri\"/>",76],["<exclude module=\"jms\"/>",76],["<exclude module=\"jmxtools\"/>",76]]},{"word":"more","context":[["* For more information, please contact Digimead Team at this",540],["* more details.",387],["* more details.                                                               *",352],["* For more information, consult the wiki.",260],["* For more information see",197],["*  FIX: need a more robust algorithm for computing nullspace (@see Fac_QR.scala).",190],["* bytefrog: a tracing framework for the JVM. For more information",176],["* Type :help for more information.",140],["// And more",119],["* Code Pulse: A real-time code coverage testing tool. For more information",106]]},{"word":"msg","context":[["msg match {",1011],["info(msg)",600],["override def process(msg: AnyRef) {",498],["println(msg)",404],["case msg =>",312],["msg",305],["val msg =",258],["val msg = \"hi there, dude\"",250],["logger.error(msg)",239],["* @param msg",123]]},{"word":"must","context":[["status(result) must equalTo(OK)",561],["* you must retain the producer line in every report, form or document",540],["* of this program must display Appropriate Legal Notices, as required under",540],["assert(statement._2.namespace._1 == gaapNS, \"Concept must belong to gaap namespace\")",389],["tree.errors must beEmpty",377],["require(b.length == a.length, \"Vectors must be the same length!\")",373],["* @param windowDuration width of the window; must be a multiple of this DStream's",371],["*                       the new DStream will generate RDDs); must be a multiple of this",321],["contentAsString(result) must equalTo(\"\")",292],["options must haveLength(1)",287]]},{"word":"mustEqual","context":[["testContext.run(q).string mustEqual",361],["tree.provenance mustEqual NullProvenance",247],["response.isDefined mustEqual true",221],["tree.errors mustEqual Set(OperationOnUnrelatedSets)",166],["decoded.asScala mustEqual orig",126],["stmt\"${(q.ast: Ast).token}\" mustEqual",123],["status(result) mustEqual BAD_REQUEST",105],["actual mustEqual expected",102],["status(result) mustEqual OK",102],["res.successful mustEqual true",98]]},{"word":"mutable","context":[["import scala.collection.mutable",12078],["import scala.collection.mutable.ArrayBuffer",7092],["import org.specs2.mutable.Specification",6153],["import scala.collection.mutable.ListBuffer",4804],["import org.specs2.mutable._",4558],["import scala.collection.mutable.HashMap",2382],["import collection.mutable",1419],["import scala.collection.mutable.Map",1265],["import scala.collection.mutable.Buffer",929],["import collection.mutable.ListBuffer",854]]},{"word":"mvc","context":[["import play.api.mvc._",5405],["import play.api.mvc.{Action, Controller}",722],["import play.api.mvc.Action",627],["import play.api.mvc.Results._",592],["import play.api.mvc.Controller",565],["import play.api.mvc.RequestHeader",540],["import play.api.mvc.Result",390],["import play.mvc._",335],["import play.api.mvc.Request",328],["import play.mvc.Http.Context.Implicit._",320]]},{"word":"mytags","context":[["\"test that\" taggedAs(mytags.SlowAsMolasses) in { fixture => theTestThatCalled = true }",161],["ignore(\"test this\", mytags.SlowAsMolasses, mytags.FastAsLight) { fixture => theTestThisCalled = true }",123],["ignore(\"test this\", mytags.SlowAsMolasses, mytags.FastAsLight) { fixture => theTestThisCalled = true }",123],["\"test that\" taggedAs(mytags.SlowAsMolasses) in { theTestThatCalled = true }",105],["\"test this\" taggedAs(mytags.SlowAsMolasses, mytags.WeakAsAKitten) is (pending)",98],["\"test this\" taggedAs(mytags.SlowAsMolasses, mytags.WeakAsAKitten) is (pending)",98],["\"test this\" taggedAs(mytags.SlowAsMolasses, mytags.FastAsLight) in { fixture => theTestThisCalled = true }",92],["\"test this\" taggedAs(mytags.SlowAsMolasses, mytags.FastAsLight) in { fixture => theTestThisCalled = true }",92],["ignore(\"test this\", mytags.SlowAsMolasses, mytags.FastAsLight) { theTestThisCalled = true }",84],["registerTest(\"test that\", mytags.SlowAsMolasses) { theTestThatCalled = true }",84]]},{"word":"n","context":[["while (i < n) {",836],["n",825],["n match {",676],["fast\"Hello, World!${start}blahblah$i${p1}\\n${p2}blahblah\" ->",640],["e1.message should be (Some(\"'all' inspection failed, because: \\n\" +",610],["n += 1",604],["var n = 0",553],["}.mkString(\"\\n\")",498],["\"\"\".stripMargin.replaceAll(\"\\n\", \" \"))",430],["case n =>",416]]},{"word":"name","context":[["name: String,",4715],["def name: String",1791],["name",1302],["<method name=\"POST\">",1293],["name,",1234],["val name: String",758],["name match {",741],["val name: String,",700],["name = name,",557],["name = name,",557]]},{"word":"names","context":[["*  o Neither the name of AIOTrade Computing Co. nor the names of",414],["*  * Neither the name of JSR-310 nor the names of its contributors",331],["* iterator will return those names in the order in which the tests were registered. Each test's name is composed",128],["names",119],["import tiny.names.Name",86],["* * Neither the name of the authors nor the names of their",85],["* Neither the name \"<PRODUCT NAME>\" nor the names of its contributors",73],["*  Neither the name of the project \"Reachability\" nor the names of its",70],["it(\"should return the test names in order of registration from testNames\") {",69],["*   Neither the name of the Radboud University Nijmegen nor the names of its",61]]},{"word":"native","context":[["@js.native",5665],["@native",646],["import org.json4s.native.JsonMethods._",597],["import org.json4s.native.Serialization",242],["import org.json4s.native.Serialization.write",154],["import org.json4s.native.Serialization._",133],["var name: String = js.native",79],["import org.json4s.native.JsonMethods.parse",74],["import org.json4s.native.Serialization.read",73],["var y: Double = js.native",72]]},{"word":"need","context":[["* or visit www.oracle.com if you need additional information or have any",372],["*  FIX: need a more robust algorithm for computing nullspace (@see Fac_QR.scala).",190],["// we need an ActorSystem to host our application in",134],["* constructs. You might need to define an auxiliary method.",81],["* need to be able to say which of two tweets is larger, or if they are equal). In",70],["* If the fixture you want to pass into your tests consists of multiple objects, you will need to combine",68],["* need not necessarily correspond to one class. Nevertheless, it most cases each suite will correspond",65],["* `Lists` that need to be implemented as part of this assignment. A test",62],["* to <code>Builder</code>, you need only switch the order you mix them together, like this:",62],["* To run this on your local machine, you need to first run a Netcat server",59]]},{"word":"net","context":[["import java.net.URL",3544],["import java.net.URI",3076],["import java.net.InetSocketAddress",2570],["import net.liftweb.common._",1874],["import java.net.InetAddress",1356],["import net.liftweb.json._",1200],["package net.liftweb",1060],["import net.minecraft.item.ItemStack",945],["import net.minecraft.entity.player.EntityPlayer",929],["import net.liftweb.util.Helpers._",917]]},{"word":"netty","context":[["import org.jboss.netty.buffer.ChannelBuffer",606],["import org.jboss.netty.channel._",480],["import org.jboss.netty.handler.codec.http._",433],["import io.netty.buffer.ByteBuf",429],["import org.jboss.netty.buffer.ChannelBuffers",394],["import org.jboss.netty.buffer.{ChannelBuffer, ChannelBuffers}",318],["import io.netty.channel._",230],["import io.netty.channel.nio.NioEventLoopGroup",165],["import io.netty.channel.socket.SocketChannel",161],["import io.netty.buffer.Unpooled",156]]},{"word":"new","context":[["val rep = new EventRecordingReporter",2459],["val sc = new SparkContext(conf)",2072],["val f = new Fixture",1701],["val props = new Properties()",1495],["throw new IllegalArgumentException(",1220],["val sb = new StringBuilder",1196],["val conf = new SparkConf()",1023],["val spec = new MySpec",997],["val reporter = new EventRecordingReporter",977],["throw new UnsupportedOperationException",927]]},{"word":"next","context":[["next()",649],["next",511],["def next() = {",459],["def next = {",348],["val sameRecord = dataFileReader.next()",264],["val result = ri.next()",249],["next match {",245],["while (rs.next()) {",171],["override def next() = {",150],["iter.next()",143]]},{"word":"nio","context":[["import java.nio.ByteBuffer",4897],["import java.nio.charset.Charset",1952],["import java.nio.file.Path",1084],["import java.nio.charset.StandardCharsets",1071],["import java.nio.file.Paths",841],["import java.nio.file.Files",763],["import java.nio._",567],["import java.nio.file._",385],["import java.nio.channels._",373],["import java.nio.file.{Files, Paths}",354]]},{"word":"no","context":[["* Federal Ministry of Education and Research (grant no. 17N4409).",338],["vec :+= 99 // Mutate to make sure no other test sees this",288],["buf += 99 // Mutate to make sure no other test sees this",240],["* @throws IllegalArgumentException if <code>testName</code> is defined, but no test with the specified test name",151],["* Contact: SINTEF ICT <nicolas.ferry@sintef.no>",146],["\"TestScheduler should have no pending tasks\")",130],["it(\"should throw an exception if there is no underlying profile\") {",122],["* Register a test with the given spec text, optional tags, and test function value that takes no arguments.",121],["// no function",118],[".check(headerRegex(\"Cache-Control\", \"no-cache\")))",105]]},{"word":"node","context":[["node match {",865],["node",609],["override def getInsList(node: Node): List[(String, PropValue)] = node match {",130],["override def getInsList(node: Node): List[(String, PropValue)] = node match {",130],["def this(node: ASTNode) = {this(null, null, node)}",128],["def this(node: ASTNode) = {this(null, null, node)}",128],["// update config data node, which triggers the pool update",126],["scala.collection.immutable.ListMap((node match {",125],["* @param node",125],["case Some(node) =>",124]]},{"word":"nodes","context":[["import com.normation.rudder.domain.nodes.NodeInfo",153],["import org.jsoup.nodes.Element",151],["import kr.ac.kaist.jsaf.scala_src.nodes._",149],["clusterClient.nodes returns nodeSet",145],["import org.jsoup.nodes.Document",142],["import com.normation.rudder.domain.nodes.NodeGroupId",130],["import es.weso.rdf.nodes._",124],["import kr.ac.kaist.jsaf.nodes._",108],["import com.normation.rudder.domain.nodes._",107],["import com.normation.rudder.domain.nodes.NodeGroup",102]]},{"word":"non","context":[["* Checks that all required fields are non-null.",167],["\"non-empty errors\" |: (errors.nonEmpty ?= true),",88],["*     Given a non-empty stack",85],["*  Ex: Can be used to divide a matrix into a basis and a non-basis.",84],["* binary, for any purpose, commercial or non-commercial, and by any",81],["* Note that only non-bottom states are included in the map, which means empty map is returned",72],["case _ => throw new RuntimeException(\"Got a non-SpecReport\")",69],["/** Check whether 'this' matrix is bidiagonal (has non-zreo elements only in",60],["* Mark the RDD as non-persistent, and remove all blocks for it from memory and disk.",55],["/* (non-Javadoc)",55]]},{"word":"nonEmpty","context":[[".filter(_.nonEmpty)",122],["\"non-empty errors\" |: (errors.nonEmpty ?= true),",88],["require( s.nonEmpty, \"Unary rule needs at least one sequent for lookup!\" )",70],["if (keys.nonEmpty) {",68],["result.list.nonEmpty",65],["if (_passthroughFields.nonEmpty) {",64],["def nonEmpty: Boolean = !isEmpty",62],["if (result.failures.nonEmpty) {",59],["while (rest.nonEmpty) {",56],["if (errors.nonEmpty) {",54]]},{"word":"normation","context":[["import com.normation.inventory.domain.NodeId",519],["import com.normation.eventlog.ModificationId",427],["import com.normation.utils.HashcodeCaching",394],["import com.normation.eventlog.EventActor",289],["import com.normation.utils.StringUuidGenerator",281],["import com.normation.rudder.domain.policies._",259],["import com.normation.rudder.domain.policies.RuleId",240],["import com.normation.rudder.repository._",228],["import com.normation.rudder.domain.policies.DirectiveId",213],["import com.normation.cfclerk.domain._",191]]},{"word":"not","context":[["* Automatically generated file. Please do not edit.",1311],["and not((CONFIG_X86_LOCAL_APIC and CONFIG_NEED_MULTIPLE_NODES)",423],["//remove if not needed",407],["* along with Kiama.  (See files COPYING and COPYING.LESSER.)  If not, see",317],["and CONFIG_X86_LOCAL_APIC and not(CONFIG_NEED_MULTIPLE_NODES)",307],["* for <code>testNames</code> for an example.) The resulting test name must not have been registered previously on",255],["break //todo: break is not supported",236],["// An Ignored test that was both included and excluded should not generate a TestIgnored event",225],["// An Ignored test that was not included should not generate a TestIgnored event",225],["// An Ignored test that was not included should not generate a TestIgnored event",225]]},{"word":"nothing","context":[["def `should do nothing if valid, else throw a TFE with an appropriate error message` {",1594],["it(\"should do nothing if valid, else throw a TFE with an appropriate error message\") {",1196],["\"should do nothing if valid, else throw a TFE with an appropriate error message\" in {",286],["* <p>The default implementation does nothing.</p>",254],["case _ => // do nothing",253],["// do nothing",238],["case _ => //do nothing",135],["//do nothing",122],["// Do nothing",118],["it(\"should do nothing when RHS contain duplicated value\") {",114]]},{"word":"now","context":[["val now = System.currentTimeMillis()",360],["val now = System.currentTimeMillis",298],["val now = DateTime.now",209],["val now = DateTime.now",209],["val now = new DateTime",132],["timestamp: String = Timestamp.now().toString)",120],["val now = Time.now",113],["val now = Time.now",113],["val now = DateTime.now()",106],["val now = DateTime.now()",106]]},{"word":"null","context":[["null",8073],["null,",4174],["case _ => null",2374],["null, //",2242],["return null",1926],["case null =>",1244],["else null",873],["case null => None",704],["case null => null",671],["case null => null",671]]},{"word":"number","context":[["number += 1",405],["// scalastyle:off magic.number",214],["*        number of milliseconds since the standard base time known as \"the epoch\":  January 1, 1970, 00:00:00 GMT",166],["var number = 0",154],["//scalastyle:off magic.number",146],["*  @param stream  the random number stream",127],["case None => fail(\"Didn't produce a file name and line number string: \", caught)",109],["// validate the total number of query-hits",108],["// Exercise 1: Write a function to compute the nth fibonacci number",96],["number: Int,",88]]},{"word":"o","context":[["o match {",668],["*  o Neither the name of AIOTrade Computing Co. nor the names of",414],["override def equals(o: Any) = o match {",320],["override def equals(o: Any) = o match {",320],["o",257],["Sample(o, count(sourceCount), sum(sourceCount), Zero, Zero)",207],["case o: ScObject =>",177],["class Fruit { override def equals(o: Any) = o.isInstanceOf[Fruit] }",170],["class Fruit { override def equals(o: Any) = o.isInstanceOf[Fruit] }",170],["override def equals(o: Any): Boolean = o match {",163]]},{"word":"obj","context":[["Json.obj(",2456],["obj match {",947],["play.api.libs.json.Json.obj(",812],["case None => play.api.libs.json.Json.obj()",723],["obj",436],["obj(",315],["override def equals(obj: Any): Boolean = {",285],["val resolved = resolve(obj)",216],["val pckl = obj.pickle",203],["Ok(Json.obj(",192]]},{"word":"object","context":[["object Test {",2134],["object Main {",1680],["object Dependencies {",1241],["object Main extends App {",1221],["object Test extends dotty.runtime.LegacyApp {",832],["object Application extends Controller {",779],["object ApplicationBuild extends Build {",701],["object Implicits {",600],["object Solution {",580],["* The interactive user interfaces in modified source and object code versions",539]]},{"word":"of","context":[["* documentation that, without modification of the Source Code, enables",1872],["* Notwithstanding to the terms of section 5 (5. Conveying Modified Source",1872],["* In accordance with the terms of section 7 (7. Additional Terms.) of",1872],["* A \"Related Module\" means a set of sources files including their",1872],["* In accordance with the terms of section 7 (7. Additional Terms.) of",1872],["* This file is part of Neo4j.",1823],["This file is part of \"FACTORIE\" (Factor graphs, Imperative, Extensible)",1389],["* This Source Code Form is subject to the terms of the Mozilla Public",767],["* This file is part of Rudder.",604],["* disclosing the source code of your own applications.",540]]},{"word":"off","context":[["// scalastyle:off println",784],["// scalastyle:off",635],["// $example off$",537],["// scalastyle:off magic.number",214],["// scalastyle:off line.size.limit",174],["// scalastyle:off null",162],["//scalastyle:off magic.number",146],["//scalastyle:off",122],["off += 1",97],["val off = Mat.oneBased",95]]},{"word":"offset","context":[["var offset = 0",445],["offset += 1",359],["offset: Long = 0",267],["offset: Long = 0,",222],["val offset = editor.getCaretModel.getOffset",197],["var aoff = a.offset",194],["offset",192],["offset = offset",148],["offset = offset",148],["offset: Int,",132]]},{"word":"on","context":[["// scalastyle:on println",767],["// scalastyle:on",620],["// $example on$",536],["* @throws TestRegistrationClosedException if invoked after <code>run</code> has been invoked on this suite",350],[").on(",325],["assert(e.getMessage == \"on purpose\")",270],["// create my cluster client solely based on a zk client and a path",258],["* for <code>testNames</code> for an example.) The resulting test name must not have been registered previously on",255],["* Spectrum Finance is based in part on:",234],["\"\"\").on(",200]]},{"word":"once","context":[[".returning(expected).once()",437],[".returning(Nil).once()",243],[".once()",220],["(mockProfileManager.retrieve _).expects(*).returning(None).once()",165],[".returning(Some(mockDebugProfile)).once()",161],[".returning(false).once()",160],["// scala -Xnojline < repl-session.scala to run them all at once.",149],[").returning(expected).once()",125],[".returning(requests).once()",108],[".returning(true).once()",97]]},{"word":"one","context":[["when(\"one is subracted from the other\")",253],["* from outside in, and the passed spec text, with one space placed between each item. (See the documenation",248],["// SlowAsMolasses is included, one test should be excluded",225],["// SlowAsMolasses is included. both tests should be included but one ignored",225],["it(\"should execute one test when run is called with a defined testName\") {",193],["* @param testName an optional name of one test to run. If <code>None</code>, all relevant tests should be run.",193],["* <li><code>stopper</code> - the <code>Stopper</code> passed to this method, or one that wraps and delegates to it</li>",166],["* @param testName the name of one test to execute.",151],["* This method will register the test for later execution via an invocation of one of the <code>execute</code>",145],["* This method will register the test for later ignoring via an invocation of one of the <code>execute</code>",134]]},{"word":"only","context":[["// Scala (test only)",222],["it(\"should run only those tests selected by the tags to include and exclude sets\") {",177],["assert(e.getMessage === \"An it clause must only appear after a top level subject clause.\")",160],["assert(e.getMessage === \"A they clause must only appear after a top level subject clause.\")",160],["// ensureTopicExists is only for client facing requests",114],["* Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.",112],["* Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.",112],["// the HttpService trait defines only one abstract member, which",100],["// that they only have one implementation! Here's an example:",96],["// this actor only runs our route, but you could add",92]]},{"word":"op","context":[["op match {",573],["op",232],["val generatedCode = cleanString(codeGenerator.emitNode(op))",137],["val op = (for {",136],["op(repr, b)",112],["try { op(p) } finally { p.close() }",91],["case JSBinaryOp(op, lhs, rhs) =>",90],["case JSUnaryOp(op, lhs) =>",90],["case BinaryOp(op, lhs, rhs) =>",87],["case UnaryOp(op, lhs) =>",87]]},{"word":"openapi","context":[["import com.intellij.openapi.project.Project",1985],["import com.intellij.openapi.editor.Editor",713],["import com.intellij.openapi.util.TextRange",566],["import com.intellij.openapi.application.ApplicationManager",395],["import com.intellij.openapi.util.text.StringUtil",369],["import com.intellij.openapi.progress.ProgressManager",305],["import com.intellij.openapi.util.io.FileUtil",269],["import com.intellij.openapi.vfs.VirtualFile",228],["import com.intellij.openapi.diagnostic.Logger",219],["import com.intellij.openapi.util.Key",211]]},{"word":"operation","context":[["val operation = for {",245],["operation.successful {",235],["operation match {",101],["* @return the operation status",79],["* operation.",70],["package operation",69],["* @param operation The binary opcode for this operation.",68],["* @param operation The binary opcode for this operation.",68],["* @return Observable which performs the throttle operation.",66],["*     When returning columns from an INSERT operation, only a single column",64]]},{"word":"option","context":[["/** Maps whole row to an option. Useful for outer joins. */",399],["import scalaz.std.option._",277],["import scalaz.syntax.std.option._",249],["option match {",157],["* Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.",112],["* Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.",112],["* of items, as you do not have the option to unsubscribe.",110],["<config option=\"enablePreProcessExtension\" value=\"true\"/>",80],["<config option=\"enableIgnoreJSONSchemaExtension\" value=\"true\"/>",80],["<config option=\"enableIgnoreXSDExtension\" value=\"true\"/>",80]]},{"word":"optional","context":[["* @param formatter an optional formatter that provides extra information that can be used by reporters in determining",336],["* @param testTags the optional list of tags for this test",316],["* @param testName an optional name of one test to run. If <code>None</code>, all relevant tests should be run.",193],["* If the specified field is optional, it is set to None.  Otherwise, if the field is",181],["* Register a test with the given spec text, optional tags, and test function value that takes no arguments.",121],["* @param expectedExitCode (optional) the expected exit code for the command",120],["{{/optional}}",112],["* of client application activation, with optional configuration parameters",97],["* @param testName an optional name of one test to execute. If <code>None</code>, all relevant tests should be executed.",92],["* is known and not optional and set to None, then the field is serialized and returned.",85]]},{"word":"options","context":[["val options = parser.parse(args : _*)",300],["options must haveLength(1)",287],["val options = splitter.getQueryOptions(filter)",273],["options",260],["options.head.filters must haveLength(1)",230],["options.head.filters.head.secondary must beNone",155],["package options",127],["val topic = options.valueOf(topicOpt)",110],["(context, options) =>",105],["def run(state: State, options: Options): State = {",103]]},{"word":"opts","context":[["(nn, opts)",319],["opts)",240],["opts.parse(args)",160],["opts",110],["opts.dim = d",102],["opts, mkUpdater _,",101],["settings = opts)",97],["val opts = new xopts",96],["opts.batchSize = math.min(100000, mat0.ncols/30 + 1)",65],["new ADAGrad(opts),",61]]},{"word":"or","context":[["* Redistribution and use in source and binary forms, with or without",3573],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",2556],["* supplementary functions or services in addition to those offered by",1872],["* documentation and/or other materials provided with the distribution.",943],["*    and/or other materials provided with the distribution.",906],["* See http://www.cra.com or email figaro@cra.com for information.",856],["Redistribution and use in source and binary forms, with or without",639],["* serving files in a web or/and network application,",540],["* you must retain the producer line in every report, form or document",540],["* that is created or manipulated using TA Buddy.",534]]},{"word":"orbeon","context":[["import org.orbeon.oxf.util.ScalaUtils._",446],["import org.orbeon.scaxon.XML._",357],["import org.orbeon.oxf.xforms.XFormsConstants._",317],["import org.orbeon.saxon.om.NodeInfo",229],["import org.orbeon.oxf.common.OXFException",219],["import org.orbeon.oxf.xml.dom4j.Dom4jUtils",211],["import org.orbeon.oxf.xforms._",174],["import org.orbeon.oxf.xforms.xbl.XBLContainer",169],["package org.orbeon.oxf.fr",149],["import org.orbeon.oxf.xforms.action.XFormsAPI._",146]]},{"word":"order","context":[["* @param ordinal an <code>Ordinal</code> that can be used to place this event in order in the context of",520],["*  @param rk  the rank order",263],["*  Sort in decreasing order.",175],["order by",160],["// Will try and implement that tomorrow. Subtypes will be able to change the order.",159],["assert(repD.lastEvent.get.testName endsWith \"test that\") // last because should be in order of appearance",159],["// The order I want is order of appearance in the file.",159],["// The order I want is order of appearance in the file.",159],["* Field information in declaration order.",156],["var rk: Array [Int] = null                              // to hold rank order",143]]},{"word":"org","context":[["import org.junit.runner.RunWith",11532],["import org.scalatest.FunSuite",10421],["import org.scalatest._",9769],["import org.joda.time.DateTime",8580],["import org.scalatest.junit.JUnitRunner",7883],["import org.apache.spark.rdd.RDD",7440],["import org.slf4j.LoggerFactory",6978],["import org.specs2.mutable.Specification",6153],["import org.junit.Test",6088],["package org.jetbrains.plugins.scala",5764]]},{"word":"other","context":[["case other =>",1754],["other match {",1213],["case other => other",1086],["case other => other",1086],["override def equals(other: Any): Boolean = other match {",959],["override def equals(other: Any): Boolean = other match {",959],["* documentation and/or other materials provided with the distribution.",943],["*    and/or other materials provided with the distribution.",906],["case other => fail(\"Expected cause to be TestFailedException, but got: \" + other)",606],["case other => fail(\"Expected cause to be TestFailedException, but got: \" + other)",606]]},{"word":"out","context":[["out",2717],["out.close()",1403],["out.flush()",717],["out.close",455],["val out = new ByteArrayOutputStream()",367],["writeTo(out)",317],["def writeTo(out: com.google.protobuf.CodedOutputStream) {",316],["val out = com.google.protobuf.CodedOutputStream.newInstance(res)",316],["out.checkNoSpaceLeft()",316],["* You can mock out a whole application including requests, plugins etc.",261]]},{"word":"output","context":[["output",611],["output: double",315],["output.close()",306],["output: int",234],["|  output {",211],["assertDoesNotContain(\"Exception\", output)",202],["assertDoesNotContain(\"error:\", output)",188],[".write(Tsv(\"output\"))",185],["output: string",173],[".write(Tsv(args(\"output\")))",157]]},{"word":"override","context":[["override def run() {",2601],["override def toString: String = {",2286],["override def toString = {",2182],["override def receive: Receive = {",1714],["override",1569],["override def run(): Unit = {",1540],["override def toString =",1478],["override def receive = {",1182],["override def preStart(): Unit = {",1102],["override def toString: String =",1055]]},{"word":"owner","context":[["using(Git.open(getRepositoryDir(repository.owner, repository.name))){ git =>",490],["defining(repository.owner, repository.name){ case (owner, name) =>",254],["defining(repository.owner, repository.name){ case (owner, name) =>",254],["def owner = rec",221],["owner,",174],["* @param userName the user name of the repository owner",165],["owner: Window,",163],["owner: String,",156],["val owner = repository.owner",143],["val owner = repository.owner",143]]},{"word":"oxf","context":[["import org.orbeon.oxf.util.ScalaUtils._",446],["import org.orbeon.oxf.xforms.XFormsConstants._",317],["import org.orbeon.oxf.common.OXFException",219],["import org.orbeon.oxf.xml.dom4j.Dom4jUtils",211],["import org.orbeon.oxf.xforms._",174],["import org.orbeon.oxf.xforms.xbl.XBLContainer",169],["package org.orbeon.oxf.fr",149],["import org.orbeon.oxf.xforms.action.XFormsAPI._",146],["package org.orbeon.oxf.xforms.function.xxforms",143],["package org.orbeon.oxf.xforms.analysis",134]]},{"word":"p","context":[["* <p>",37352],["* </p>",27669],["p",2027],["* <p/>",1632],["*  <p>",1330],["p.future",1206],["p match {",662],["</p>",571],["<p>",442],["p^",401]]},{"word":"package","context":[["package controllers",6274],["package org.jetbrains.plugins.scala",5764],["package models",3595],["package lang",3070],["package org.scalatest",2203],["package sbt",1995],["package psi",1971],["package impl",1433],["package util",1420],["package test",1389]]},{"word":"page","context":[["page goToThePage()",301],["page fillPageWith claim",157],["page,",115],["it should \"display the page\" in {",112],["page",108],["project home page at:",106],["val pageName = StringUtil.urlDecode(params(\"page\"))",103],["\"go to page\" should {",80],["val page       = IssueSearchCondition.page(request)",77],["val page       = IssueSearchCondition.page(request)",77]]},{"word":"param","context":[["*  @param i  the row index",661],["* @param key",660],["* @param testFun the test function",571],["* @param id",553],["* @param ordinal an <code>Ordinal</code> that can be used to place this event in order in the context of",520],["*  @param e  the ending index (exclusive) for the search",516],["* @param value",508],["@param expr1 : a value",480],["@param expr2 : a value",480],["* @param ctx the parse tree",446]]},{"word":"parameter","context":[["* This method takes a <code>testName</code> parameter that optionally specifies a test to invoke.",111],["// Every table needs a * projection with the same type as the table's type parameter",102],["* @param regParam Regularization parameter.",97],["// accept a _function_ as a parameter",95],["* This function is passed as an implicit parameter to a <code>should</code> method",84],["* The suite class name parameter is optional, because suites in ScalaTest are an abstraction that",79],["* the <code>PatienceConfig</code> passed implicitly as the last parameter.",68],["* The parameter `trees` of this function is a list of code trees ordered",67],["* The parameter `chars` is an arbitrary text. This function extracts the character",66],["* on the two parameter code tables.",66]]},{"word":"parameters","context":[["parameters: Map[String, String],",151],["def addCompletions(parameters: CompletionParameters, context: ProcessingContext, result: CompletionResultSet) {",129],["|\"parameters\": {",128],["*  parameters. */",113],["val element = positionFromParameters(parameters)",106],["<console>:15: error: org.scalatest.words.NewContainWord does not take parameters",100],["* of client application activation, with optional configuration parameters",97],["def addCompletions(parameters: CompletionParameters, context: ProcessingContext,",94],["* @param parameters 参数 ，Mongo不需要",88],["parameters: Map[String, String]): BaseRelation = {",79]]},{"word":"params","context":[["protected override def handlePage(params: String*) {",367],["val userName = params(\"userName\")",349],["// query params",245],["params",223],["import org.jetbrains.plugins.scala.lang.psi.api.statements.params.ScParameter",212],["params: Stack.Params = this.params",196],["params: Stack.Params = this.params",196],["val params = Map(",194],["import org.jetbrains.plugins.scala.lang.psi.api.statements.params._",180],["implicit val prettify = restExtractor.extractPrettify(req.params)",156]]},{"word":"parent","context":[["parent match {",422],["parent",160],["parent = parent.getParent",126],["parent = parent.getParent",126],["if (parent != null) {",122],["// Funnel the data through the parent pipeline that contains data to",120],["override def slideDuration: Duration = parent.slideDuration",107],["def this(parent: StubElement[ParentPsi],",91],["override def getView(position: Int, convertView: View, parent: ViewGroup): View = {",91],["while (parent != null) {",86]]},{"word":"parse","context":[["* @param ctx the parse tree",446],["def parse(builder: ScalaPsiBuilder): Boolean = {",357],["parse(tail)",328],["val options = parser.parse(args : _*)",300],["lazy val doc = Jsoup.parse(view.body)",231],["val json = parse(",219],["opts.parse(args)",160],["import dhg.ccg.parse._",156],["parser.parse(args)",144],["parser.parse(args, defaultParams).map { params =>",130]]},{"word":"parser","context":[["package parser",794],["import org.jetbrains.plugins.scala.lang.parser.parsing.builder.ScalaPsiBuilder",439],["import org.jetbrains.plugins.scala.lang.parser.ScalaElementTypes",381],["val parser = new OptionParser",341],["val options = parser.parse(args : _*)",300],["def parser(",224],["def parserWithPrefix(prefix: String, sep: String = \"_\") = parser(",206],["parser(\"\"\"",161],["parser.printHelpOn(System.err)",148],["parser.parse(args)",144]]},{"word":"part","context":[["* This file is part of Neo4j.",1823],["This file is part of \"FACTORIE\" (Factor graphs, Imperative, Extensible)",1389],["* This file is part of Rudder.",604],["* This file is part of the TA Buddy project.",535],["* This file is part of JANDOM: JVM-based Analyzer for Numerical DOMains",356],["* This file is part of Kiama.",317],["* This file is part of Scrupal, a Scalable Reactive Web Application Framework for Content Management                 *",309],["* This file is part of mycollab-web.",278],["// This file is part of the Equal application suite.",261],["* This file is a part of PowerAPI.",253]]},{"word":"partition","context":[["val topicAndPartition = TopicAndPartition(topic, partition)",217],["case Some(partition) =>",183],["partition: Int,",167],["// reassign partition 0",130],["// also check partition ownership",128],["partition",122],["stateChangeLogger.trace(\"Controller %d epoch %d changed state of replica %d for partition %s from %s to %s\"",120],["info(\"Leader %s for partition %s being reassigned, \".format(currentLeader, topicAndPartition) +",111],["partitionsToMakeFollower.foreach { partition =>",103],["// create topic with 1 partition, 2 replicas, one on each broker",84]]},{"word":"partitions","context":[["partitions: Int,",196],["partitions: Seq[Int],",148],["* partitions.",120],["* Hash partitioning is used to generate the RDDs with `numPartitions` partitions.",104],["partitions",87],["* Return a new RDD that is reduced into `numPartitions` partitions.",82],["* generate the RDDs with Spark's default number of partitions.",79],["case Some(m) => m.asInstanceOf[Map[String, Any]].get(\"partitions\") match {",75],["* Invoked when some partitions are reassigned by the admin command",74],["info(\"Auto creation of topic %s with %d partitions and replication factor %d is successful!\"",68]]},{"word":"passed","context":[["* @throws NullPointerException if any of the passed values are <code>null</code>",392],["* will register the passed string for forwarding later during test execution. If invoked while this",263],["* from outside in, and the passed spec text, with one space placed between each item. (See the documenation",248],["* @throws NullPointerException if <code>specText</code> or any passed test tag is <code>null</code>",223],["* <li><code>stopper</code> - the <code>Stopper</code> passed to this method, or one that wraps and delegates to it</li>",166],["* This trait's implementation returns tags that were passed as strings contained in <code>Tag</code> objects passed to",149],["* This trait's implementation returns tags that were passed as strings contained in <code>Tag</code> objects passed to",149],["* will register the passed string for forwarding later during test execution. If invoked from inside a scope,",120],["def `should throw TFE with friendly reminder when single GenTraversable argument is passed and failed` {",112],["* appears in any <code>Bad</code>s passed to <code>withGood</code>).",105]]},{"word":"path","context":[["path: String,",1322],["<resource path=\"/a/b\">",525],["path",459],["<resource path=\"/c\">",455],["path match {",323],["path,",296],["meq(path),",284],["/* Add configs to resource path for ConfigSpec */",260],["// create my cluster client solely based on a zk client and a path",258],["val path =",250]]},{"word":"pattern","context":[["import akka.pattern.ask",3987],["import akka.pattern.pipe",778],["import akka.pattern._",610],["import akka.pattern.{ ask, pipe }",286],["import akka.pattern.{ask, pipe}",136],["import akka.contrib.pattern.DistributedPubSubExtension",120],["pattern match {",99],["def sum(ints: List[Int]): Int = ints match { // A function that uses pattern matching to add up a list of integers",96],["import akka.pattern.AskTimeoutException",90],["import akka.pattern.gracefulStop",88]]},{"word":"pending","context":[["pending",2195],["it(\"should generate a TestPending message when the test body is (pending)\") {",177],["\"calls made from a test that is pending\") {",134],["\"TestScheduler should have no pending tasks\")",130],["\"test this\" is (pending)",98],["\"test this\" taggedAs(mytags.SlowAsMolasses, mytags.WeakAsAKitten) is (pending)",98],["\"test that\" is (pending)",98],["\"calls made from a test that is not pending\") {",94],["* A <em>pending test</em> is one that has been given a name but is not yet implemented. The purpose of",91],["* pending tests is to facilitate a style of testing in which documentation of behavior is sketched",91]]},{"word":"pipeline","context":[["pipeline",528],["val pipeline = Channels.pipeline()",396],["val pipeline = Channels.pipeline()",396],["pipeline.addLast(",173],["// Data to be run through pipeline",154],["val responseFuture = pipeline {",137],["// Funnel the data through the parent pipeline that contains data to",120],["// demonstrate that the pipeline with just the event is merely a",120],["// mapping on top of the pipeline containing the data",120],["import org.orbeon.oxf.pipeline.api.PipelineContext",103]]},{"word":"play","context":[["import play.api.libs.json._",6149],["import play.api.mvc._",5405],["import play.api.libs.json.Json",4321],["import play.api.Play.current",3657],["import play.api.Logger",2664],["import play.api._",2272],["import play.api.data.Forms._",2020],["import play.api.test.Helpers._",2015],["import play.api.libs.functional.syntax._",1600],["import play.api.libs.concurrent.Execution.Implicits.defaultContext",1556]]},{"word":"plugins","context":[["package org.jetbrains.plugins.scala",5764],["import org.jetbrains.plugins.scala.extensions._",1579],["import org.jetbrains.plugins.scala.lang.lexer.ScalaTokenTypes",1189],["import org.jetbrains.plugins.scala.lang.psi.api.expr._",868],["import org.jetbrains.plugins.scala.lang.psi.impl.ScalaPsiElementFactory",803],["import org.jetbrains.plugins.scala.lang.psi.ScalaPsiUtil",744],["import org.jetbrains.plugins.scala.lang.psi.types._",704],["import org.jetbrains.plugins.scala.lang.psi.api.ScalaFile",672],["import org.jetbrains.plugins.scala.lang.psi.api.statements._",521],["import org.jetbrains.plugins.scala.lang.parser.parsing.builder.ScalaPsiBuilder",439]]},{"word":"point","context":[["* The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.",192],["* The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.",192],["* The width of the point marker's outline.",192],["* @param lineWidth The width of the point marker's outline.",192],["* @param fillColor The fill color of the point marker. When <code>null</code>, the series' or point's color is used.",131],["* @param fillColor The fill color of the point marker. When <code>null</code>, the series' or point's color is used.",131],["* The fill color of the point marker. When <code>null</code>, the series' or point's color is used.",131],["* The fill color of the point marker. When <code>null</code>, the series' or point's color is used.",131],["* The radius of the point marker.",112],["* @param radius The radius of the point marker.",112]]},{"word":"port","context":[["port: Int,",585],["val props = TestUtils.createBrokerConfig(0, TestUtils.MockZkConnect, port = 8181)",284],["System.clearProperty(\"spark.driver.port\")",252],["// To avoid Akka rebinding to the same port, since it doesn't unbind immediately on shutdown",168],["port,",145],["val port: Int,",131],["|            \"port\" : 345",117],[".port (port)",116],[".port (port)",116],["props.put(\"port\", port.toString)",114]]},{"word":"pos","context":[["pos += 1",854],["implicit val pos = tree.pos",717],["implicit val pos = tree.pos",717],["var pos = 0",532],["implicit pos: Position): js.Tree = {",433],["pos",277],["implicit val pos: Position) extends Tree {",219],["reporter.error(pos,",125],["pos: Option[Position] = None,",113],["doCollected(collected, xs, original, prettifier, pos) { e =>",111]]},{"word":"position","context":[[".toList.sortBy(_.position) shouldBe result1",146],["position += 1",145],["var position = 0",142],["position = 0,",133],["*  @param from  the position to start extracting from",123],["position = 1,",114],["position = 2,",96],["override def getView(position: Int, convertView: View, parent: ViewGroup): View = {",91],["position.relative,",87],["position = (position + 1) & mask",84]]},{"word":"post","context":[["post {",1409],[".post(\"/api/authentication\")",203],["post(\"/api/signout\") { checkStatus() }",172],["def post(",151],["override def post(",140],["EventBusFactory.getInstance.post(new ProjectEvent.GotoMyProject(this, chain))",99],["post(\"/api/signin\", dummyUserLoginParams) { checkStatus() }",76],["EventBusFactory.getInstance().post(new ProjectEvent.GotoMyProject(this, chain))",75],["} ~ post {",72],[".post(\"/api/authenticate\")",68]]},{"word":"pre","context":[["* </pre>",22063],["* <pre class=\"stHighlight\">",15662],["* <pre>",3233],["* <pre class=\"stREPL\">",1661],["* <pre class=\"stExamples\">",308],["* Example:<pre>",263],["* }</pre>",175],["* <pre name=\"code\" class=\"scala\" >",174],["* <pre name=\"code\" class=\"scala\">",149],["</pre>",128]]},{"word":"prefix","context":[["prefix: String,",274],["def parserWithPrefix(prefix: String, sep: String = \"_\") = parser(",206],["override def prefix = REX.W(true)",130],["val prefix = \"http://example.org/\"",104],["* generated based on `prefix` and `suffix`: \"prefix-TIME_IN_MS.suffix\".",96],["* generated based on `prefix` and `suffix`: \"prefix-TIME_IN_MS.suffix\".",96],["val underlying = q\"${c.prefix}.underlying\"",88],["id = s\"$prefix${sep}id\",",79],["val lhs = c.prefix.tree",72],["prefix",72]]},{"word":"print","context":[["print(\".\")",135],["* print to the standard output. This method can be called safely by any thread.",132],["print(\"\\n\")",116],["print(\"\\nEnter your choice: \")",112],["wordCounts.print()",111],["print(')')",104],["print(\" \")",101],["print(pascal(col, row) + \" \")",98],["val str = dateTime.print(x)",86],["print(\")\")",63]]},{"word":"println","context":[["println()",3548],["println",1230],["// scalastyle:off println",784],["println(",769],["// scalastyle:on println",767],["println (\"--------------------------------------------------------------\")",739],["println(result)",653],["println(\"\")",560],["println(msg)",404],["System.err.println(",386]]},{"word":"private","context":[["private[spark]",792],["private[streaming]",544],["private val prop_proto: List[(String, AbsProperty)] = List(",529],["private",428],["private[cogx]",408],["private[this] val log = LoggerFactory.getLogger(getClass)",391],["private[this] val log = Logger.getLogger(getClass.getName)",338],["private val log = LoggerFactory.getLogger(getClass)",336],["private[this]",293],["private val prop_cons: List[(String, AbsProperty)] = List(",288]]},{"word":"process","context":[["import scala.sys.process._",913],["override def process(msg: AnyRef) {",498],["import sys.process._",370],["override def process(theMsg: AnyRef) {",216],["process.destroy()",178],["import scala.sys.process.Process",152],["process.waitFor()",126],["override def process(theMsg: FilterBankConfig.Message) {",119],["stateOpProcessor.process(update).futureValue",117],["def process = {",113]]},{"word":"producer","context":[["producer.close()",752],["* you must retain the producer line in every report, form or document",540],["package kafka.producer",205],["producer.close",193],["import kafka.producer._",172],["import org.apache.kafka.clients.producer.ProducerConfig",153],["val producer = new SyncProducer(new SyncProducerConfig(props))",140],["producer.flush()",131],["props.put(\"producer.type\", \"async\")",105],["props.put(\"serializer.class\", \"kafka.producer.StringSerializer\")",99]]},{"word":"project","context":[["import com.intellij.openapi.project.Project",1985],["$project(",954],["* See the project homepage at: https://monix.io",820],["* See the project homepage at: http://www.monifu.org",633],["// This project",570],["* This file is part of the TA Buddy project.",535],["* HCI Group at the University of Würzburg. The project is funded by the German",336],["// Add your own project settings here",301],["// Add your project dependencies here,",293],["$project(Reshape(ListMap(",247]]},{"word":"promise","context":[["promise.future",1341],["val promise = Promise[Unit]()",652],["val promise = Promise[EventRecordingReporter]",635],["promise.future.map { repo =>",602],["status whenCompleted { _ => promise.success(reporter) }",373],["promise",359],["status whenCompleted { _ => promise.success(rep) }",262],["Await.result(promise.future, 5.seconds)",209],["val promise = Promise[Ack]()",184],["val promise = Promise[T]()",159]]},{"word":"prop","context":[["import org.scalatest.prop.GeneratorDrivenPropertyChecks",830],["import org.scalatest.prop.PropertyChecks",690],["import org.scalatest.prop.Checkers",689],["import org.scalatest.prop._",309],["import org.scalatest.prop.TableDrivenPropertyChecks",186],["import org.scalatest.prop.TableDrivenPropertyChecks._",183],["import prop._",122],["val prop = forAll ($famousArgs$) { ($namesAndTypes$) =>",120],["import org.scalatest.prop._;",114],["val prop = checkOrderUnsafe(f.getExpression1, f.getExpression2)",108]]},{"word":"properties","context":[["val properties = new Properties()",279],["properties",238],["// This object has all properties of the HTMLElement object",218],["val properties = new Properties",166],["/* list of properties in the instance object */",155],["\"properties\": {",140],["logger.error(s\"Failed to get properties ${properties} of\" +",88],["logger.error(s\"Failed to get properties ${properties} of\" +",88],["|  \"properties\": {",79],[")(sc).map { case (entityId, properties) =>",76]]},{"word":"props","context":[["val props = new Properties()",1495],["props",763],["val props = new Properties",455],["spellCheck.foreach(v => props.updateDynamic(\"spellCheck\")(v))",339],["is.foreach(v => props.updateDynamic(\"is\")(v))",339],["draggable.foreach(v => props.updateDynamic(\"draggable\")(v))",339],["contentEditable.foreach(v => props.updateDynamic(\"contentEditable\")(v))",339],["onFocus.foreach(v => props.updateDynamic(\"onFocus\")(v))",339],["onKeyDown.foreach(v => props.updateDynamic(\"onKeyDown\")(v))",339],["onAnimationEnd.foreach(v => props.updateDynamic(\"onAnimationEnd\")(v))",339]]},{"word":"protected","context":[["override protected def afterAll(): Unit = {",622],["override protected def beforeAll(): Unit = {",404],["protected override def insert(source: XContentBuilder): Unit = {",400],["protected override def handlePage(params: String*) {",367],["protected def copy1(",240],["override protected def doEquals(other: Equatable)",221],["override protected def doCopy()",211],["protected override def runTest(testName: String, args: Args): Status = {",183],["override protected def afterAll() = {",165],["override protected def afterAll() {",144]]},{"word":"protocol","context":[["protocol = \"file\",",854],["val protocol = mock[TProtocol]",407],["import org.apache.kafka.common.protocol.SecurityProtocol",279],["import org.apache.thrift.protocol._",263],["endRead(e, protocol)",252],["endWrite(e, protocol)",240],["import org.apache.thrift.protocol.TBinaryProtocol",225],["import org.apache.kafka.common.protocol.Errors",162],["import com.twitter.finagle.redis.protocol._",134],["package com.twitter.finagle.redis.protocol",133]]},{"word":"provided","context":[["def `should use an explicitly provided Equality` {",1594],["it(\"should use an explicitly provided Equality\") {",1196],["* documentation and/or other materials provided with the distribution.",943],["*    and/or other materials provided with the distribution.",906],["*     documentation and/or other materials provided with the distribution.",491],["*       documentation and/or other materials provided with the distribution.",322],["documentation and/or other materials provided with the distribution.",300],["\"should use an explicitly provided Equality\" in {",286],["*   other materials provided with the distribution.",279],["* and/or other materials provided with the distribution.",226]]},{"word":"provider","context":[["* @param stateProvider The OAuth2 state provider implementation.",123],["put(entityStore, provider)",120],["* @param socialProviderRegistry The social provider registry.",93],["import org.bouncycastle.jce.provider.BouncyCastleProvider",86],["package scalaoauth2.provider",79],["* The provider to test.",78],["val provider = WhiskPackage(namespace, aname)",75],["* @param authInfo The auth info received from the provider.",70],["failed[ProfileRetrievalException](provider.retrieveProfile(oAuthInfo.as[OAuth2Info])) {",69],["* @param tokenSecretProvider The token secret provider implementation.",68]]},{"word":"psi","context":[["package psi",1971],["import com.intellij.psi._",1694],["import com.intellij.psi.PsiElement",1303],["import com.intellij.psi.util.PsiTreeUtil",1108],["import org.jetbrains.plugins.scala.lang.psi.api.expr._",868],["import org.jetbrains.plugins.scala.lang.psi.impl.ScalaPsiElementFactory",803],["import org.jetbrains.plugins.scala.lang.psi.ScalaPsiUtil",744],["import org.jetbrains.plugins.scala.lang.psi.types._",704],["import org.jetbrains.plugins.scala.lang.psi.api.ScalaFile",672],["import org.jetbrains.plugins.scala.lang.psi.api.statements._",521]]},{"word":"publish","context":[["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",2556],["* use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of",287],["to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",260],["* use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies",224],["* copy, modify, merge, publish, distribute, sublicense, and/or sell",180],["publish := {},",127],["publish := (),",124],["* modify, merge, publish, distribute, sublicense, and/or sell copies",112],["// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",100],["env.eventBus.publish(LoginEvent(user, request, request2Messages))",92]]},{"word":"put","context":[["put {",223],["put(entityStore, action)",155],["props.put(\"serializer.class\", \"kafka.serializer.StringEncoder\")",155],["put(entityStore, provider)",120],["props.put(\"metadata.broker.list\", brokerList)",117],["props.put(\"port\", port.toString)",114],["props.put(\"request.required.acks\", \"1\")",106],["props.put(\"producer.type\", \"async\")",105],["mp.put(\"ONE\", \"one\")",104],["props.put(\"host\", \"localhost\")",102]]},{"word":"q","context":[["q\"\"\"",2089],["val q = quote {",1173],["testContext.run(q).string mustEqual",361],[".acceptLanguageHeader(\"fr,fr-fr;q=0.8,en-us;q=0.5,en;q=0.3\")",308],[".acceptLanguageHeader(\"fr,fr-fr;q=0.8,en-us;q=0.5,en;q=0.3\")",308],[".acceptLanguageHeader(\"fr,fr-fr;q=0.8,en-us;q=0.5,en;q=0.3\")",308],["q",224],["val q = for {",183],["val q =",153],["stmt\"${(q.ast: Ast).token}\" mustEqual",123]]},{"word":"query","context":[["val query =",397],["query",305],["paramType = \"query\"),",261],["// query params",245],["val query = for {",241],["query: Query,",162],["query {",149],["package com.twitter.zipkin.query",132],["val query = \"\"\"",131],["* @param query",123]]},{"word":"queue","context":[["queue,",358],["import scala.scalajs.concurrent.JSExecutionContext.Implicits.queue",173],["queue.clear()",89],["val queue = mock[LaunchQueue]",70],["if (queue.isEmpty) {",69],["while (!queue.isEmpty) {",66],["test(\"should do onComplete only after all the queue was drained, test2\") { implicit s =>",65],["test(\"should do onError only after the queue was drained\") { implicit s =>",65],["test(\"should do onError only after all the queue was drained, test2\") { implicit s =>",65],["test(\"should do onComplete only after all the queue was drained\") { implicit s =>",65]]},{"word":"r","context":[["r",2826],["r += 1",871],["\"\"\".stripMargin.replaceAll(\"\\r\", \"\").trim()",684],["r match {",648],["var r = 0",545],["\"\"\".stripMargin.replace(\"\\r\", \"\")",529],["} yield r",500],["\"\"\".stripMargin('|').replaceAll(\"\\r\", \"\").trim()",494],["whenReady(result) { r =>",473],["\"\"\".replace(\"\\r\", \"\")",418]]},{"word":"random","context":[["val random = new Random()",275],["random.setSeed(seed)",252],["import org.apache.commons.math3.random.MersenneTwister",192],["val random = new Random",165],["implicit val random = new scala.util.Random(0)",154],["implicit val scheduler = StubScheduler.random()",132],["*  @param stream  the random number stream",127],["random.nextBytes(value)",91],["import org.apache.commons.math3.random.RandomGenerator",88],["(n, nextRNG) // The return value is a tuple containing both a pseudo-random integer and the next `RNG` state.",81]]},{"word":"range","context":[["*  @param ir  the row range",349],["*  @param jr  the column range",349],["*  @param r  the given range",174],["for (i <- range) {",141],["val rk = Array.range (0, n)                   // rank order",140],["* @throws DateTimeException if the result exceeds the supported date range",132],["/** Set 'this' vector's elements over the given range (vector slicing).",104],["val partitionAssignmentStrategy = \"range\"",84],["val v1Vals = Variable(v1).range",84],["* @throws CalendricalException if the result exceeds the supported date range",79]]},{"word":"rdd","context":[["import org.apache.spark.rdd.RDD",7440],["import org.bdgenomics.adam.rdd.ADAMContext._",608],["import org.apache.spark.rdd._",403],["rdd",318],["package org.apache.spark.rdd",291],["rdd: RDD[T],",211],["import org.trustedanalytics.sparktk.frame.internal.rdd.FrameRdd",149],["package org.bdgenomics.adam.rdd",117],["val frame = new Frame(rdd, schema)",102],["package spark.rdd",99]]},{"word":"reactivemongo","context":[["import reactivemongo.bson._",1142],["import reactivemongo.bson.BSONObjectID",377],["import reactivemongo.api._",299],["import play.modules.reactivemongo.json.collection.JSONCollection",268],["import reactivemongo.bson.BSONDocument",267],["import reactivemongo.api.collections.default.BSONCollection",176],["import play.modules.reactivemongo.MongoController",157],["import play.modules.reactivemongo.json.BSONFormats._",155],["import reactivemongo.api.collections.bson.BSONCollection",122],["import reactivemongo.core.commands._",119]]},{"word":"read","context":[[".read",527],["$read(Collection(\"db\", \"zips\")),",448],["$read(collection(\"db\", \"zips\")),",420],["read",311],["(__ \\ \"name\").read[String] and",246],["def read(value: JsValue) = value match {",215],["_passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))",209],["read()",180],["\"read\" in { cycle => import cycle._",156],["(__ \\ \"id\").read[String] and",156]]},{"word":"reader","context":[["reader.close()",688],["line = reader.readLine()",144],["reader.close",144],["reader",96],["var line = reader.readLine()",90],["line = reader.readLine",88],["reader.read()",87],["val sameRecords = reader.read(filename)",80],["if (reader != null) {",69],["val line = reader.readLine()",64]]},{"word":"receive","context":[["def receive = {",6615],["override def receive: Receive = {",1714],["override def receive = {",1182],["def receive: Receive = {",1047],["def receive = LoggingReceive {",304],["Then(\"we receive a NotAuthenticated response\")",270],["receive {",233],["override def receive: Actor.Receive = {",195],["def receive: Actor.Receive = {",185],["override def receive: Receive = LoggingReceive {",101]]},{"word":"record","context":[["sameRecord must ===(record)",273],["package record",202],["// record activity",185],["dataFileWriter.append(record);",168],["dataFileWriter.create(record.getSchema(), file);",167],["record",149],["type: record",127],["import record._",102],["</record>",98],["<record>",94]]},{"word":"ref","context":[["ref: U[(_ <: dom.html.Element) => _] = undefined,",452],["def ref: this.type = this",429],["watch(ref)",428],["expectTerminated(ref)",409],["ref.foreach(v => props.updateDynamic(\"ref\")(v))",339],["ref.foreach(v => props.updateDynamic(\"ref\")(v))",339],["ref",310],["case ref: ScReferenceExpression =>",265],["ref match {",263],["import scala.ref.WeakReference",199]]},{"word":"reflect","context":[["import scala.reflect.ClassTag",7121],["import scala.reflect.runtime.universe._",2130],["import scala.reflect._",775],["import scala.reflect.macros.blackbox.Context",651],["import java.lang.reflect.Method",598],["import scala.reflect.macros.Context",577],["import scala.reflect.runtime.{universe => ru}",376],["import scala.reflect.runtime.universe.TypeTag",358],["import scala.reflect.Manifest",350],["import scala.reflect.macros.blackbox",308]]},{"word":"regex","context":[["import java.util.regex.Pattern",1519],["import java.util.regex.Matcher",135],["import java.util.regex._",130],["res should include regex (\"\\\"Status Code\\\" : 0\")",79],["import java.util.regex.{Matcher, Pattern}",78],[".describedAs(\"Java regex (String)\")",66],["val regex = parser.getCaseInsensitiveRegex(metricName)",58],["* The regular expression passed following the <code>regex</code> token can be either a <code>String</code>",55],["val rightRegex = resultOfRegexWordApplication.regex",55],["package gnieh.regex",51]]},{"word":"remove","context":[["//remove if not needed",407],["*  FIX: remove the 'n = m+1' restriction.",190],["iter.remove()",162],["override val remove: js.UndefOr[js.Function] = removeOuter",120],["val removeOuter: js.UndefOr[js.Function] = remove",120],["val remove: js.UndefOr[js.Function] = js.undefined",120],["// remove content type in case it was set through an action",90],["if (tw.text < elem.text) new NonEmpty(elem, left.remove(tw), right)",79],["def remove(tw: Tweet): TweetSet =",78],["else if (elem.text < tw.text) new NonEmpty(elem, left, right.remove(tw))",78]]},{"word":"rep","context":[["val rep = new EventRecordingReporter",2459],["a.run(None, Args(rep))",666],["val status = suite.run(None, Args(reporter = rep))",419],["a.run(None, rep, new Stopper {}, Filter(), Map(), None, new Tracker())",366],["s.run(None, Args(rep))",345],["val testFailedEvents = rep.testFailedEventsReceived",287],["val tf = rep.testFailedEventsReceived",283],["status whenCompleted { _ => promise.success(rep) }",262],["val tp = rep.testPendingEventsReceived",210],["assert(rep.testSucceededEventsReceived(0).testName == \"test 1\")",193]]},{"word":"replica","context":[["// inconsistent replica state",132],["stateChangeLogger.trace(\"Controller %d epoch %d changed state of replica %d for partition %s from %s to %s\"",120],["// read the partitions and their new replica list",52],["// in sync replicas should not have any replica that is not in the new assigned replicas",52],["// kill the server hosting the preferred replica",50],["props.put(\"replica.socket.timeout.ms\", \"1500\")",47],["debug(\"Updated path %s with %s for replica assignment\".format(zkPath, jsonPartitionMap))",38],["* Starts the preferred replica leader election for the list of partitions specified under",37],["* 5. Starts the replica state machine",37],["* This callback is invoked by the replica state machine's broker change listener, with the list of newly started",37]]},{"word":"replicas","context":[["// create topic with 1 partition, 2 replicas, one on each broker",84],["info(\"%d/%d replicas have caught up with the leader for partition %s being reassigned.\"",72],["// create the test topic with all the brokers as replicas",66],["\"New replicas should exist on brokers\")",64],["case(topicPartition, replicas) => {",59],[".filter { case(topicAndPartition, replicas) => replicas.contains(brokerId) }",59],[".filter { case(topicAndPartition, replicas) => replicas.contains(brokerId) }",59],[".map { case(topicAndPartition, replicas) =>",57],["assertEquals(1, partitionMetadata.head.replicas.size)",55],["// in sync replicas should not have any replica that is not in the new assigned replicas",52]]},{"word":"repo","context":[["promise.future.map { repo =>",602],["<distribution>repo</distribution>",450],["repo,",162],["repo: String,",123],["repo",99],["when(repo.store(any())).thenReturn(Future.successful(app))",84],["for ((summaryItem, repo) <- summariesMap) {",80],["\"Typesafe Repository\" at \"http://repo.typesafe.com/typesafe/releases/\",",71],["\"Snowplow Analytics Maven snapshot repo\" at \"http://maven.snplow.com/snapshots/\",",70],["when(repo.allIds()).thenReturn(Future.successful(Seq(app.id.toString)))",64]]},{"word":"report","context":[["* you must retain the producer line in every report, form or document",540],["it(\"should report as ignored, and not run, tests marked ignored\") {",158],["\"should report warning\" in {",125],["* sent to the reporter when running the test can appear in the report of a test run. (In other words,",86],["* will collect and report information about the running suite of tests.",81],["report: Reporter,",71],["report",70],["assert(testSucceededReportHadCorrectSpecText, lastSpecText match { case Some(s) => s; case None => \"No report\"})",69],["val report = ivyUpdate(m)",69],["it(\"should, when the info appears in the body before a test, report the info before the test\") {",69]]},{"word":"reporter","context":[["val reporter = new EventRecordingReporter",977],["val status = suite.run(None, Args(reporter))",752],["val status = suite.run(None, Args(reporter = rep))",419],["* <code>apply</code> method to the current reporter. If invoked in a constructor, it",383],["status whenCompleted { _ => promise.success(reporter) }",373],["* the current reporter immediately. If invoked at any other time, it will",263],["* @param reporter the <code>Reporter</code> to which results will be reported",202],["val infoList = reporter.infoProvidedEventsReceived",197],["val testSucceededList = reporter.testSucceededEventsReceived",192],["val noteList = reporter.noteProvidedEventsReceived",176]]},{"word":"repository","context":[["using(Git.open(getRepositoryDir(repository.owner, repository.name))){ git =>",490],["using(Git.open(getRepositoryDir(repository.owner, repository.name))){ git =>",490],["* Code repository:",341],["repository,",314],["defining(repository.owner, repository.name){ case (owner, name) =>",254],["defining(repository.owner, repository.name){ case (owner, name) =>",254],["import com.normation.rudder.repository._",228],["* @param userName the user name of the repository owner",165],["* @param repositoryName the repository name",165],["repository)",156]]},{"word":"req","context":[["implicit val req = ctx.body",314],["val req = Request()",309],["req",283],["val meta = Http(req)",247],["val req = search in \"music\" types \"bands\" postFilter {",200],["val req = auth.request",200],["validator.validate(req, response, chain)",190],["(req:HttpRequest) => Future.apply(mockResponse)",186],["implicit val prettify = restExtractor.extractPrettify(req.params)",156],["val req = search in \"music\" types \"bands\" aggs {",150]]},{"word":"request","context":[["</request>",1891],["<request>",1837],["implicit request =>",1351],["request =>",664],["val request = FakeRequest()",439],["implicit val request = FakeRequest()",373],["val request = Request()",372],["request",344],["request match {",343],["* @param request The request header.",321]]},{"word":"requests","context":[["import org.scaladebugger.api.lowlevel.requests.JDIRequestArgument",349],["// Log failed HTTP requests",285],["// Log all HTTP requests",285],["* You can mock out a whole application including requests, plugins etc.",261],["val requests = Seq(",147],["// ensureTopicExists is only for client facing requests",114],["*         requests from extra arguments",110],[".returning(requests).once()",108],["import com.aristocrat.mandrill.requests.MandrillRequest",87],["assert(sr.counters(Seq(\"client\", \"requests\")) == 1)",62]]},{"word":"require","context":[["require(",1061],["require(b.length == a.length, \"Vectors must be the same length!\")",373],["require(retVars.size == 1)",200],["require(value != null)",190],["require(bookstore.localName == \"Bookstore\")",184],["require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), \"FieldDescriptor does not match message type.\")",172],["require(sourceCount > 0, \"sourceCount should be strictly positive\")",144],["GUI_Thread.require {}",122],["require(__field.getContainingType() == descriptor, \"FieldDescriptor does not match message type.\")",97],["require(bookstore.name == \"Bookstore\")",84]]},{"word":"required","context":[["* of this program must display Appropriate Legal Notices, as required under",540],["required = false,",414],["required = true,",279],[".required()",231],["* Checks that all required fields are non-null.",167],["* Given the driver type, return the string required to create the column in the database",139],["props.put(\"request.required.acks\", \"1\")",106],["* bit of behavior required by the system being tested. The test can also include some code that",85],["System.err.println(\"Missing required argument \\\"\" + arg + \"\\\"\")",80],["\"fullName\"    -> trim(label(\"Full Name\"    , text(required, maxlength(100)))),",60]]},{"word":"res","context":[["res",7155],["res match {",570],["res => {",521],["val res =",346],["val res = for {",331],["val out = com.google.protobuf.CodedOutputStream.newInstance(res)",316],["val res = new Array[Byte](getSerializedSize)",316],["} yield res",292],["import res._",247],["} ensuring { res =>",233]]},{"word":"reset","context":[["Mockito.reset(mockAwsWrapper, mockDataManager, mockInfluxClientFactory)",482],["reset()",459],["def reset() {",400],["EasyMock.reset(replicaManager)",335],["override def reset(): Unit = {",256],["codegen.reset",227],["def reset(): Unit = {",204],["reset",189],["fragment.reset()",159],["pivot = b.v(i)(i)               // reset the pivot",140]]},{"word":"resource","context":[["</resource>",2020],["<resource path=\"/a/b\">",525],["<resource path=\"/c\">",455],["/* Add configs to resource path for ConfigSpec */",260],["import resource._",233],["import rpgboss.model.resource._",118],["resource.close()",113],["<resource path=\"/any\">",75],["<resource path=\"/text\">",75],["<resource path=\"/v\">",75]]},{"word":"resources","context":[["</resources>",855],["<resources base=\"https://test.api.openstack.com\">",786],["<include href=\"src/test/resources/xsd/test-urlxsd.xsd\"/>",446],["register(\"test://app/src/test/resources/xsd/test-urlxsd.xsd\",",337],["XML.loadFile(\"src/test/resources/xsd/test-urlxsd.xsd\"))",337],["(base / \"config\" +++ base / \"src\" / \"test\" / \"resources\").get",263],["import org.eclipse.core.resources.IFile",142],["import org.eclipse.core.resources.IResource",118],["import org.eclipse.core.resources.IProject",104],["// TODO test for resources etc.",99]]},{"word":"resp","context":[["inside(resp) {",874],["resp should matchPattern {",560],["resp.toOption.get.transactionHash",412],["val resp = client.execute {",360],["whenReady(startPhoneAuth(phoneNumber)) { resp ⇒",256],["val resp = meta()",247],["resp",203],["whenReady(startEmailAuth(email)) { resp ⇒",190],["resp should matchPattern { case Ok(ResponseStartPhoneAuth(_, false)) ⇒ }",186],["resp should matchPattern { case Ok(_) ⇒ }",152]]},{"word":"response","context":[["response",1266],["response match {",471],["Future.value(response)",359],["import unfiltered.response._",320],["val response = mock[WSResponse]",317],["val response = Response()",293],["response.status match {",292],["response =>",277],["Then(\"we receive a NotAuthenticated response\")",270],["header.checkStep (req1, response, chain, 0)",266]]},{"word":"rest","context":[["rest = rest.tail",458],["rest = rest.tail",458],["statement = rest.head",399],["// The rest should not compile",170],["import net.liftweb.http.rest.RestHelper",142],["rest match {",140],["case Cons(x,xs) => x + sum(xs) // The sum of a list starting with `x` is `x` plus the sum of the rest of the list.",93],["mutable = false, rest = false)",90],["package rest",88],["import com.normation.rudder.web.rest.RestExtractorService",75]]},{"word":"result","context":[["result",13922],["result match {",1883],["val result =",1508],["result.toSet",967],["val result = for {",921],["} yield result",868],["builder.result()",783],["val Some(result) = route(",737],["return result",655],["println(result)",653]]},{"word":"results","context":[["results",570],["* @param reporter the <code>Reporter</code> to which results will be reported",202],["val results =",202],["assert(results === Map(0 -> 42))",132],["val results = new CsvParser()",125],["*  results of that function by feeding it with arbitrarily generated input",113],["* the merging locally on each mapper before sending results to a reducer, similarly to a",113],["results should have length 2",110],["assert(results.size === numCars)",103],["val results = evalE(input)",94]]},{"word":"ret","context":[["ret",3153],["return ret",199],["val ret = for {",116],["val ret =",102],["ret.toList",100],["var ret = 0",82],["ret.toMap",76],["toActionResult(ret)",72],["val ret = new mutable.HashMap[Int, List[Int]]()",69],["m.ret.foreach(refs.find)",64]]},{"word":"return","context":[["* @return",17086],["return",9514],["return false",5622],["return true",4399],["return null",1926],["return None",1864],["return a;",954],["return this",864],["return false;",766],["return result",655]]},{"word":"returns","context":[["* all returns a list of all the valid, known values. We use",218],["requestHolder.get() returns Future.successful(response)",212],["mockResponse.status returns mockStatus",187],["* This trait's implementation returns tags that were passed as strings contained in <code>Tag</code> objects passed to",149],["clusterClient.isConnected returns true",148],["clusterClient.nodes returns nodeSet",145],["* <p>The default implementation returns the result of calling",125],["httpLayer.url(API.format(\"my.access.token\")) returns requestHolder",123],["mockFailureResponse.getMessage returns expectedErrorMessage",123],["networkClient.clusterIoClient.nodesChanged(nodeSet) returns endpoints",117]]},{"word":"rhs","context":[["(lhs, rhs) match {",614],["case _ => super.emitNode(sym, rhs)",410],["override def emitNode(sym: Sym[Any], rhs: Def[Any]) = rhs match {",353],["override def emitNode(sym: Sym[Any], rhs: Def[Any]) = rhs match {",353],["rhs match {",263],["case Assign(lhs, rhs) =>",142],["override def emitNode(sym: Sym[Any], rhs: Def[Any]) = {",98],["case JSBinaryOp(op, lhs, rhs) =>",90],["case BinaryOp(op, lhs, rhs) =>",87],["val rhs = readTreeRef()",80]]},{"word":"right","context":[["* <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: right\">",420],["right",269],["right match {",253],["*  The left nullspace of matrix 'a' is the same as the right nullspace of 'a.t'.",190],["*  @param r   the right cursor",187],["*  @param r  the right cursor",184],["(left, right) match {",174],["case class Branch[A](left: Tree[A], right: Tree[A]) extends Tree[A]",169],["*   <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: right\">",169],["def equaled(left: Any, right: Any): String =",147]]},{"word":"root","context":[["lazy val root = Project(",332],["root",181],["( new_proof, computeMap( p.root.antecedent ++ p.root.succedent, proof, new_proof, new_parent._2 ) )",162],["( new_proof, computeMap( p.root.antecedent ++ p.root.succedent, proof, new_proof, new_parent._2 ) )",162],["val result = root.findAllElemsOrSelf map { e => e.resolvedName }",134],["assertResult(Set(EName(ns, \"root\"), EName(ns, \"child\"))) {",134],["List(\"-w\", \"com.example.root\"),",121],["lazy val root =",114],["lazy val root: Project = Project(",113],["Some( ( r.uProof, r.root, a1, p1 ) )",105]]},{"word":"row","context":[["*  @param i  the row index",661],["/** Maps whole row to an option. Useful for outer joins. */",399],["*  @param ir  the row range",349],["row += 1",297],["row",287],["*  @param e  the ending row index (exclusive) for the search",244],["var row = 0",220],[".value(_.pkey, row.pkey)",202],["<div class=\"row-fluid\">",189],["val row = gen[JodaRow]",188]]},{"word":"rows","context":[["val rows = runSql(sql)",338],["if (dim2 != dim1 + 1) flaw (\"nullspace\", \"requires n (columns) = m (rows) + 1\")",174],["// printRows(rows)",158],["while(r < a.rows) {",146],["b.swap (i, k, i)                // in b, swap rows i and k from column i",120],["if (dim2 < dim1) flaw (\"reduce\", \"requires n (columns) >= m (rows)\")",114],["\"not write any bad rows\" in {",108],["rows",107],["var rowsPerThread = ((Nrows - 1) / nthreads).toInt + 1 // how many rows the thread processes",98],["val rdd = sparkContext.parallelize(rows)",86]]},{"word":"rs","context":[["import javax.ws.rs._",386],["import javax.ws.rs.core.MediaType",217],[".map(rs => rs.long(\"count\")).single.apply().get",198],[".map(rs => rs.long(\"count\")).single.apply().get",198],["import javax.ws.rs.Path",173],["while (rs.next()) {",171],["rs.close()",157],["}.map { rs =>",150],["import javax.ws.rs.core.Response",143],["val (rs, result) = getMocks",138]]},{"word":"rudder","context":[["import com.normation.rudder.domain.policies._",259],["import com.normation.rudder.domain.policies.RuleId",240],["import com.normation.rudder.repository._",228],["import com.normation.rudder.domain.policies.DirectiveId",213],["import com.normation.rudder.web.model.CurrentUser",168],["import com.normation.rudder.domain.nodes.NodeInfo",153],["import com.normation.rudder.domain.nodes.NodeGroupId",130],["import com.normation.rudder.domain.policies.Rule",116],["import com.normation.rudder.domain.workflows.ChangeRequestId",116],["import com.normation.rudder.domain.eventlog._",111]]},{"word":"run","context":[["override def run() {",2601],["def run() {",1874],[".run",1729],["override def run(): Unit = {",1540],["def run(): Unit = {",1011],["val status = suite.run(None, Args(reporter))",752],["a.run(None, Args(rep))",666],["override def run() = {",576],["*        other events reported during the same run",562],["def run {",424]]},{"word":"runner","context":[["import org.junit.runner.RunWith",11532],["import org.specs2.runner.JUnitRunner",2178],["import org.junit.runner._",721],["import org.specs2.runner._",708],["import org.specs.runner._",239],["@org.junit.runner.RunWith(classOf[org.scalatest.junit.JUnitRunner])",147],["runner.done()",126],["package org.specs.runner",114],["* because the \"name\" provided to a JUnit <code>org.junit.runner.Description</code> appears to usually include",86],["val runner = framework.runner(Array.empty, Array.empty, testClassLoader)",84]]},{"word":"running","context":[["running(FakeApplication()) {",1598],["running(FakeApplication(additionalConfiguration = inMemoryDatabase())) {",358],["running = false",245],["running = true",163],["running(app) {",162],["running(fakeApplication) {",132],["while (running) {",114],["running.set(false)",109],["if (running) {",103],["var running = true",86]]},{"word":"runtime","context":[["import scala.reflect.runtime.universe._",2130],["object Test extends dotty.runtime.LegacyApp {",832],["import scala.reflect.runtime.{universe => ru}",376],["import scala.reflect.runtime.universe.TypeTag",358],["import scala.reflect.runtime.universe",299],["import scala.reflect.runtime.{currentMirror => cm}",175],["override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)",165],["import org.eclipse.core.runtime.IProgressMonitor",164],["override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)",162],["import com.asakusafw.runtime.model.DataModel",145]]},{"word":"s","context":[["s\"\"\"",7044],["s",2295],["s.tick()",1365],["s match {",806],["case Some(s) =>",521],["val scheduler = s",451],["case s: String =>",435],["* @param windowDuration width of the window; must be a multiple of this DStream's",371],["def defaultTransK[M[_]: Monad: Catchable: Capture] = Kleisli(_ => action.transK[M].run(s))",364],["s.toString",353]]},{"word":"same","context":[["*        other events reported during the same run",562],["require(b.length == a.length, \"Vectors must be the same length!\")",373],["* @throws DuplicateTestNameException if a test with the same name has been registered previously",350],["*  The left nullspace of matrix 'a' is the same as the right nullspace of 'a.t'.",190],["// To avoid Akka rebinding to the same port, since it doesn't unbind immediately on shutdown",168],["*  @param u  the vector to multiply by (requires same first dimensions)",104],["// Every table needs a * projection with the same type as the table's type parameter",102],["and uncurry and the two forms are in some sense \"the same\". In FP jargon,",94],["we say that they are _isomorphic_ (\"iso\" = same; \"morphe\" = shape, form),",94],["* '''Note:''' Because Hadoop's RecordReader class re-uses the same Writable object for each",93]]},{"word":"sb","context":[["sb.toString",1295],["val sb = new StringBuilder",1196],["val sb = new StringBuilder()",591],["sb.toString()",547],["sb.append(\"\\n\")",215],["val sb = new StringBuffer",147],["sb.append('\"')",146],["sb.append(\")\")",114],["sb.clear()",106],["val sb = new StringBuffer()",102]]},{"word":"sbt","context":[["import sbt._",9410],["import sbt.Keys._",2951],["package sbt",1995],["/* sbt -- Simple Build Tool",1679],["package org.jetbrains.sbt",292],["import com.typesafe.sbt.SbtScalariform._",229],["import sbt._, Keys._",197],["package com.typesafe.sbt",179],["object Build extends sbt.Build {",176],["import org.scalatra.sbt._",141]]},{"word":"sc","context":[["sc.stop()",2170],["val sc = new SparkContext(conf)",2072],["sc: SparkContext,",972],["val sqlContext = new SQLContext(sc)",888],["sc = new SparkContext(\"local\", \"test\")",878],["val sc = new SparkContext(sparkConf)",543],["sc,",354],["sc.stop",336],["sc = new SparkContext(conf)",302],["sc = null",226]]},{"word":"scala","context":[["import scala.concurrent.duration._",18263],["import scala.collection.JavaConversions._",15808],["import scala.concurrent.Future",15060],["import scala.collection.JavaConverters._",13821],["import scala.collection.mutable",12078],["import scala.concurrent.ExecutionContext.Implicits.global",8774],["import scala.util.Try",8033],["import scala.annotation.tailrec",7796],["import scala.util.Random",7340],["import scala.reflect.ClassTag",7121]]},{"word":"scalacheck","context":[["import org.scalacheck._",1623],["import org.scalacheck.Gen",1198],["import org.scalacheck.Prop._",1058],["import org.scalacheck.Arbitrary",767],["import org.scalacheck.Properties",574],["import org.scalacheck.Arbitrary._",524],["import org.scalacheck.Prop.forAll",475],["import org.scalacheck.{Arbitrary, Gen}",442],["import org.scalacheck.Arbitrary.arbitrary",338],["import org.scalacheck.Gen._",297]]},{"word":"scaladsl","context":[["import akka.http.scaladsl.server.Directives._",877],["import akka.http.scaladsl.Http",799],["import akka.stream.scaladsl._",540],["import akka.http.scaladsl.model._",506],["import akka.stream.scaladsl.Source",445],["import akka.http.scaladsl.server.Route",395],["import akka.http.scaladsl.model.StatusCodes._",340],["import akka.http.scaladsl.model.StatusCodes",324],["import akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport._",250],["import akka.http.scaladsl.server._",236]]},{"word":"scalajs","context":[["import scala.scalajs.js",5558],["import japgolly.scalajs.react._",1371],["import scalajs.js, js.`|`",1311],["import org.scalajs.dom",1192],["import japgolly.scalajs.react.vdom.prefix_<^._",1147],["import scala.scalajs.js.annotation.ScalaJSDefined",482],["import scala.scalajs.js.annotation.JSName",410],["import scala.scalajs.js.annotation.JSExport",407],["import org.scalajs.dom._",294],["import org.scalajs.jasminetest.JasmineTest",291]]},{"word":"scalastyle","context":[["// scalastyle:off println",784],["// scalastyle:on println",767],["// scalastyle:off",635],["// scalastyle:on",620],["// scalastyle:off magic.number",214],["package org.scalastyle.scalariform",184],["// scalastyle:off line.size.limit",174],["//scalastyle:on",172],["// scalastyle:off null",162],["//scalastyle:off magic.number",146]]},{"word":"scalatest","context":[["import org.scalatest.FunSuite",10421],["import org.scalatest._",9769],["import org.scalatest.junit.JUnitRunner",7883],["import org.scalatest.mock.MockitoSugar",3559],["import org.scalatest.FlatSpec",3371],["import org.scalatest.Matchers",3073],["import org.scalatest.matchers.ShouldMatchers",2560],["import org.scalatest.{FlatSpec, Matchers}",2434],["package org.scalatest",2203],["import org.scalatest.FunSpec",1726]]},{"word":"scalaz","context":[["import scalaz._",5295],["import scalaz._, Scalaz._",1560],["import scalaz.concurrent.Task",1487],["import scalaz.Scalaz._",1113],["import scalaz.\\/",455],["import scalaz.std.list._",421],["#+scalaz",389],["#-scalaz",389],["import scalaz.syntax.monad._",347],["import scalaz.stream._",318]]},{"word":"scheduler","context":[["val scheduler = s",451],["scheduler,",319],["package org.apache.spark.scheduler",258],["import subscriber.{scheduler => s}",197],["scheduler: Scheduler,",177],["* This file is part of mycollab-scheduler.",173],["* @param scheduler",160],["implicit val scheduler = StubScheduler.random()",132],["import org.apache.spark.scheduler._",128],["package spark.scheduler",128]]},{"word":"schema","context":[["override def transformSchema(schema: StructType): StructType = {",240],["val schema = new DataFileReader(file, new GenericDatumReader[GenericRecord]).getSchema",222],["val schema =",208],["schema,",192],["schema",186],["schema: StructType,",179],["package org.kiji.schema.shell.ddl",122],["val schema = StructType(",120],["import sangria.schema._",114],["import org.kiji.schema.shell.Environment",109]]},{"word":"scope","context":[["def `should use the implicit Equality in scope` {",1594],["it(\"should use the implicit Equality in scope\") {",1196],["\"should use the implicit Equality in scope\" in {",286],["import com.intellij.psi.scope.PsiScopeProcessor",186],["scope: scala.xml.NamespaceBinding, typeAttribute: Boolean): scala.xml.NodeSeq =",186],["implicit scope: Scope): TailRec[Tree] = {",157],["val ns = elem.scope.getURI(pre)",127],["Helper.stringToXML(obj.toString, namespace, elementLabel, scope)",120],["* will register the passed string for forwarding later during test execution. If invoked from inside a scope,",120],["scope",110]]},{"word":"sealed","context":[["sealed trait State",290],["sealed trait Tree[+A]",170],["sealed trait Option[+A] {",148],["sealed abstract class List",142],["sealed trait Message",128],["sealed trait Event",122],["sealed trait Data",119],["sealed trait Input",118],["sealed trait Command",108],["sealed trait List[+A] // `List` data type, parameterized on a type, `A`",100]]},{"word":"search","context":[["*  @param e  the ending index (exclusive) for the search",516],["import com.intellij.psi.search.GlobalSearchScope",365],["*  @param e  the ending row index (exclusive) for the search",244],["val req = search in \"music\" types \"bands\" postFilter {",200],["// where to search snippet",163],["val req = search in \"music\" types \"bands\" aggs {",150],["import com.intellij.psi.search.searches.ReferencesSearch",121],["* @param query the <code>Query</code> with which to search",115],["val req = search in \"*\" types(\"users\", \"tweets\") limit 5 query {",114],["val req = search in \"school\" types \"student\" aggs {",108]]},{"word":"second","context":[["tc.advance(1.second)",184],["s.tick(1.second)",175],["implicit val timeout = Timeout(1 second)",98],["override val theTestNames = Vector(\"must first test\", \"must second test\")",90],["override val theTestNames = Vector(\"can first test\", \"can second test\")",90],["override val theTestNames = Vector(\"should first test\", \"should second test\")",90],["\"second test\" ignore {}",90],["\"second test\" ignore { s => }",80],["Await.result(offerProcessor.processOffer(offer), 1.second)",79],["val deadline: Timestamp = clock.now() + 1.second",79]]},{"word":"seconds","context":[["implicit val timeout = Timeout(5 seconds)",410],[".failureAccrualParams(Int.MaxValue, 0.seconds)",408],["implicit val timeout = Timeout(5.seconds)",390],[".pause(10 seconds, 20 seconds)",285],[".pause(10 seconds, 20 seconds)",285],["Await.result(promise.future, 5.seconds)",209],["implicit val timeout = Timeout(10 seconds)",146],["}.get(10.seconds)()",140],["val resp = Await.result(future, 3.seconds)",140],["within(30 seconds) {",130]]},{"word":"section","context":[["* Notwithstanding to the terms of section 5 (5. Conveying Modified Source",1872],["* In accordance with the terms of section 7 (7. Additional Terms.) of",1872],["</section>",254],["section(\"unit\")",163],["* <a href=\"#sharedFixtures\">Shared fixtures</a> section in the main documentation for this trait.",124],["section = ReferenceSection,",110],["* <a href=\"#howItExecutes\">How it executes</a> section in the main documentation for this trait.",70],["section(\"functional\")",62],["<section-1>",50],["</section-1>",50]]},{"word":"security","context":[["import java.security.MessageDigest",903],["import java.security.SecureRandom",365],["import org.apache.accumulo.core.client.security.tokens.PasswordToken",227],["import java.security.cert.X509Certificate",206],["import org.apache.accumulo.core.security.Authorizations",185],["import java.security.Principal",151],["package security",150],["import org.apache.hadoop.security.UserGroupInformation",142],["import org.apache.kafka.common.security.JaasUtils",113],["import com.precog.common.security._",110]]},{"word":"see","context":[["* @see [[http://api.highcharts.com/highcharts]]",687],["* @see [[http://api.highcharts.com/highstock]]",476],["* along with Kiama.  (See files COPYING and COPYING.LESSER.)  If not, see",317],["* For more information see",197],["*  FIX: need a more robust algorithm for computing nullspace (@see Fac_QR.scala).",190],["* see http://code-pulse.com/bytefrog",176],["* @see [[http://api.highcharts.com/highmaps]]",151],["* @see [[LoggingAdapter]]",125],["* This trait's implementation of this method is  marked as final. For insight onto why, see the",124],["*  @see Eigen.scala",122]]},{"word":"select","context":[["select",764],[".select(\"year\")",215],["} yield select",212],["</select>",137],["override val select: js.UndefOr[js.Function] = selectOuter",120],["val select: js.UndefOr[js.Function] = js.undefined",120],["val selectOuter: js.UndefOr[js.Function] = select",120],["|select",116],["| select",96],[".select(",85]]},{"word":"self","context":[["context.stop(self)",2351],["self =>",1061],["context stop self",636],["self ! PoisonPill",539],["self",393],["val self = this",265],["self,",219],["// MUST BE synchronized by `self`",165],["self match {",165],["private val self = this",113]]},{"word":"send","context":[["// send some messages to each broker",195],["* @return The result to send to the client.",160],["// send some messages",126],["l.send(EmptyMessage)",109],["// send event",103],["exchange.getResponseSender.send(JsObject(",98],["it(\"should send InfoProvided events with aboutAPendingTest set to true for info \" +",94],["it(\"should send InfoProvided events with aboutAPendingTest set to false for info \" +",94],["application.tracker.send(new HitBuilders.EventBuilder()",93],["l.send(new BarClose(new DateTime))",92]]},{"word":"seq","context":[["DBIO.seq(",545],["seq",181],["seq match {",146],["seq(",144],["case _ => Left(\"reads failed: seq must be scala.xml.Node\")",143],["var seq = 0",139],["tryruleT(seq)*,",128],["seq += 1",106],["println(\"[\" + seq + \"] Main Menu\")",74],["case Some(seq) =>",72]]},{"word":"sequence","context":[["import com.normation.utils.Control.sequence",162],["Future.sequence {",142],["sequence(",125],["* returns a new object with value added to the sequence",86],["* @return a new object with value added to the sequence",85],["import im.actor.server.api.rpc.service.sequence.{ SequenceServiceConfig, SequenceServiceImpl }",77],["Future.sequence(",77],["import im.actor.server.sequence.SeqUpdatesExtension",68],["package im.actor.server.sequence",67],["* This function decodes the bit sequence `bits` using the code tree `tree` and returns",66]]},{"word":"server","context":[["server.httpGet(",939],["import akka.http.scaladsl.server.Directives._",877],["package kafka.server",705],["server.start()",616],["server.close()",534],["server.stop()",462],["import akka.http.scaladsl.server.Route",395],["import im.actor.server.db.DbExtension",390],["import kafka.server.KafkaConfig",348],["server.shutdown()",308]]},{"word":"service","context":[["package service",553],["import service._",322],["package com.twitter.finagle.service",309],["Await.result(service(123))",289],["service.close()",289],["service(request)",272],["Some(\"releases\"  at nexus + \"service/local/staging/deploy/maven2\")",265],["Some(\"releases\" at nexus + \"service/local/staging/deploy/maven2\")",246],[".build(service)",205],["assert(service.isAvailable)",188]]},{"word":"services","context":[["* supplementary functions or services in addition to those offered by",1872],["package services",785],["* These activities include: offering paid services to customers,",539],["import com.amazonaws.services.s3.AmazonS3Client",191],["import services._",131],["sealRoute(services.workspaceRoutes) ~>",126],["import com.normation.cfclerk.services.TechniqueRepository",121],["sealRoute(services.adminRoutes) ~>",114],["* This file is part of mycollab-services.",112],["import models.services.UserService",104]]},{"word":"servlet","context":[["import javax.servlet.http.HttpServletRequest",1274],["import javax.servlet.ServletContext",484],["import javax.servlet.http.HttpServletResponse",338],["import javax.servlet._",268],["import javax.servlet.http.{HttpServletResponse, HttpServletRequest}",235],["import javax.servlet.http.{HttpServletRequest, HttpServletResponse}",216],["import javax.servlet.http._",195],["import javax.servlet.http.{ HttpServletRequest, HttpServletResponse }",182],["package servlet",150],["import javax.servlet.http.HttpServlet",136]]},{"word":"session","context":[["session {",950],["conn.withSessionDo { session =>",790],["db.withSession { implicit session =>",588],["implicit session =>",398],["session.close()",381],["session",316],["session.execute(",272],["DB autoCommit { implicit session =>",191],["db.withTransaction { implicit session =>",173],["DB withSession { implicit session =>",160]]},{"word":"set","context":[["* A \"Related Module\" means a set of sources files including their",1872],["log.append(set)",328],["set",322],["// vim: set ts=4 sw=4 et:",284],["// Same as previous, except Ignore specifically mentioned in excludes set",225],["// No tagsToInclude set, FastAsLight excluded",225],["// set up",205],["*      nullspace (a) = set of orthogonal vectors v s.t. a * v = 0",190],["Await.result(mycluster2.ready) // give it sometime for the cluster to get the initial set of memberships",187],["Await.result(mycluster1.ready) // give it sometime for the cluster to get the initial set of memberships",187]]},{"word":"settings","context":[[").settings(",2170],[".settings(",1649],["settings = Project.defaultSettings ++",1018],["settings = defaultSettings",584],["val main = play.Project(appName, appVersion, appDependencies).settings(",406],["settings = defaultSettings ++ Seq(",334],["import settings._",311],["// Add your own project settings here",301],["settings = Defaults.coreDefaultSettings ++",297],["settings = buildSettings ++ Seq(",285]]},{"word":"sft","context":[["ds.createSchema(sft)",303],["* @param sft",147],["val unpacked = StatSerializer(sft).deserialize(packed)",134],["val featureCollection = new DefaultFeatureCollection(sftName, sft)",128],["* @param sft simple feature type",119],["val sf = new ScalaSimpleFeature(\"fakeid\", sft)",101],["val packed   = StatSerializer(sft).serialize(stat)",97],["sft: SimpleFeatureType,",90],["val fs = loadFeatures(ds, sft, encodedFeatures)",86],["sft",81]]},{"word":"should","context":[["e1.failedCodeLineNumber.get should be (thisLineNumber - 3)",3278],["actual should be (expected)",3093],["def `should use the implicit Equality in scope` {",1594],["def `should do nothing if valid, else throw a TFE with an appropriate error message` {",1594],["def `should use an explicitly provided Equality` {",1594],["e1.failedCodeFileName.get should be (fileName)",1428],["def `should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value` {",1302],["it(\"should do nothing if valid, else throw a TFE with an appropriate error message\") {",1196],["it(\"should use the implicit Equality in scope\") {",1196],["it(\"should use an explicitly provided Equality\") {",1196]]},{"word":"shouldBe","context":[["status(result) shouldBe SEE_OTHER",358],["status(result) shouldBe 200",353],["status shouldBe OK",337],["status(result) shouldBe 303",329],["form.hasErrors shouldBe true",309],["compiler.scapegoat.feedback.warnings.size shouldBe 0",268],["status shouldBe StatusCodes.OK",214],["form.errors.length shouldBe 1",193],["compiler.scapegoat.feedback.warnings.size shouldBe 1",172],["contentType shouldBe `application/json`",170]]},{"word":"shutdown","context":[["system.shutdown()",1414],["def shutdown() {",792],["shutdown()",448],["def shutdown(): Unit = {",343],["servers.foreach(_.shutdown())",314],["server.shutdown()",308],["actorSystem.shutdown()",303],["context.system.shutdown()",265],["def shutdown() = {",224],["system.shutdown",201]]},{"word":"simple","context":[["import play.api.db.slick.Config.driver.simple._",569],["import org.opengis.feature.simple.{SimpleFeature, SimpleFeatureType}",535],["import org.opengis.feature.simple.SimpleFeatureType",495],["import driver.simple._",494],["import scala.slick.driver.H2Driver.simple._",327],["import profile.simple._",325],["import org.opengis.feature.simple.SimpleFeature",287],["import scala.slick.driver.MySQLDriver.simple._",243],["import org.geotools.feature.simple.SimpleFeatureBuilder",187],["import scala.slick.driver.PostgresDriver.simple._",138]]},{"word":"since","context":[["* @since 1.0",871],["* @since 1.2.0",763],["* @since 1.3.0",704],["* @since 3.0",608],["* @since 4.1.0",493],["* @since 1.4.0",490],["* @since 4.0",490],["* @since   0.1",375],["* @since 2.2",315],["* @since 1.5.0",289]]},{"word":"single","context":[[".map(rs => rs.long(\"count\")).single.apply().get",198],["it should \"provide aliases for single unit values\" in {",130],["def `should throw TFE with friendly reminder when single GenTraversable argument is passed and failed` {",112],["* Events for each single point",81],["* @param point Properties for each single point",81],["* @param events Events for each single point",81],["* Properties for each single point",81],["}.map(_.long(1)).single.apply().get",79],["// single proxy for each type family",77],["}.map(_.long(1)).single().apply().get",69]]},{"word":"size","context":[["while (i < size) {",581],["if (set_addr.size > 1) throw new InternalError(\"API heap allocation: Size of env address is \" + set_addr.size)",521],["if (set_addr.size > 1) throw new InternalError(\"API heap allocation: Size of env address is \" + set_addr.size)",521],["def size: Int",352],["assert(tp.size === 2)",302],["compiler.scapegoat.feedback.warnings.size shouldBe 0",268],["assert(testFailedEvents.size === 1)",267],["size",247],["assert(recordedEvents.size === 3)",237],["for (i <- 0 until size) {",209]]},{"word":"sleep","context":[["Thread.sleep(1000)",2451],["Thread.sleep(100)",1358],["Thread.sleep(500)",1014],["Thread.sleep(2000)",810],["Thread.sleep(5000)",763],["Thread.sleep(3000)",433],["Thread.sleep(10)",429],["Thread.sleep(200)",369],["Thread.sleep(10000)",333],["Thread.sleep(50)",289]]},{"word":"slf4j","context":[["import org.slf4j.LoggerFactory",6978],["import com.typesafe.scalalogging.slf4j.Logging",1010],["import grizzled.slf4j.Logging",842],["import com.typesafe.scalalogging.slf4j.LazyLogging",700],["import org.slf4j.{Logger, LoggerFactory}",543],["import org.slf4j.Logger",443],["import grizzled.slf4j.Logger",394],["import com.typesafe.scalalogging.slf4j.StrictLogging",366],["import org.slf4j.{LoggerFactory, Logger}",273],["import akka.event.slf4j.SLF4JLogging",218]]},{"word":"slick","context":[["import slick.driver.PostgresDriver.api._",712],["import slick.driver.JdbcProfile",621],["import play.api.db.slick.Config.driver.simple._",569],["import scala.slick.driver.H2Driver.simple._",327],["import slick.ast._",314],["import slick.driver.H2Driver.api._",294],["import slick.SlickException",262],["import scala.slick.driver.MySQLDriver.simple._",243],["import play.api.db.slick.DatabaseConfigProvider",241],["import slick.dbio.DBIO",235]]},{"word":"so","context":[["* furnished to do so, subject to the following conditions:",2674],["furnished to do so, subject to the following conditions:",262],["* so, subject to the following conditions:",224],["assert(so.size === 1)",180],["// Set a known test id so we can validate the unique property is added",162],["@return true if this is so, else false",160],["// I'm returning a ListSet here so that they tests will be run in registration order",129],["// We can't have the ensureTopicExists check here since the controller sends it as an advisory to all brokers so they",111],["// furnished to do so, subject to the following conditions:",100],["val so = rep.scopeOpenedEventsReceived",97]]},{"word":"some","context":[["// send some messages to each broker",195],["val className = \"some.class.name\"",175],["val testClassName = \"some.class.name\"",170],["// send some messages",126],["List(\"-b\", \"some/path/file.xml\"),",95],["and uncurry and the two forms are in some sense \"the same\". In FP jargon,",94],["// so long as we have some way of comparing elements of the `Array`",89],["* Here are some examples:",87],["* bit of behavior required by the system being tested. The test can also include some code that",85],["* or for some other reason, an exception is thrown.",83]]},{"word":"source","context":[["* Redistribution and use in source and binary forms, with or without",3573],["Redistribution and use in source and binary forms, with or without",639],["* disclosing the source code of your own applications.",540],["* The interactive user interfaces in modified source and object code versions",539],["* shipping TA Buddy with a closed source product.",534],["source.close()",492],["val source = \"\"\"",462],["protected override def insert(source: XContentBuilder): Unit = {",400],["val source =",391],["source.endObject()",366]]},{"word":"span","context":[["</span>",626],["<span>",198],["val span = getSpan(info)",93],["/** <span class=\"badge badge-ecma6\" style=\"float: right;\">ECMAScript 6</span>",89],["/** <span class=\"badge badge-ecma6\" style=\"float: right;\">ECMAScript 6</span>",89],["* <p>Defaults to <code>&lt;span style=\"font-size: 10px\"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>",78],["* <p>Defaults to <code>&lt;span style=\"font-size: 10px\"&gt;{point.key}&lt;/span&gt;&lt;br/&gt;</code></p>",78],["\"\"\"<span class=\"stImport\">import org.scalatest._</span>",65],["\"\"\"<span class=\"stImport\">import org.scalatest._</span>",65],["<span class=\"icon-bar\"></span>",63]]},{"word":"spark","context":[["import org.apache.spark.rdd.RDD",7440],["import org.apache.spark.SparkContext",4498],["import org.apache.spark.SparkContext._",2295],["import org.apache.spark.{SparkConf, SparkContext}",2037],["import org.apache.spark.SparkConf",1822],["import org.apache.spark.Logging",1524],["import org.apache.spark.sql.types._",1484],["import org.apache.spark._",1402],["import org.apache.spark.storage.StorageLevel",1362],["import org.apache.spark.sql.Row",1241]]},{"word":"spec","context":[["val spec = new MySpec",997],["ensureTestFailedEventReceived(spec, \"should blow up\")",864],["* from outside in, and the passed spec text, with one space placed between each item. (See the documenation",248],["* Add your spec here.",234],["import javax.crypto.spec.SecretKeySpec",223],["import scala.{specialized => spec}",201],["val spec = new ExampleSpec",190],["val spec = new MySuite",164],["* add your integration spec here.",149],["val status = spec.run(None, Args(reporter = rep))",144]]},{"word":"specified","context":[["* If the specified field is optional, it is set to None.  Otherwise, if the field is",181],["def `should throw TestFailedException with normal error message if specified size is negative` {",156],["* @throws IllegalArgumentException if <code>testName</code> is defined, but no test with the specified test name",151],["it(\"should throw TestFailedException with normal error message if specified size is negative\") {",116],["* Run a test. This trait's implementation runs the test registered with the name specified by",114],["def `should throw TestFailedException with normal error message if specified length is negative` {",108],["it(\"should throw TestFailedException with normal error message if specified length is negative\") {",86],["* Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field",85],["* of iterations of gradient descent using the specified step size. Each iteration uses",82],["def `should throw TestFailedException if object size does not match specified size` {",72]]},{"word":"specs2","context":[["import org.specs2.mutable.Specification",6153],["import org.specs2.mutable._",4558],["import org.specs2.runner.JUnitRunner",2178],["import org.specs2.mock.Mockito",1192],["import org.specs2._",787],["import org.specs2.specification.Scope",772],["import org.specs2.runner._",708],["import org.specs2.Specification",615],["import org.specs2.ScalaCheck",560],["import org.specs2.mutable.SpecificationWithJUnit",344]]},{"word":"split","context":[["val words = lines.flatMap(_.split(\" \"))",147],["override def getPreferredLocations(split: Partition): Seq[String] = {",116],["val fields = line.split(\"\\t\")",116],["val columns = line.split(\"\\\\|\")",90],["val topic = topicPartition.split(\"-\").head",85],["_.split(\":\") match {",79],["val part = Integer.valueOf(topicPartition.split(\"-\").last).intValue",69],[".flatMap(_.split(\"\\\\s+\"))",66],["val (m, n) = (lines.length, lines(0).split (sp).length)",65],["val Array(from, to) = params(\"commitId\").split(\"\\\\.\\\\.\\\\.\")",64]]},{"word":"spray","context":[["import spray.json._",3067],["import spray.http._",1353],["import spray.can.Http",1147],["import spray.routing._",935],["import spray.json.DefaultJsonProtocol._",656],["import spray.httpx.SprayJsonSupport._",617],["import spray.json.DefaultJsonProtocol",603],["import spray.client.pipelining._",566],["import spray.http.StatusCodes._",528],["import spray.http.StatusCodes",403]]},{"word":"sql","context":[["sql(",2872],["import java.sql.Timestamp",1512],["import org.apache.spark.sql.types._",1484],["import org.apache.spark.sql.Row",1241],["import org.apache.spark.sql.SQLContext",1119],["import java.sql.Connection",744],["sql\"\"\"",670],["import org.apache.spark.sql.DataFrame",647],["import org.apache.spark.sql.types.StructType",570],["import org.apache.spark.sql.functions._",557]]},{"word":"sqlContext","context":[["val sqlContext = new SQLContext(sc)",888],["import sqlContext.implicits._",771],["sqlContext: SQLContext,",366],["sqlContext.sql(",309],["val sqlContext = new org.apache.spark.sql.SQLContext(sc)",206],["val sqlContext = SQLContext.getOrCreate(sc)",139],["implicit val sqlContext = new SQLContext(sc)",107],["override def run(sqlContext: SQLContext): Seq[Row] = {",105],["def run(sqlContext: SQLContext): Seq[Row] = {",99],["val ssc = sqlContext; import ssc.implicits._",87]]},{"word":"src","context":[["<include href=\"src/test/resources/xsd/test-urlxsd.xsd\"/>",446],["register(\"test://app/src/test/resources/xsd/test-urlxsd.xsd\",",337],["XML.loadFile(\"src/test/resources/xsd/test-urlxsd.xsd\"))",337],["(base / \"config\" +++ base / \"src\" / \"test\" / \"resources\").get",263],["// from https://github.com/apache/thrift/blob/master/lib/java/src/org/apache/thrift/protocol/TType.java",92],["src.close()",87],["src,",76],["src",67],["case ShapePreservingBuilderF(src, inputs, op) =>",53],["def reparent[B](newSrc: B) = copy(src = newSrc)",52]]},{"word":"ssc","context":[["ssc.start()",1282],["ssc.awaitTermination()",627],["ssc.stop()",431],["ssc: StreamingContext,",134],["val clock = ssc.scheduler.clock.asInstanceOf[ManualClock]",104],["ssc",102],["ssc.checkpoint(checkpointDir)",96],["val ssc = sqlContext; import ssc.implicits._",87],["val ssc = sqlContext; import ssc.implicits._",87],["if (ssc != null) {",69]]},{"word":"stHighlight","context":[["* <pre class=\"stHighlight\">",15662],["* <pre class=\"stHighlight\">testing",14]]},{"word":"stack","context":[["def `should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value` {",1302],["it(\"should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value\") {",659],["val program = ScriptProgram(TestUtil.testProgram, stack,script)",300],["*     val stack = new Stack[Int]",210],["\"should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value\" in {",176],["*     stack",159],["*       val size = stack.size",159],["val stack = new Stack[Int]",144],["*        or a <code>Throwable</code> created to capture stack trace information about the problem.",139],["stack",135]]},{"word":"start","context":[["ssc.start()",1282],["val start = System.currentTimeMillis()",755],["def start() {",686],["alg.start()",679],["val start = System.currentTimeMillis",665],["fast\"Hello, World!${start}blahblah$i${p1}\\n${p2}blahblah\" ->",640],["server.start()",616],["start()",537],["}.start()",529],["thread.start()",420]]},{"word":"state","context":[["state match {",1110],["state",955],["import mesosphere.marathon.state.PathId._",497],["import mesosphere.marathon.state._",440],["package mesosphere.marathon.state",355],["import state._",201],["import mesosphere.marathon.state.Timestamp",198],["// state representation type",196],["val extracted = Project.extract(state)",187],["import mesosphere.marathon.state.PathId",173]]},{"word":"stats","context":[["import com.twitter.finagle.stats.StatsReceiver",435],["package com.twitter.finagle.stats",260],["import com.twitter.finagle.stats.InMemoryStatsReceiver",252],["import com.twitter.finagle.stats.{NullStatsReceiver, StatsReceiver}",213],["import com.twitter.ostrich.stats.Stats",176],["import com.twitter.finagle.stats.{DefaultStatsReceiver, StatsReceiver}",166],["import com.twitter.finagle.stats.NullStatsReceiver",157],["import com.twitter.finagle.stats.{StatsReceiver, NullStatsReceiver}",156],["package breeze.stats.distributions",140],["import breeze.stats._",121]]},{"word":"status","context":[["status should equal(200)",1130],["status",822],["val status = suite.run(None, Args(reporter))",752],["status.waitUntilCompleted()",740],[".check(status.is(200)))",656],[".check(status.is(200))",569],["status(result) must equalTo(OK)",561],["status(result) should be(SEE_OTHER)",452],["status should be(OK)",450],["val status = suite.run(None, Args(reporter = rep))",419]]},{"word":"step","context":[["step {",661],["step",426],["assert (checker, \"count(/chk:checker/chk:step[@type='METHOD' and @match='POST']) = 2\")",287],["assert (checker, \"count(/chk:checker/chk:step[@type='METHOD' and @match='GET']) = 1\")",283],["assert (checker, \"count(/chk:checker/chk:step[@type='METHOD' and @match='PUT']) = 1\")",281],["assert (checker, \"count(/chk:checker/chk:step[@type='REQ_TYPE_FAIL' and @notMatch='(?i)(application/xml)(;.*)?']) = 1\")",281],["step(1)",208],["import step.ctx._",183],["assert (checker, \"count(/chk:checker/chk:step[@type='WELL_XML']) = 2\")",182],["(step: StepExecutor) => {",179]]},{"word":"stop","context":[["context.stop(self)",2351],["sc.stop()",2170],["def stop() {",790],["context stop self",636],["stop()",550],["Nested Timer(stop)",465],["server.stop()",462],["ssc.stop()",431],["sc.stop",336],["def stop(): Unit = {",322]]},{"word":"storage","context":[["import org.apache.spark.storage.StorageLevel",1362],["import mesosphere.marathon.io.storage.StorageProvider",226],["val storage = mock[Storage]",201],["import com.twitter.conversions.storage._",198],["storage,",197],["package org.apache.spark.storage",186],["import breeze.storage.Zero",137],["package com.twitter.zipkin.storage.cassandra",134],["storage: StorageProvider,",134],["import spark.storage.StorageLevel",134]]},{"word":"store","context":[["store",125],["store = null",116],["store.stop()",115],["store: PersistentStore,",101],["// create the data store",100],["assert(store.getSingle(\"a2\") != None, \"a2 was not in store\")",99],["assert(store.getSingle(\"a2\") != None, \"a2 was not in store\")",99],["val store = new MarathonStore[AppDefinition](state, metrics, () => AppDefinition(), \"app:\")",85],["when(repo.store(any())).thenReturn(Future.successful(app))",84],["store = new BlockManager(\"<driver>\", actorSystem, master, serializer, 1200)",84]]},{"word":"str","context":[["str",430],["str match {",199],["val str =",108],["var str = \"\"",106],["println(str)",103],["* @param str",94],["JsString(str)",88],["val str = dateTime.print(x)",86],["case Some(str) =>",85],["dateTimeParser.parseDateTime(str)",84]]},{"word":"stream","context":[["import akka.stream.ActorMaterializer",1378],["import akka.stream.Materializer",607],["stream.close()",541],["import akka.stream.scaladsl._",540],["import akka.stream.scaladsl.Source",445],["import scalaz.stream._",318],["package scalaz.stream",315],["import scalaz.stream.Process",293],["import akka.stream._",267],["import akka.stream.scaladsl.Flow",219]]},{"word":"streaming","context":[["private[streaming]",544],["import org.apache.spark.streaming.dstream.DStream",497],["import org.apache.spark.streaming.StreamingContext",446],["import org.apache.spark.streaming._",394],["import org.apache.spark.streaming.{Seconds, StreamingContext}",368],["import org.apache.spark.streaming.StreamingContext._",195],["package org.apache.spark.streaming",174],["package org.apache.spark.streaming.dstream",165],["import org.apache.spark.streaming.receiver.Receiver",152],["import org.apache.spark.streaming.Seconds",141]]},{"word":"string","context":[["testContext.run(q).string mustEqual",361],["input: string",266],["* will register the passed string for forwarding later during test execution. If invoked while this",263],["import scalaz.std.string._",180],["output: string",173],["dataType = \"string\",",157],["\"convert to the correct string\" in {",144],["* Given the driver type, return the string required to create the column in the database",139],["* will register the passed string for forwarding later during test execution. If invoked from inside a scope,",120],["\"type\": \"string\",",118]]},{"word":"stripMargin","context":[["\"\"\".stripMargin",10690],["\"\"\".stripMargin)",4948],["|\"\"\".stripMargin",3448],["|}\"\"\".stripMargin",1492],["|\"\"\".stripMargin)",862],["\"\"\".stripMargin.trim",813],["\"\"\".stripMargin.trim()",797],["\"\"\".stripMargin,",761],["\"\"\".stripMargin.replaceAll(\"\\r\", \"\").trim()",684],["\"\"\".stripMargin),",572]]},{"word":"style","context":[["* <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: center\">",792],["style: U[js.Any] = undefined,",485],["* <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: right\">",420],["style.foreach(v => props.updateDynamic(\"style\")(v))",339],["style.foreach(v => props.updateDynamic(\"style\")(v))",339],["* <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: left\">",284],["*   <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: left\">",169],["*   <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: right\">",169],["* <table style=\"border-collapse: collapse; border: 1px solid black\">",161],["*   <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: center\">",144]]},{"word":"subject","context":[["* furnished to do so, subject to the following conditions:",2674],["* This Source Code Form is subject to the terms of the Mozilla Public",767],["* subject to the following conditions:",295],["furnished to do so, subject to the following conditions:",262],["\"A subject\" - {",252],["describe(\"A subject\") {",252],["/* This Source Code Form is subject to the terms of the Mozilla Public",246],["* so, subject to the following conditions:",224],["behavior of \"A subject\"",180],["\"A subject\" when {",180]]},{"word":"success","context":[["success",1953],["status whenCompleted { _ => promise.success(reporter) }",373],["success => {",349],["status whenCompleted { _ => promise.success(rep) }",262],["if (success) {",168],["promise.success(Continue)",151],["success => fail(\"Should have errored out\")",147],["startConsuming.success(Continue)",130],["promise.success(())",129],["success,",122]]},{"word":"successful","context":[["Future.successful(())",494],["chain.successful {",412],["Future.successful {",368],["(any[ExecutionContext])).thenReturn(Future.successful(Some(SOME_USER)))",262],["Future.successful(None)",248],["operation.successful {",235],["requestHolder.get() returns Future.successful(response)",212],["Future.successful(",208],["case None => Future.successful(None)",166],["* @return Success(id) if successful, otherwise Failure",162]]},{"word":"such","context":[["* This method enables syntax such as the following:",1148],["* This method supports syntax such as the following:",1004],["* For example, this method supports syntax such as the following:",501],["* This class enables syntax such as the following:",155],["* This field supports syntax such as the following:",92],["* for library developers. End users will prefer a safer, higher-level API such as that provided",91],["* This class enables syntax such as the following test registration:",88],["* agrees to be fully responsible for the fact that any such",77],["* For example, this method enables syntax such as the following:",73],["* This field enables syntax such as the following:",72]]},{"word":"suite","context":[["val suite = new MySuite",812],["val status = suite.run(None, Args(reporter))",752],["val status = suite.run(None, Args(reporter = rep))",419],["val suite = new ExampleSpec",381],["* @throws TestRegistrationClosedException if invoked after <code>run</code> has been invoked on this suite",350],["// This file is part of the Equal application suite.",261],["* Returns a user friendly string for this suite, composed of the",98],["* @return a user-friendly string for this suite",98],["* will collect and report information about the running suite of tests.",81],["* The suite class name parameter is optional, because suites in ScalaTest are an abstraction that",79]]},{"word":"sum","context":[["sum",1273],["var sum = 0.0",1064],["var sum = 0",666],["var sum = 0L",457],["}.sum",452],["sum += elem",434],["var sum = _0",409],[".sum",370],["Sample(o, count(sourceCount), sum(sourceCount), Zero, Zero)",207],["/** Returns the sum of this value and `x`. */",149]]},{"word":"super","context":[["super.beforeAll()",1308],["super.afterAll()",1101],["super.setUp()",635],["super.onCreate(savedInstanceState)",632],["super.postStop()",616],["super.preStart()",615],["super.withFixture(test)",452],["super.tearDown()",431],["case _ => super.emitNode(sym, rhs)",410],["case _ => super.accept(visitor)",390]]},{"word":"swing","context":[["import scala.swing._",893],["import javax.swing._",555],["import javax.swing.JPanel",281],["import scala.swing.event._",249],["import javax.swing.Icon",230],["import swing._",215],["import javax.swing.SwingUtilities",191],["import javax.swing.JFrame",186],["import javax.swing.JComponent",179],["import javax.swing.JLabel",141]]},{"word":"sym","context":[["case _ => super.emitNode(sym, rhs)",410],["val sym = tree.symbol",356],["override def emitNode(sym: Sym[Any], rhs: Def[Any]) = rhs match {",353],["sym",217],["val sym = tp.symbol",176],["val sym = cd.symbol",143],["implicit val pos = sym.pos",110],["val sym = fun.symbol",106],["override def emitNode(sym: Sym[Any], rhs: Def[Any]) = {",98],["val sym = tpe.typeSymbol",93]]},{"word":"symbol","context":[["val sym = tree.symbol",356],["val sym = tp.symbol",176],["val sym = cd.symbol",143],["<constantatomformula symbol=\"A\"/>",120],["val symbol: js.UndefOr[String] = js.undefined",115],["override val symbol: js.UndefOr[String] = symbolOuter",115],["val symbolOuter: js.UndefOr[String] = symbol",115],["val sym = fun.symbol",106],["symbol: Symbol,",104],["symbol match {",89]]},{"word":"synchronized","context":[["synchronized {",3141],["this.synchronized {",1184],["lock.synchronized {",603],["lock synchronized {",491],["group synchronized {",186],["// MUST BE synchronized by `self`",165],["this synchronized {",140],["brokerLock synchronized {",135],["lazy val targetTypeTag = TypeTag.synchronized {",114],["self.synchronized {",107]]},{"word":"syntax","context":[["* This method enables the following syntax:",3913],["import play.api.libs.functional.syntax._",1600],["* This method enables syntax such as the following:",1148],["* This method supports syntax such as the following:",1004],["* This method enables the following syntax given a <code>MatcherFactory$arity$</code>:",668],["* For example, this method supports syntax such as the following:",501],["import scalaz.syntax.monad._",347],["import spire.syntax.cfor._",327],["import io.circe.syntax._",315],["import scalaz.syntax.std.option._",249]]},{"word":"sys","context":[["sys.exit(1)",1327],["import scala.sys.process._",913],["sys.error(\"todo\")",518],["import sys.process._",370],["sys.exit(0)",324],["sys.exit()",180],["import scala.sys.process.Process",152],["__elementLabel getOrElse { sys.error(\"missing element label.\") },",131],["sys.addShutdownHook {",123],["sys.exit(-1)",109]]},{"word":"system","context":[["system.shutdown()",1414],["import system.dispatcher",1267],["TestKit.shutdownActorSystem(system)",627],["implicit val system = ActorSystem()",565],["system: ActorSystem,",454],["system.terminate()",453],["implicit val ec = system.dispatcher",420],["import context.system",335],["def actorRefFactory = system",320],["implicit val system = context.system",312]]},{"word":"t","context":[["t",1839],["t match {",1803],["case t: Throwable =>",1712],["throw t",590],["case t =>",573],["case Failure(t) =>",527],["val t = new Tester(input)",480],["case Some(t) =>",355],["case Cons(h, t) =>",348],["case t: Throwable => {",336]]},{"word":"t1","context":[["t1;::;1,",389],["val t1 = System.nanoTime()",231],["val t1 = System.currentTimeMillis",166],["val t1 = System.currentTimeMillis()",165],["val r1 = obj.reduce(t1.get, t2.get)",120],["val t1 = obj.prepare(cell1)",85],["t1.byIssue(t2.userName, t2.repositoryName, t2.issueId)",79],["val lapse = (t1 - t0) / 1000000;",77],[".filter { case (t1, t2) =>",65],["t1",62]]},{"word":"t2","context":[["val t2 = System.currentTimeMillis",124],["val r1 = obj.reduce(t1.get, t2.get)",120],["val t2 = obj.prepare(cell2)",85],["left._1 == t2._1 &&",84],["case t2: Tuple2[_, _] =>",84],["t1.byIssue(t2.userName, t2.repositoryName, t2.issueId)",79],["t1.byIssue(t2.userName, t2.repositoryName, t2.issueId)",79],["t1.byIssue(t2.userName, t2.repositoryName, t2.issueId)",79],[".filter { case (t1, t2) =>",65],["val t2 = System.currentTimeMillis()",62]]},{"word":"table","context":[["</table>",871],["table,",286],["* </table>",258],["<table>",240],["table",222],["table: String,",203],["* <table style=\"border-collapse: collapse; border: 1px solid black\">",161],["* </td></tr></table>",130],["* <table><tr><td class=\"usage\">",130],["* <table>",114]]},{"word":"tag","context":[["override lazy val tag = {",251],["* @throws NullPointerException if <code>specText</code> or any passed test tag is <code>null</code>",223],["lazy val tag = {",215],["} tag UnitTest",191],["val tag = readByte()",191],["tag match {",155],["implicit val tagA = eA.tag",148],["assert(caught2.getMessage === \"a test tag was null\")",137],["assert(caught.getMessage === \"a test tag was null\")",137],["it(\"should throw NullPointerException if a null test tag is provided\") {",132]]},{"word":"tags","context":[["* @param testTags the optional list of tags for this test",316],["a.tags",183],["b.tags",182],["c.tags",182],["it(\"should run only those tests selected by the tags to include and exclude sets\") {",177],["d.tags",175],["f.tags",150],["e.tags",150],["* This trait's implementation returns tags that were passed as strings contained in <code>Tag</code> objects passed to",149],["g.tags",124]]},{"word":"tail","context":[["rest = rest.tail",458],["case head :: tail =>",418],["parse(tail)",328],["else Cons(as.head, apply(as.tail: _*))",179],["args = tail",176],["lazy val tail = tl",138],["Cons(() => head, () => tail)",134],["case class Cons[+A](head: A, tail: List[A]) extends List[A]",125],["else cons(as.head, apply(as.tail: _*))",124],["stack = stack.tail",102]]},{"word":"tailrec","context":[["@tailrec",9640],["import scala.annotation.tailrec",7796],["@annotation.tailrec",2207],["import annotation.tailrec",707],["@scala.annotation.tailrec",603],["import scala.annotation.{switch, tailrec}",96],["import scala.annotation.{ switch, tailrec }",44],["@inline @tailrec",30],["// @annotation.tailrec",23],["@tailrec final",22]]},{"word":"take","context":[["<console>:15: error: org.scalatest.words.NewContainWord does not take parameters",100],["it(\"should allow both tests that take fixtures and tests that don't\") {",93],["it(\"should pass a NoArgTest to withFixture for tests that take no fixture\") {",81],["it(\"should not pass a NoArgTest to withFixture for tests that take a Fixture\") {",81],["* of the set can be found quickly. If you want to learn more you can take a look",71],["def take(n: Int): Stream[A] = this match {",69],[".take(1)",62],["* <li>write tests that take a fixture parameter</li>",59],["* <li>(You can also define tests that don't take a fixture parameter.)</li>",59],["assertEquals(\"jan\", filter.select(\"tag\").take(1)(0)(0))",54]]},{"word":"target","context":[["target",265],["def this(target: XFormsEventTarget) = this(target, EmptyGetter)",204],["def this(target: XFormsEventTarget) = this(target, EmptyGetter)",204],["import edu.gemini.spModel.target.SPTarget",199],["target match {",184],["lazy val target = setupTarget(None)",179],["target,",115],["\"-target:jvm-1.8\",",99],["val env = TargetEnvironment.create(target)",98],["val target = new SPTarget(ra.toDegrees, dec.toDegrees)",93]]},{"word":"task","context":[["import mesosphere.marathon.core.task.Task",486],["assert(task.isDefined)",276],["task",235],["task.cancel()",215],["import mesosphere.marathon.core.task.tracker.TaskTracker",193],["val (taskInfo, taskPorts) = task.get",163],["val f = task.runAsync",115],["val task: Option[(TaskInfo, Seq[Long])] = buildIfMatches(",115],["case Some(task) =>",114],["val task = tasks(0)",111]]},{"word":"tasks","context":[["import mesosphere.marathon.tasks.TaskTracker",204],["assert(timer.tasks.isEmpty)",171],["assert(s.state.get.tasks.isEmpty,",162],["package mesosphere.marathon.tasks",134],["\"TestScheduler should have no pending tasks\")",130],["val task = tasks(0)",111],["freshRack, // list of tasks register in the cluster",111],["assert(timer.tasks.size === 1)",109],["assert(tasks.size === 1)",95],["for (task <- tasks) {",69]]},{"word":"td","context":[["* </td>",1497],["</td>",1475],["<td>",920],["* <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: center\">",792],["*   </td>",507],["* <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: right\">",420],["* <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: left\">",284],["*   <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: left\">",169],["*   <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: right\">",169],["*   <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: center\">",144]]},{"word":"template","context":[["* To change this template use File | Settings | File Templates.",967],["* and open the template in the editor.",324],["useCassandraConfig(Seq(\"cassandra-default.yaml.template\"))",126],["* To change this template file, choose Tools | Templates",118],["* To change this template, choose Tools | Template Manager",113],["* If you use it as a template to create your own app, please use `spark-submit` to submit your app.",111],["package org.template.recommendation",110],["package org.template.similarproduct",94],["* To change this template, choose Tools | Templates",93],["</xsl:template>",84]]},{"word":"terms","context":[["* Notwithstanding to the terms of section 5 (5. Conveying Modified Source",1872],["* In accordance with the terms of section 7 (7. Additional Terms.) of",1872],["* This Source Code Form is subject to the terms of the Mozilla Public",767],["/* This Source Code Form is subject to the terms of the Mozilla Public",246],["* @param timeStamp a <code>Long</code> indicating the time this event was reported, expressed in terms of the",166],["def nextInt: (Int, RNG) // Should generate a random `Int`. We'll later define other functions in terms of `nextInt`.",75],["* This source code is distributed under the terms of",67],["*   The precise terms and conditions for copying, distribution and",47],["* on the Program, the distribution of the whole must be on the terms of",47],["*     distributed under the terms of Sections 1 and 2 above on a medium",47]]},{"word":"test","context":[["import play.api.test.Helpers._",2015],["def withFixture(test: OneArgTest): Outcome = { test(\"hi\") }",1727],["def withFixture(test: OneArgTest): Outcome = { test(\"hi\") }",1727],["def withFixture(test: OneArgTest) { test(\"hi\") }",1633],["def withFixture(test: OneArgTest) { test(\"hi\") }",1633],["import play.api.test._",1554],["package test",1389],["def withFixture(test: OneArgTest) {}",1259],["test(",1226],["test.c: In function 'main':",906]]},{"word":"testName","context":[["override def run(testName: Option[String], args: Args): Status = {",391],["testName: String,",232],["it(\"should execute one test when run is called with a defined testName\") {",193],["* @param testName an optional name of one test to run. If <code>None</code>, all relevant tests should be run.",193],["it(\"should execute all tests when run is called with testName None\") {",193],["assert(rep.testSucceededEventsReceived(0).testName == \"test 1\")",193],["protected override def runTest(testName: String, args: Args): Status = {",183],["super.run(testName, args)",180],["val testName = \"test name\"",173],["assert(repB.lastEvent.get.testName endsWith \"test this\")",159]]},{"word":"testkit","context":[["import akka.testkit.TestProbe",830],["import akka.testkit._",689],["import akka.testkit.TestKit",628],["import akka.testkit.{ImplicitSender, TestKit}",420],["import akka.testkit.TestActorRef",367],["import akka.testkit.ImplicitSender",301],["import spray.testkit.ScalatestRouteTest",281],["package com.typesafe.slick.testkit.tests",213],["import spray.testkit.Specs2RouteTest",208],["import akka.http.scaladsl.testkit.ScalatestRouteTest",192]]},{"word":"tests","context":[["package tests",299],["val tests = Table(",247],["// SlowAsMolasses is included. both tests should be included but one ignored",225],["// SlowAsMolasses is included, and both tests should be included",225],["package com.typesafe.slick.testkit.tests",213],["val tests = TestSuite {",198],["* @param testName an optional name of one test to run. If <code>None</code>, all relevant tests should be run.",193],["it(\"should execute all tests when run is called with testName None\") {",193],["it(\"should run only those tests selected by the tags to include and exclude sets\") {",177],["it(\"should report as ignored, and not run, tests marked ignored\") {",158]]},{"word":"text","context":[["import java.text.SimpleDateFormat",2725],["val text =",866],["* <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: center\">",792],["import org.geotools.filter.text.ecql.ECQL",464],["* <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: right\">",420],["import org.locationtech.geomesa.utils.text.WKTUtils",375],["import com.intellij.openapi.util.text.StringUtil",369],["doTest(text, resultText)",367],["contentType = \"text/html\"",337],["text: String,",323]]},{"word":"than","context":[["// Automatically generated - edit tools/thread-code.py, rather than this code",200],["it(\"should generate a test failure if a Throwable, or an Error other than direct Error subtypes \" +",193],["it(\"should propagate out Errors that are direct subtypes of Error in JDK 1.5, other than \" +",177],["/** Returns `true` if this value is greater than x, `false` otherwise. */",150],["/** Returns `true` if this value is less than x, `false` otherwise. */",150],["/** Returns `true` if this value is greater than or equal to x, `false` otherwise. */",149],["/** Returns `true` if this value is less than or equal to x, `false` otherwise. */",149],["*               method. If Security and/or Audit are configured, this value must be a value other than None.",105],["// a function for testing whether an `A` is greater than another `A`.",90],["* If `trees` is a list of less than two elements, that list should be returned",67]]},{"word":"that","context":[["* documentation that, without modification of the Source Code, enables",1872],["that match {",577],["override def equals(that: Any) = that match {",576],["override def equals(that: Any) = that match {",576],["* that is created or manipulated using TA Buddy.",534],["* @param ordinal an <code>Ordinal</code> that can be used to place this event in order in the context of",520],["override def equals(that: Any): Boolean = that match {",447],["override def equals(that: Any): Boolean = that match {",447],["* @param formatter an optional formatter that provides extra information that can be used by reporters in determining",336],["* @param formatter an optional formatter that provides extra information that can be used by reporters in determining",336]]},{"word":"the","context":[["* This method enables the following syntax:",3913],["* furnished to do so, subject to the following conditions:",2674],["* In accordance with the terms of section 7 (7. Additional Terms.) of",1872],["* documentation that, without modification of the Source Code, enables",1872],["* Notwithstanding to the terms of section 5 (5. Conveying Modified Source",1872],["def `should use the implicit Equality in scope` {",1594],["it(\"should use the implicit Equality in scope\") {",1196],["* This method enables syntax such as the following:",1148],["* the matchers DSL.",1119],["* This method supports syntax such as the following:",1004]]},{"word":"theTestThatCalled","context":[["var theTestThatCalled = false",3518],["assert(a.theTestThatCalled)",383],["assert(b.theTestThatCalled)",344],["assert(!a.theTestThatCalled)",286],["assert(f.theTestThatCalled)",211],["assert(h.theTestThatCalled)",211],["assert(e.theTestThatCalled)",211],["assert(d.theTestThatCalled)",211],["assert(!k.theTestThatCalled)",211],["assert(!i.theTestThatCalled)",211]]},{"word":"theTestThisCalled","context":[["var theTestThisCalled = false",3518],["assert(a.theTestThisCalled)",555],["assert(!e.theTestThisCalled)",391],["assert(!d.theTestThisCalled)",383],["assert(c.theTestThisCalled)",383],["assert(b.theTestThisCalled)",383],["assert(!g.theTestThisCalled)",211],["assert(!i.theTestThisCalled)",211],["assert(!k.theTestThisCalled)",211],["assert(!h.theTestThisCalled)",211]]},{"word":"then","context":[["// then",2079],["//then",749],["then(\"the result is the difference between the two numbers\")",253],["// If I provide a specific testName to run, then it should ignore an Ignore on that test",148],["* If the field is not a {@code ChronoField}, then the result of this method",138],["fails to comply with the standard, then your patches will be rejected. For further information, please visit the coding",106],["* If the field is a {@link ChronoField} then the query is implemented here.",96],["* @param queryString the string with which to search, first by ID then by name",93],["* @param updateFunc State update function. If `this` function returns None, then",88],["* is unknown and passthrough fields are enabled, then the blob will be stored in",85]]},{"word":"thenReturn","context":[["when(mockDataManager.getOrganization(GiltName)).thenReturn(Success(Some(GiltOrg)))",314],["(any[ExecutionContext])).thenReturn(Future.successful(Some(SOME_USER)))",262],["when(mockDataManager.getTeam(GiltOrg, GiltTeamName)).thenReturn(Success(Some(GiltTeam)))",143],["when(tracker.get(app.id)).thenReturn(Set.empty[MarathonTask])",88],["when(repo.store(any())).thenReturn(Future.successful(app))",84],["when(tracker.count(app.id)).thenReturn(0)",78],[".thenReturn(Future.successful(getData))",74],["when(underlying.close(any[Time])) thenReturn Future.Done",65],["when(repo.allIds()).thenReturn(Future.successful(Seq(app.id.toString)))",64],["when(mockInfluxClientFactory.getClient(None)).thenReturn(mockClient -> mockContext)",63]]},{"word":"there","context":[["\"hi there\"",341],["val msg = \"hi there, dude\"",250],["assert(noteList(0).message == \"hi there\")",176],["assert(alertList(0).message == \"hi there\")",176],["it(\"should throw an exception if there is no underlying profile\") {",122],["a.run(None, Args(SilentReporter, Stopper.default, Filter(), ConfigMap(\"hi\" -> \"there\"), None, new Tracker, Set.empty))",112],["And(\"there are no more interactions\")",103],["alert(\"hi there\")",96],["info(\"hi there\")",96],["markup(\"hi there\")",96]]},{"word":"this","context":[["this",25786],["* distributed with this work for additional information",4340],["this()",2192],["this match {",1881],["* licence, when you create a Related Module, this Related Module is",1268],["* which accompanies this distribution and is available at",1232],["this.synchronized {",1184],["* accompanies this distribution and is available at",1026],["def this() = this(???)",1012],["def this() = this(???)",1012]]},{"word":"thisLineNumber","context":[["e1.failedCodeLineNumber.get should be (thisLineNumber - 3)",3278],["assert(caught1.failedCodeLineNumber === Some(thisLineNumber - 4))",1280],["assert(caught2.failedCodeLineNumber === Some(thisLineNumber - 4))",850],["assert(caught3.failedCodeLineNumber === Some(thisLineNumber - 4))",792],["assert(caught4.failedCodeLineNumber === Some(thisLineNumber - 4))",726],["e2.failedCodeLineNumber.get should be (thisLineNumber - 3)",608],["e.failedCodeLineNumber should be (Some(thisLineNumber - 3))",563],["assert(e.failedCodeLineNumber === (Some(thisLineNumber - 4)))",543],["tfe.failedCodeLineNumber should be (Some(thisLineNumber - 11))",517],["e.failedCodeLineNumber should be (Some(thisLineNumber - 14))",444]]},{"word":"thread","context":[["thread {",437],["thread.start()",420],["thread",227],["// Automatically generated - edit tools/thread-code.py, rather than this code",200],["thread.setDaemon(true)",151],["thread.start",137],["* print to the standard output. This method can be called safely by any thread.",132],["* This method can be called safely by any thread.",132],["* throw an exception. This method can be called safely by any thread.",131],["thread.join()",125]]},{"word":"thrift","context":[["import org.apache.thrift.protocol._",263],["package com.twitter.finagle.thrift",252],["import com.twitter.zipkin.conversions.thrift._",231],["import org.apache.thrift.protocol.TBinaryProtocol",225],["import org.apache.thrift.TApplicationException",134],["org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field_header.`type`)",106],["import org.apache.thrift.protocol.TProtocolFactory",93],["package com.twitter.finagle.zipkin.thrift",93],["// from https://github.com/apache/thrift/blob/master/lib/java/src/org/apache/thrift/protocol/TType.java",92],["// from https://github.com/apache/thrift/blob/master/lib/java/src/org/apache/thrift/protocol/TType.java",92]]},{"word":"throw","context":[["throw e",4110],["def `should do nothing if valid, else throw a TFE with an appropriate error message` {",1594],["def `should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value` {",1302],["throw new IllegalArgumentException(",1220],["throw newTestFailedException(",1208],["it(\"should do nothing if valid, else throw a TFE with an appropriate error message\") {",1196],["throw ex",1157],["throw new UnsupportedOperationException",927],["it(\"should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value\") {",659],["throw t",590]]},{"word":"throws","context":[["@throws(classOf[IOException])",1799],["@throws(classOf[Exception])",1579],["@throws(classOf[InterruptedException])",610],["* @throws NullPointerException if any of the passed values are <code>null</code>",392],["* @throws TestRegistrationClosedException if invoked after <code>run</code> has been invoked on this suite",350],["* @throws DuplicateTestNameException if a test with the same name has been registered previously",350],["@throws(classOf[TimeoutException])",332],["* @throws ArithmeticException if numeric overflow occurs",332],["@scala.throws[Exception](classOf[Exception])",306],["* @throws Exception",281]]},{"word":"time","context":[["import org.joda.time.DateTime",8580],["import com.twitter.conversions.time._",2236],["import org.joda.time._",961],["import org.joda.time.format.DateTimeFormat",932],["import com.github.nscala_time.time.Imports._",892],["import java.time.Instant",795],["import org.joda.time.LocalDate",726],["import org.joda.time.format.ISODateTimeFormat",675],["import org.joda.time.{DateTime, DateTimeZone}",655],["import java.time.LocalDate",366]]},{"word":"timeout","context":[["implicit val timeout = Timeout(5 seconds)",410],["implicit val timeout = Timeout(5.seconds)",390],["expectMsgPF(timeout) {",330],["val result = Await.result(response.get, timeout)",217],["timeout: Timeout,",172],["implicit val timeout = Timeout(10 seconds)",146],["Await.result(future, timeout.duration)",146],["assertTrue(f.get(timeout, TimeUnit.SECONDS).booleanValue)",118],["eventually(timeout(1000 milliseconds), interval(10 milliseconds)) {",105],["implicit val timeout = Timeout(1 second)",98]]},{"word":"timestamp","context":[["timestamp: Long,",168],[".value(_.timestamp, row.bi)",132],["timestamp: String = Timestamp.now().toString)",120],["timestamp,",117],["timestamp: String = Timestamp.now().toString) extends UpgradeEvent",105],["val timestamp = new DateTime()",95],["val timestamp = System.currentTimeMillis()",89],["val interval = new Interval(timestamp.minusDays(1), timestamp.plusDays(1))",71],["val interval = new Interval(timestamp.minusDays(1), timestamp.plusDays(1))",71],["timestamp",67]]},{"word":"title","context":[["title: String,",873],["title: U[String] = undefined,",455],["title.foreach(v => props.updateDynamic(\"title\")(v))",339],["title.foreach(v => props.updateDynamic(\"title\")(v))",339],["title,",260],["def title = column[String](\"title\")",144],["def title = column[String](\"title\")",144],["title = title,",138],["title = title,",138],["title: Option[String] = None,",130]]},{"word":"to","context":[["* furnished to do so, subject to the following conditions:",2674],["* furnished to do so, subject to the following conditions:",2674],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",2556],["* Notwithstanding to the terms of section 5 (5. Conveying Modified Source",1872],["* supplementary functions or services in addition to those offered by",1872],["* This Source Code Form is subject to the terms of the Mozilla Public",767],["case other => fail(\"Expected cause to be TestFailedException, but got: \" + other)",606],["* These activities include: offering paid services to customers,",539],["go to BeforeYouStartPage",539],["* @param ordinal an <code>Ordinal</code> that can be used to place this event in order in the context of",520]]},{"word":"toArray","context":[["}.toArray",778],[".toArray",426],["}).toArray",345],["val arr: Array[Any] = tuple.productIterator.toArray",204],["res.toArray",168],["ListSet(atomic.get.testNamesList.toArray: _*)",130],["result.toArray",105],[").toArray",98],["buf.toArray",88],["buffer.toArray",88]]},{"word":"toInt","context":[["var rowsPerThread = ((Nrows - 1) / nthreads).toInt + 1 // how many rows the thread processes",98],["case (ids, SDecimal(d)) if ids.length == 1 => d.toInt",96],["val es__ = (0 until n.toInt).foldLeft(TizenHelper.TizenExceptionBot)((_e, i) => {",92],["log.append(message(log.logEndOffset.toInt, log.logEndOffset.toInt))",81],["log.append(message(log.logEndOffset.toInt, log.logEndOffset.toInt))",81],["test[Int](_.toInt)",72],["val tag = bytes(index(i)).toInt",64],["val maxHeaderSizeInBytes = _maxHeaderSize.inBytes.toInt",63],["val n = readLine.toInt",61],["defining(params(\"id\").toInt){ issueId =>",57]]},{"word":"toList","context":[["}.toList",1874],[".toList",1218],["}).toList",841],["__obj.attributes.toList map {",325],[").toList",321],["result.toList",263],["b.testNames.iterator.toList",216],["a.testNames.iterator.toList",216],["buf.toList",205],["c.testNames.iterator.toList",203]]},{"word":"toMap","context":[["}.toMap",3432],["}).toMap",989],[".toMap",873],["} toMap",280],[").toMap",262],["val byName = all.map(x => x.toString.toLowerCase -> x).toMap",213],["}.toMap)",137],["map.toMap",123],["val outMap = outputBuffer.toMap",116],["result.toMap",104]]},{"word":"toSeq","context":[["}.toSeq",1220],[".toSeq",677],["}).toSeq",339],["}.collect.toSeq.sortBy(_._1)",215],["buffer.toSeq",147],["}.toSeq)",143],[").toSeq",102],["} toSeq",84],[".setJars(SparkContext.jarOfClass(this.getClass).toSeq)",80],["result.toSeq",77]]},{"word":"toSet","context":[["result.toSet",967],["}.toSet",754],[".toSet",500],["}).toSet",237],["assert(joined.toSet === Set(",111],["assert(carsCopy.collect.map(_.toString).toSet == cars.collect.map(_.toString).toSet)",106],["assert(carsCopy.collect.map(_.toString).toSet == cars.collect.map(_.toString).toSet)",106],["}.flatten.toSet",105],[").toSet",72],["TestUtils.waitUntilTrue(() => getBrokersWithPartitionDir(servers, topic, 0) == newReplicas.toSet,",64]]},{"word":"toString","context":[["override def toString: String = {",2286],["override def toString = {",2182],["override def toString =",1478],["sb.toString",1295],["override def toString: String =",1055],["override def toString(): String = {",1028],["override def toString = name",550],["sb.toString()",547],["apiResult.toString()",467],["override def toString() = {",459]]},{"word":"token","context":[["token",209],["token match {",194],["token: String,",143],["httpLayer.url(API.format(\"my.access.token\")) returns requestHolder",123],["stmt\"${(q.ast: Ast).token}\" mustEqual",123],["in.token match {",106],["case Some(token) =>",79],["token,",70],["token = STRINGLIT",68],["* @param tokenSecretProvider The token secret provider implementation.",68]]},{"word":"tools","context":[["package dotty.tools",674],["package dotty.tools.dotc",548],["package org.scalatest.tools",354],["import scala.tools.nsc._",322],["import scala.tools.nsc.Settings",301],["package kafka.tools",278],["import scala.tools.reflect.ToolBox",243],["**     ________ ___   / /  ___      __ ____  Scala.js tools             **",207],["// Automatically generated - edit tools/thread-code.py, rather than this code",200],["import scala.tools.nsc.Global",193]]},{"word":"topic","context":[["topic: String,",481],["val topic = \"test\"",458],["// create topic",344],["// create the topic",237],["val topicAndPartition = TopicAndPartition(topic, partition)",217],[".describedAs(\"topic\")",192],["val topic = \"topic\"",165],["val topic = \"topic\"",165],["val topic = topicAndPartition.topic",156],["val topic = topicAndPartition.topic",156]]},{"word":"topicAndPartition","context":[["val topicAndPartition = TopicAndPartition(topic, partition)",217],["val topic = topicAndPartition.topic",156],["val topicAndPartition = TopicAndPartition(topic, partitionToBeReassigned)",115],["info(\"Leader %s for partition %s being reassigned, \".format(currentLeader, topicAndPartition) +",111],["val reassignPartitionsCommand = new ReassignPartitionsCommand(zkClient, Map(topicAndPartition -> newReplicas))",97],["val topicAndPartition = TopicAndPartition(topic, 0)",93],[".format(controllerId, controller.epoch, replicaId, topicAndPartition, currState, targetState))",90],["controllerContext.partitionsBeingReassigned.remove(topicAndPartition)",74],["partitionStateMachine.handleStateChanges(Set(topicAndPartition), OnlinePartition, reassignedPartitionLeaderSelector)",74],[".format(caughtUpReplicas.size, reassignedReplicas.size, topicAndPartition) +",72]]},{"word":"tp","context":[["tp match {",923],["tp",553],["case tp: TypeRef =>",349],["case tp: RefinedType =>",341],["assert(tp.size === 2)",302],["case _ => tp",298],["case tp =>",256],["case tp: TypeProxy =>",238],["case tp: ClassInfo =>",218],["val tp = rep.testPendingEventsReceived",210]]},{"word":"tparam","context":[["* @tparam A",794],["* @tparam T",632],["* @tparam V",275],["* @tparam B",237],["* @tparam B The type of the request body.",153],["* @tparam K",131],["* @tparam R",110],["* @tparam S State type",98],["* @tparam T type of the doc",89],["* @tparam Q Input query class.",82]]},{"word":"tpe","context":[["tpe match {",559],["val tpe = weakTypeOf[T]",153],["tpe",143],["val tpe = AnyType",119],["case NewArray(tpe, lengths) =>",103],["case ArrayValue(tpe, elems) =>",103],["val sym = tpe.typeSymbol",93],["case tpe =>",90],["mixType(tree.tpe)",85],["writeType(tree.tpe)",84]]},{"word":"tr","context":[["</tr>",1638],["* </tr>",1380],["* <tr>",1268],["<tr>",1236],["* <table><tr><td class=\"usage\">",130],["* </td></tr></table>",130],["tr.shutdown",122],["<.tr(",82],["tr(",71],["* <tbody><tr>",68]]},{"word":"trait","context":[["* in the main documentation for trait <code>FlatSpec</code>.",405],["* for trait <code>FlatSpec</code>.",351],["trait Logging {",295],["sealed trait State",290],["trait A",197],["trait Crunchy",170],["sealed trait Tree[+A]",170],["trait Prog extends DSL {",158],["trait Logger {",149],["* This trait's implementation returns tags that were passed as strings contained in <code>Tag</code> objects passed to",149]]},{"word":"transform","context":[["super.transform(tree)",383],["package transform",331],["override def transform(tree: Tree): Tree = tree match {",109],["import javax.xml.transform.stream.StreamSource",107],["override def transform(dataset: DataFrame): DataFrame = {",100],["override def transform(tree: Tree): Tree = {",88],["case _ => super.transform(tree)",88],["import javax.xml.transform.stream.StreamResult",85],["def apply(plan: LogicalPlan): LogicalPlan = plan transform {",80],["import scala.xml.transform._",78]]},{"word":"tree","context":[["tree match {",2031],["tree",1070],["implicit val pos = tree.pos",717],["compareTokenCodes(tree, tree.copy())",513],["compareTokenCodes(tree, tree.copy())",513],["* @param ctx the parse tree",446],["super.transform(tree)",383],["tree.errors must beEmpty",377],["import com.intellij.psi.tree.IElementType",359],["val sym = tree.symbol",356]]},{"word":"trim","context":[["\"\"\".stripMargin.trim",813],["\"\"\".stripMargin.trim()",797],["\"\"\".stripMargin.replaceAll(\"\\r\", \"\").trim()",684],["\"\"\".stripMargin('|').replaceAll(\"\\r\", \"\").trim()",494],["\"\"\".trim.stripMargin)",418],["if (v.trim.endsWith(\"SNAPSHOT\"))",359],["\"\"\".stripMargin.trim)",355],["override def setFilter = notNull _ :: trim _ :: Nil",214],["|\"\"\".stripMargin.trim",154],["\"\"\".trim",144]]},{"word":"true","context":[["true",19727],["return true",4399],["case _ => true",2765],["while (true) {",1900],["case true =>",1287],["true,",1118],["publishMavenStyle := true,",933],["assertResult(true) {",652],["else true",601],["done = true",541]]},{"word":"try","context":[["try {",74766],["try{",1924],["try",1336],["*     try {",465],["//    try {",168],["// Will try and implement that tomorrow. Subtypes will be able to change the order.",159],["try body",154],["val result = try {",147],["//      try {",121],["else try {",111]]},{"word":"tuple","context":[["import cascading.tuple.Fields",485],["tuple(",275],["import cascading.tuple.TupleEntry",246],["val arr: Array[Any] = tuple.productIterator.toArray",204],["tuple",105],["import cascading.tuple.Tuple",103],["* tuple with the list of values for that key in `this`, `other1` and `other2`.",96],["* For each key k in `this` or `other`, return a resulting RDD that contains a tuple with the",96],["tuple =>",89],["import scalaz.std.tuple._",88]]},{"word":"twitter","context":[["import com.twitter.conversions.time._",2236],["import com.twitter.util.Future",1912],["import com.twitter.io.Buf",1267],["import com.twitter.scalding._",1157],["import com.twitter.finagle.Service",1058],["import com.twitter.finagle._",921],["import com.twitter.util._",847],["package com.twitter.scalding",700],["import com.twitter.logging.Logger",682],["import com.twitter.util.Await",668]]},{"word":"two","context":[["given(\"two integers\")",257],["then(\"the result is the difference between the two numbers\")",253],["val map1 = mutable.HashMap(\"one\" -> 1, \"two\" -> 2)",132],["val map3 = mutable.Map(\"one\" -> 1, \"two\" -> 2)",132],["val map3 = mutable.HashMap(\"one\" -> 1, \"two\" -> 2)",132],["val map1 = mutable.Map(\"one\" -> 1, \"two\" -> 2)",132],["val map2 = mutable.Map(\"one\" -> 1, \"two\" -> 2)",132],["val map2 = mutable.HashMap(\"one\" -> 1, \"two\" -> 2)",132],["val left4 = javaMap(Entry(1, \"one\"), Entry(2, \"two\"), Entry(3, \"three\"))",113],["Note that we can go back and forth between the two forms. We can curry",94]]},{"word":"type","context":[["type FixtureParam = String",7797],["_field.`type` match {",569],["def ref: this.type = this",429],["type Out = HNil",419],["assert (checker, \"count(/chk:checker/chk:step[@type='METHOD' and @match='POST']) = 2\")",287],["assert (checker, \"count(/chk:checker/chk:step[@type='METHOD' and @match='GET']) = 1\")",283],["assert (checker, \"count(/chk:checker/chk:step[@type='METHOD' and @match='PUT']) = 1\")",281],["type Out <: HList",281],["assert (checker, \"count(/chk:checker/chk:step[@type='REQ_TYPE_FAIL' and @notMatch='(?i)(application/xml)(;.*)?']) = 1\")",281],["@transient lazy val logger = Logger[this.type]",261]]},{"word":"typed","context":[["// These are meant to be typed into the REPL. You can also run",150],["typed[Int](v1)",134],["package com.twitter.scalding.typed",133],["typed[String](v2)",105],["typed[Boolean](v3)",84],["typed[_0](empty.length)",78],["import com.twitter.scalding.typed.TypedSink",72],["typed[Double](v4)",54],["typed[BBBB](l7)",49],["typed[Double](at1)",47]]},{"word":"types","context":[["import org.apache.spark.sql.types._",1484],["import org.bson.types.ObjectId",1070],["import org.jetbrains.plugins.scala.lang.psi.types._",704],["import org.apache.spark.sql.types.StructType",570],["package types",509],["import org.jetbrains.plugins.scala.lang.psi.types.result.TypingContext",416],["import org.jetbrains.plugins.scala.lang.psi.types.ScType",359],["import types._",342],["import org.jetbrains.plugins.scala.lang.psi.api.base.types.ScTypeElement",259],["import org.jetbrains.plugins.scala.lang.psi.types.result.{Success, TypingContext}",234]]},{"word":"typesafe","context":[["import com.typesafe.config.ConfigFactory",4975],["import com.typesafe.config.Config",3441],["import com.typesafe.scalalogging.LazyLogging",1793],["import com.typesafe.scalalogging.slf4j.Logging",1010],["import com.typesafe.config.{Config, ConfigFactory}",779],["import com.typesafe.scalalogging.StrictLogging",747],["import com.typesafe.scalalogging.slf4j.LazyLogging",700],["import com.typesafe.config._",633],["import com.typesafe.scalalogging.Logger",421],["import com.typesafe.scalalogging.slf4j.StrictLogging",366]]},{"word":"u","context":[["*  @param u  the vector to multiply by",407],["u",309],["*  @param u  the vector value to assign",243],["*  @param u  the vector to add",206],["*  @param u  the 2D array of values to assign",166],["for (i <- u.range1) {",150],["for (k <- i + 1 until u.dim1) {",147],["*  @param u  the vector to subtract",142],["Tuple2 (l, u)",132],["val f = Flip(u)",132]]},{"word":"uk","context":[["import uk.gov.hmrc.ct.box._",641],["package uk.gov.hmrc.ct.computations",492],["package uk.gov.hmrc.ct.accounts.frs102.boxes",386],["import uk.gov.hmrc.play.test.{UnitSpec, WithFakeApplication}",352],["import uk.gov.hmrc.ct.accounts.frs102.retriever.Frs102AccountsBoxRetriever",303],["import uk.gov.hmrc.ct.computations.retriever.ComputationsBoxRetriever",282],["import uk.gov.hmrc.play.http.HeaderCarrier",258],["package uk.gov.hmrc.ct.ct600.v3",244],["import uk.gov.hmrc.play.test.UnitSpec",221],["import uk.gov.hmrc.ct.box.{CtBoxIdentifier, CtOptionalInteger, Input}",219]]},{"word":"ul","context":[["* </ul>",1856],["* <ul>",1825],["</ul>",1065],["<ul>",331],["<ul class=\"evlogviewpad\">",213],["<ul class=\"unstyled\">",107],["* </ul><p>",86],["}</ul>",74],["*  </ul>",72],["*  <ul>",62]]},{"word":"undefined","context":[["style: U[js.Any] = undefined,",485],["title: U[String] = undefined,",455],["hidden: U[Boolean] = undefined,",453],["onDragOver: U[(_ <: SyntheticEvent[_]) => _] = undefined,",452],["ref: U[(_ <: dom.html.Element) => _] = undefined,",452],["id: U[String] = undefined,",452],["onDrag: U[(_ <: SyntheticEvent[_]) => _] = undefined,",452],["classID: U[String] = undefined,",452],["onTouchEnd: U[(_ <: SyntheticEvent[_]) => _] = undefined,",452],["onTouchMove: U[(_ <: SyntheticEvent[_]) => _] = undefined,",452]]},{"word":"underlying","context":[["* underlying futures complete. It fails immediately if any of them",396],["val underlying = new Observer[Int] {",189],["it(\"should invoke the method on the underlying profile\") {",148],["it(\"should throw an exception if there is no underlying profile\") {",122],["underlying",122],["it(\"should invoke the underlying profile method\") {",100],["val underlying = mock[ServiceFactory[Int, Int]]",100],["underlying: ServiceFactory[Req, Rep],",91],["val underlying = q\"${c.prefix}.underlying\"",88],["val underlying = q\"${c.prefix}.underlying\"",88]]},{"word":"unit","context":[["section(\"unit\")",163],["it should \"provide aliases for single unit values\" in {",130],["* Non-strict unit for capturing effects.",104],["def unit[A](a: A): Rand[A] =",93],["unit match {",89],["def unit[A](a: => A): F[A]",76],["package unit",76],["}.unit",76],["import org.elasticsearch.common.unit.TimeValue",74],["package org.deepdive.test.unit",72]]},{"word":"universe","context":[["import c.universe._",4608],["import scala.reflect.runtime.universe._",2130],["val universe = Universe.createNew()",386],["import scala.reflect.runtime.{universe => ru}",376],["import scala.reflect.runtime.universe.TypeTag",358],["import scala.reflect.runtime.universe",299],["val universe = Universe.createNew",172],["import universe._",160],["import context.universe._",146],["c.universe.reify(",123]]},{"word":"until","context":[["for (i <- 0 until resBytes.length) {",634],["for (k <- 0 until 20) {",362],["for (i <- 0 until n) {",303],["(0 until 9999).foreach(x => buffer.onNext(x))",260],["for (k <- 0 until dim1 if k != i) {",242],["for (i <- 0 until 10) {",214],["while (i < until) {",209],["for (i <- 0 until size) {",209],["0.until(CAPACITY - BLOCK_SIZE + 1, BLOCK_SIZE) foreach { i =>",200],["for (i <- 0 until n) aa(i) = rn.nextDouble ()",175]]},{"word":"up","context":[["ensureTestFailedEventReceived(spec, \"should blow up\")",864],["// set up",205],["\"should blow up\" in { fixture =>",199],["\"should blow up\" in {",192],["* An integration test will fire up a whole play application in a real (or headless) browser",150],["ensureTestFailedEventReceived(spec, \"Scenario: should blow up\")",138],["it(\"should blow up\") {",112],["*     finally writer.close() // clean up the fixture",98],["def sum(ints: List[Int]): Int = ints match { // A function that uses pattern matching to add up a list of integers",96],["it should \"blow up\" in { fixture =>",90]]},{"word":"update","context":[["if (!compareAndSet(current, update))",488],["update",353],["update()",312],["}.update.apply()",253],["} // update",217],["}.update().apply()",193],["update(\"@class\", PropValue(AbsString.alpha(\"Object\"))).",151],["ref = update",146],["val serializedData = update.toByteArray",138],["val header = update.header",138]]},{"word":"updateDynamic","context":[["tabIndex.foreach(v => props.updateDynamic(\"tabIndex\")(v))",339],["onScroll.foreach(v => props.updateDynamic(\"onScroll\")(v))",339],["onDragOver.foreach(v => props.updateDynamic(\"onDragOver\")(v))",339],["onAnimationIteration.foreach(v => props.updateDynamic(\"onAnimationIteration\")(v))",339],["title.foreach(v => props.updateDynamic(\"title\")(v))",339],["onCopy.foreach(v => props.updateDynamic(\"onCopy\")(v))",339],["onBlur.foreach(v => props.updateDynamic(\"onBlur\")(v))",339],["is.foreach(v => props.updateDynamic(\"is\")(v))",339],["onAnimationStart.foreach(v => props.updateDynamic(\"onAnimationStart\")(v))",339],["contextMenu.foreach(v => props.updateDynamic(\"contextMenu\")(v))",339]]},{"word":"uri","context":[["uri: String,",219],["get(uri.getPath) {",149],["import com.netaporter.uri.Uri",123],["uri,",70],["uri",65],["implicit val conn = Datomic.connect(uri)",61],["import com.netaporter.uri.dsl._",56],["* @param uri",56],["uri: URI,",54],["val uri = new URI(path)",54]]},{"word":"url","context":[["url: String,",569],["url",212],["if (propertyList.isEmpty) throw new IllegalStateException(s\"No 'produces' defined for the $url\")",176],["url: https://github.com/kishorereddy/scala-slate",172],["case Ok(ResponseInviteUrl(url)) ⇒",135],["url should startWith(groupInviteConfig.baseUrl)",135],["url: www.slatekit.com",132],["url,",125],["httpLayer.url(API.format(\"my.access.token\")) returns requestHolder",123],["val article = TestUtils.getArticle(url = url)",114]]},{"word":"use","context":[["* Redistribution and use in source and binary forms, with or without",3573],["* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",2556],["def `should use an explicitly provided Equality` {",1594],["def `should use the implicit Equality in scope` {",1594],["it(\"should use an explicitly provided Equality\") {",1196],["it(\"should use the implicit Equality in scope\") {",1196],["* To change this template use File | Settings | File Templates.",967],["Redistribution and use in source and binary forms, with or without",639],["* Redistribution and use in source and binary forms, with or without modification,",339],["* use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of",287]]},{"word":"used","context":[["* @param ordinal an <code>Ordinal</code> that can be used to place this event in order in the context of",520],["* @param formatter an optional formatter that provides extra information that can be used by reporters in determining",336],["* The color of the point marker's outline. When <code>null</code>, the series' or point's color is used.",192],["* concepts and algorithms presented in \"Scala for Machine Learning\". It should not be used to",131],["* @param fillColor The fill color of the point marker. When <code>null</code>, the series' or point's color is used.",131],["* The fill color of the point marker. When <code>null</code>, the series' or point's color is used.",131],["* @param configMap a <code>Map</code> of key-value pairs that can be used by the executing <code>Suite</code> of tests.",117],["* Hash partitioning is used to generate the RDDs with `numPartitions` partitions.",104],["* @param miniBatchFraction Fraction of data to be used per iteration.",104],["* @param stepSize Step size to be used for each iteration of gradient descent.",101]]},{"word":"user","context":[["* The interactive user interfaces in modified source and object code versions",539],["case Some(user) =>",403],["*        how to present this event to the user",376],["import lila.user.User",326],["user",311],["user: String,",268],["import lila.user.{ User, UserRepo }",230],["* @param message a localized message suitable for presenting to the user",198],["user: User,",177],["* @param user The user to save.",170]]},{"word":"userName","context":[["val userName = params(\"userName\")",349],["val userName = params(\"userName\")",349],["userName: String,",180],["* @param userName the user name of the repository owner",165],["val userName = \"Rock Jam\"",138],["Activities insert Activity(userName, repositoryName, activityUserName,",89],["getAccountByUserName(userName).map { x =>",83],["repository.originUserName.getOrElse(repository.userName),",81],["getAccountByUserName(userName).map { account =>",80],["whenReady(service.handleSignUp(transactionHash, userName, userSex)) { resp ⇒",80]]},{"word":"using","context":[["* that is created or manipulated using TA Buddy.",534],["using(Git.open(getRepositoryDir(repository.owner, repository.name))){ git =>",490],["using(",262],["using(new RevWalk(git.getRepository)){ revWalk =>",187],["it should \"create values using UOM factories\" in {",133],["using(new TreeWalk(git.getRepository)){ treeWalk =>",127],["* Merge the values for each key using an associative reduce function. This will also perform",113],["* Image markers only. Set the image width explicitly. When using this option, a <code>width</code> must also be set.",112],["* Image markers only. Set the image width explicitly. When using this option, a <code>height</code> must also be set.",112],["// A definition of factorial, using a local, tail recursive function",98]]},{"word":"util","context":[["import scala.util.Try",8033],["import java.util.UUID",7625],["import scala.util.Random",7340],["import java.util.Date",6599],["import akka.util.Timeout",5496],["import java.util",4979],["import java.util.concurrent.TimeUnit",4323],["import java.util.Properties",3916],["import scala.util.control.NonFatal",3207],["import scala.util.{Failure, Success, Try}",2670]]},{"word":"utils","context":[["import kafka.utils._",1122],["package utils",1031],["import org.locationtech.geomesa.utils.geotools.SimpleFeatureTypes",683],["import com.normation.utils.HashcodeCaching",394],["import org.locationtech.geomesa.utils.text.WKTUtils",375],["import org.locationtech.geomesa.utils.geotools.RichSimpleFeatureType.RichSimpleFeatureType",359],["import kafka.utils.TestUtils",311],["import kafka.utils.Logging",292],["import com.normation.utils.StringUuidGenerator",281],["import org.locationtech.geomesa.utils.geotools.Conversions._",276]]},{"word":"v","context":[["v",1392],["v match {",1133],["case (k, v) =>",497],["if (v.trim.endsWith(\"SNAPSHOT\"))",359],["case Some(v) => v",356],["case Some(v) => v",356],["onDrop.foreach(v => props.updateDynamic(\"onDrop\")(v))",339],["onBlur.foreach(v => props.updateDynamic(\"onBlur\")(v))",339],["onChange.foreach(v => props.updateDynamic(\"onChange\")(v))",339],["onBlur.foreach(v => props.updateDynamic(\"onBlur\")(v))",339]]},{"word":"v1","context":[["val v1 = Variable(e1)",165],["typed[Int](v1)",134],[".source(Tsv(\"mat1\", ('x1, 'y1, 'v1)), List((1, 1, 1.0), (2, 2, 3.0), (1, 2, 4.0)))",118],["val p1: Pipe = Tsv(\"mat1\", ('x1, 'y1, 'v1)).read",99],["assertEquals(23, v1)",94],["val tp1 = p1.toTypedPipe[(Int, Int, Double)](('x1, 'y1, 'v1))",90],["val v1Vals = Variable(v1).range",84],["* pair of elements will be returned as a (k, (v1, v2)) tuple, where (k, v1) is in `this` and",81],["* pair of elements will be returned as a (k, (v1, v2)) tuple, where (k, v1) is in `this` and",81],["v1(idx) = currTriple; idx += 1",70]]},{"word":"v2","context":[["import mesosphere.marathon.api.v2.json.Formats._",322],["package mesosphere.marathon.api.v2",303],["package uk.gov.hmrc.ct.ct600.v2",209],["val v2 = Variable(e2)",149],["* Questo file è proprietà del gruppo ProTech, viene rilasciato sotto licenza Apache v2.",145],["package mesosphere.marathon.api.v2.json",122],["typed[String](v2)",105],["package uk.gov.hmrc.ct.ct600e.v2",96],["import mesosphere.marathon.api.v2.Validation._",96],["* pair of elements will be returned as a (k, (v1, v2)) tuple, where (k, v1) is in `this` and",81]]},{"word":"val","context":[["val e1 = intercept[TestFailedException] {",7354],["val caught1 = intercept[TestFailedException] {",6788],["val caught2 = intercept[TestFailedException] {",5192],["val caught3 = intercept[TestFailedException] {",4858],["val e2 = intercept[TestFailedException] {",3429],["implicit val ise = upperCaseStringEquality",2774],["val rep = new EventRecordingReporter",2459],["val e1 = intercept[exceptions.NotAllowedException] {",2223],["val sc = new SparkContext(conf)",2072],["val f = new Fixture",1701]]},{"word":"valid","context":[["def `should do nothing if valid, else throw a TFE with an appropriate error message` {",1594],["it(\"should do nothing if valid, else throw a TFE with an appropriate error message\") {",1196],["\"should do nothing if valid, else throw a TFE with an appropriate error message\" in {",286],["* all returns a list of all the valid, known values. We use",218],["case Good(validFun) => Good(validFun(valid))",105],["case Good(valid) =>",105],["valid",93],["\"do something with valid data\" in new WithApplication {",88],["if (valid) {",77],["\"return a valid form with no errors\" in {",68]]},{"word":"validate","context":[["override def validate(boxRetriever: Frs102AccountsBoxRetriever): Set[CtValidation] = {",215],["(js \\ \"value\").validate[String] match {",190],["validator.validate(req, response, chain)",190],["// Set a known test id so we can validate the unique property is added",162],["validate()",156],["override def validate(name: String, value: String, messages: Messages): Option[String] =",146],["assertResultFailed(validator.validate(request(\"POST\", \"/a/b\", \"application/xml\", goodXML_XSD1, false,",146],["val boundParams = params.validate(arguments)",134],["params.validate(arguments)",118],["// validate the total number of query-hits",108]]},{"word":"value","context":[["value match {",2570],["value",1899],["def `should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value` {",1302],["it(\"should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value\") {",659],["case _ => value",628],["* @param value",508],["@param expr1 : a value",480],["@param expr2 : a value",480],["if (value == null) {",420],["Future.value(response)",359]]},{"word":"values","context":[[".values",415],["values",405],["* @throws NullPointerException if any of the passed values are <code>null</code>",392],["* lower case to avoid collisions with the camel cased values",218],["* all returns a list of all the valid, known values. We use",218],["* with the camel cased values above.",217],["* UNDEFINED captures values that are sent either in error or",217],["val values = findValues",187],["infoValues(values)",168],["*  @param u  the 2D array of values to assign",166]]},{"word":"var","context":[["var i = 0",15521],["var theTestThisCalled = false",3518],["var theTestThatCalled = false",3518],["var count = 0",2464],["var j = 0",2153],["var theTestTheOtherCalled = false",1511],["var i: Int = 0",1330],["var sum = 0.0",1064],["var c = 0",1033],["var i = 1",1018]]},{"word":"variable","context":[["import cc.factorie.variable._",256],["* We use all CAPS for the variable name to avoid collisions",217],["package cc.factorie.variable",135],["* @param solver Solver where the variable will be used",60],["val c1IndexF = c1.variable.range.indexOf(Regular(false))",58],["val c1IndexT = c1.variable.range.indexOf(Regular(true))",58],["val c1Index7 = c1.variable.range.indexOf(Regular(0.7))",56],["val c1Index9 = c1.variable.range.indexOf(Regular(0.9))",56],["val c1Index3 = c1.variable.range.indexOf(Regular(0.3))",56],["val c4Index1 = c4.variable.range.indexOf(Regular(1))",56]]},{"word":"vector","context":[["*  @param u  the vector to multiply by",407],["*  @param b  the other vector",314],["*  @param b  the vector to add",244],["*  @param u  the vector value to assign",243],["*  @param u  the vector to add",206],["*  @param b  the constant vector",168],["*  @param u  the vector to subtract",142],["*  @param u    the vector to assign to the column",123],["*  @param u  the vector to set the diagonal to",121],["*  @param size  the size of the vector (upper bound = size - 1)",119]]},{"word":"verify","context":[["verify()",290],["verify(",259],["// verify",171],[".verify",144],["import org.mockito.Mockito.verify",125],["verify(mockClown, times(1)).hasBigRedNose",119],["import org.mockito.Mockito.{times, verify, when}",105],["verify(mockClown, times(2)).hasBigRedNose",105],["verify(offerMatcher).matchOffer(deadline, offer)",79],["import org.mockito.Mockito.{verify, when}",78]]},{"word":"version","context":[["*  @version 1.2",1113],["* @version 1.0",492],["version: String,",417],["version: Int,",241],["val new_p = apply( p, name, rewriterules, proofSize, version, ProofLinkPassing )",234],["version,",222],["publishTo <<= version { (v: String) =>",208],["|        \"version\":0",192],["version := Version,",188],["version match {",177]]},{"word":"view","context":[["import android.view.View",495],["lazy val doc = Jsoup.parse(view.body)",231],["view",211],["import android.view._",183],["import android.view.ViewGroup",162],["import android.view.LayoutInflater",138],["package view",125],["import android.view.MenuItem",119],["import android.view.View.OnClickListener",111],["import android.view.{LayoutInflater, View, ViewGroup}",96]]},{"word":"w","context":[["w.wl",1626],["w.wl(\";\")",240],["w.dismiss()",213],["w.await()",175],["w",159],["w.braced {",158],["w.close()",124],["val w = new Waiter",121],["List(\"-w\", \"com.example.root\"),",121],["writeDoc(w, doc)",105]]},{"word":"was","context":[["// An Ignored test that was both included and excluded should not generate a TestIgnored event",225],["// An Ignored test that was not included should not generate a TestIgnored event",225],["* that were added by the server after this library was",217],["//This class was generated by build script, please don't change this",186],["* @param threadName a name for the <code>Thread</code> about whose activity this event was reported",166],["* @param timeStamp a <code>Long</code> indicating the time this event was reported, expressed in terms of the",166],["throw new NullPointerException(\"ordinal was null\")",144],["throw new NullPointerException(\"threadName was null\")",144],["throw new NullPointerException(\"payload was null\")",140],["assert(caught2.getMessage === \"a test tag was null\")",137]]},{"word":"we","context":[["Then(\"we receive a NotAuthenticated response\")",270],["* Question: Should we implment this method here, or should it remain abstract",178],["// Set a known test id so we can validate the unique property is added",162],["* @param name name of collection we are crawling for",142],["// we need an ActorSystem to host our application in",134],["// Let's read out what we wrote.",106],["// This is safer, but we lose the error information as it returns",102],["// Now we can use our general `formatResult` function",97],["Note that we can go back and forth between the two forms. We can curry",94],["a term we inherit from category theory.",94]]},{"word":"web","context":[["* serving files in a web or/and network application,",540],["* @author <a href=\"http://shams.web.rice.edu/\">Shams Imam</a> (shams@rice.edu)",365],["* This file is part of mycollab-web.",278],["/* - Coeus web framework -------------------------",250],["import com.normation.rudder.web.model.CurrentUser",168],["package com.twitter.zipkin.web",137],["\"web\",",125],["// call web hook",112],["import org.springframework.web.bind.annotation._",99],["* Magmanics Licensing. This web application allows for centralized control",97]]},{"word":"when","context":[["// when",2056],["def `should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value` {",1302],["* licence, when you create a Related Module, this Related Module is",1268],["//when",778],["it(\"should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value\") {",659],["import org.mockito.Mockito.when",337],["when(mockDataManager.getOrganization(GiltName)).thenReturn(Success(Some(GiltOrg)))",314],["when(mockDataManager.findUserByToken(Matchers.eq(SOME_TOKEN), any[DateTime])",296],["\"A Stack\" when {",283],["when(\"one is subracted from the other\")",253]]},{"word":"where","context":[["where",426],[".where",272],["// where to search snippet",163],["def countBy(where: SQLSyntax)(implicit session: DBSession = autoSession): Long = {",134],["where(",92],["|where",91],["* Return a new \"state\" DStream where the state for each key is updated by applying",81],["* pair of elements will be returned as a (k, (v1, v2)) tuple, where (k, v1) is in `this` and",81],["where = where,",78],["where = where,",78]]},{"word":"which","context":[["* which accompanies this distribution and is available at",1232],["* which accompanies this distribution, and is available at",935],["* @param driver the <code>WebDriver</code> with which to drive the browser",350],["* @param slideDuration  sliding interval of the window (i.e., the interval after which",346],["* @param specText the specification text, which will be combined with the descText of any surrounding describers",247],["* @param reporter the <code>Reporter</code> to which results will be reported",202],["contentType(home) must beSome.which(_ == \"text/html\")",195],["* @param loginInfo The login info for which the auth info should be saved.",131],["*  (AGPL) version 3.0 which accompanies this distribution, and is available in",130],["* iterator will return those names in the order in which the tests were registered. Each test's name is composed",128]]},{"word":"while","context":[["while (true) {",1900],["while (iter.hasNext) {",1010],["while (i < len) {",863],["while (i < n) {",836],["while (iterator.hasNext) {",805],["while (it.hasNext) {",755],["while (i < length) {",626],["while (i < size) {",581],["while(true) {",493],["while (i >= 0) {",458]]},{"word":"width","context":[["* <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: center\">",792],["* <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: right\">",420],["* @param windowDuration width of the window; must be a multiple of this DStream's",371],["* <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: left\">",284],["* @param lineWidth The width of the point marker's outline.",192],["* The width of the point marker's outline.",192],["*   <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: left\">",169],["*   <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: right\">",169],["*   <td style=\"border-width: 1px; padding: 3px; border: 1px solid black; text-align: center\">",144],["val width: js.UndefOr[Double] = js.undefined",141]]},{"word":"will","context":[["*                       the new DStream will generate RDDs); must be a multiple of this",321],["* will register the passed string for forwarding later during test execution. If invoked while this",263],["* the current reporter immediately. If invoked at any other time, it will",263],["* @param specText the specification text, which will be combined with the descText of any surrounding describers",247],["* @param reporter the <code>Reporter</code> to which results will be reported",202],["* @param stopper the <code>Stopper</code> that will be consulted to determine whether to stop execution early.",202],["// Will try and implement that tomorrow. Subtypes will be able to change the order.",159],["* An integration test will fire up a whole play application in a real (or headless) browser",150],["* This method will register the test for later execution via an invocation of one of the <code>execute</code>",145],["// test direct sorting (will modify the data array)",143]]},{"word":"with","context":[["* distributed with this work for additional information",4340],["* Redistribution and use in source and binary forms, with or without",3573],["* In accordance with the terms of section 7 (7. Additional Terms.) of",1872],["def `should do nothing if valid, else throw a TFE with an appropriate error message` {",1594],["with Matchers",1514],["def `should throw NotAllowedException with correct stack depth and message when RHS contain duplicated value` {",1302],["* Created with IntelliJ IDEA.",1203],["it(\"should do nothing if valid, else throw a TFE with an appropriate error message\") {",1196],["* documentation and/or other materials provided with the distribution.",943],["*    and/or other materials provided with the distribution.",906]]},{"word":"withFixture","context":[["def withFixture(test: OneArgTest): Outcome = { test(\"hi\") }",1727],["def withFixture(test: OneArgTest) { test(\"hi\") }",1633],["def withFixture(test: OneArgTest) {}",1259],["def withFixture(test: OneArgTest) {",862],["def withFixture(test: OneArgTest): Outcome = Succeeded",795],["def withFixture(test: OneArgTest): Outcome = {",653],["def withFixture(test: OneArgAsyncTest): FutureOutcome =",624],["override def withFixture(test: NoArgTest): Outcome = {",454],["super.withFixture(test)",452],["override def withFixture(test: NoArgTest) {",295]]},{"word":"without","context":[["* Redistribution and use in source and binary forms, with or without",3573],["* documentation that, without modification of the Source Code, enables",1872],["Redistribution and use in source and binary forms, with or without",639],["* Redistribution and use in source and binary forms, with or without modification,",339],["* to <code>ignore</code> without deleting or commenting out the actual test code. The test will not be executed, but a",128],["// Redistribution and use in source and binary forms, with or without",113],["* ''without'' the following capabilities:",102],["// *without* having to give it a name",95],["// we want to be able to test it independently, without having to spin up an actor",85],["*    list `xs` without its `head` element",64]]},{"word":"work","context":[["* distributed with this work for additional information",4340],["* See the NOTICE file distributed with this work for additional",769],["// See the LICENCE.txt file distributed with this work for additional",740],["* See the notice.md file distributed with this work for additional",637],["it should \"work\" in {",441],["* See the LICENCE.txt file distributed with this work for additional",344],["def `should work on parallel form` {",184],["callInfo() // This should work fine",154],["* in behavior would very likely not work.",128],["* Original work: SecureSocial (https://github.com/jaliss/securesocial)",120]]},{"word":"write","context":[["new Span().write",243],[".write(Tsv(\"output\"))",185],["override def write(out: DataOutput): Unit = {",166],["FormatUtils.newLink(img, link).write",158],[".write(Tsv(args(\"output\")))",157],["import org.json4s.native.Serialization.write",154],["_item.write(_oproto)",152],["override def write(_oprot: TProtocol): Unit = {",140],["\"write\" in { cycle => import cycle._",126],["org.json4s.jackson.Serialization.write(",123]]},{"word":"writer","context":[["writer.close()",1976],["writer.flush()",800],["writer.close",381],["val writer = new StringWriter()",171],["writer.toString",171],["writer.newLine()",166],["val writer = new StringWriter",165],["writer.flush",137],["package com.datastax.spark.connector.writer",133],["val writer = Reader.writable()",126]]},{"word":"www","context":[["* See http://www.cra.com or email figaro@cra.com for information.",856],["* http://www.eclipse.org/legal/epl-v10.html",689],["* See the project homepage at: http://www.monifu.org",633],["* or visit www.oracle.com if you need additional information or have any",372],["* http://www.jeffheaton.com",341],["* http://www.aifh.org",341],["xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">",270],["* http://www.joa-ebert.com/",218],["xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"",208],["* http://www.oculusinfo.com/",185]]},{"word":"x","context":[["x",2047],["case x => x",1230],["case x => x",1230],["case x =>",1226],["x match {",1017],["case Some(x) => x",736],["case Some(x) => x",736],["case Some(x) =>",606],["x += 1",516],["var x = 0",417]]},{"word":"xml","context":[["import scala.xml._",2235],["import scala.xml.NodeSeq",1195],["import scala.xml.XML",783],["<representation mediaType=\"application/xml\"/>",767],["import scala.xml.Elem",766],["import scala.xml.Node",644],["val xml =",343],["var attr: scala.xml.MetaData  = scala.xml.Null",312],["var attr: scala.xml.MetaData  = scala.xml.Null",312],["import scala.xml.Text",298]]},{"word":"xs","context":[["xs match {",301],["case x :: xs =>",251],["* @param xs A list of natural numbers",162],["xs",155],["case Cons(x, xs) => f(x, foldRight(xs, z)(f))",146],["case Cons(x, xs) => f(x, foldRight(xs, z)(f))",146],["if (xs.isEmpty)",144],["if (xs.isEmpty) None",126],["else Some(xs.sum / xs.length)",126],["else Some(xs.sum / xs.length)",126]]},{"word":"y","context":[["y",308],["y += 1",294],["x + y",211],["var y = 0",198],["struct S { int x; int y; };",192],["struct T { int x; int y; int z; };",147],["case Cons(x, Cons(y, Cons(3, Cons(4, _)))) => x + y",145],["case Cons(x, Cons(y, Cons(3, Cons(4, _)))) => x + y",145],["val yOuter: js.UndefOr[Double] = y",130],["override val y: js.UndefOr[Double] = yOuter",130]]},{"word":"yield","context":[["} yield {",14113],["} yield ()",2639],["} yield",1030],["} yield result",868],[") yield {",639],["} yield r",500],["yield {",411],["} yield res",292],["} yield a",217],["yield",217]]},{"word":"you","context":[["* licence, when you create a Related Module, this Related Module is",1268],["* you must retain the producer line in every report, form or document",540],["* or visit www.oracle.com if you need additional information or have any",372],["* If you use it as a template to create your own app, please use `spark-submit` to submit your app.",111],["* of items, as you do not have the option to unsubscribe.",110],["Thank you for your interest in the Facsimile project!",106],["`Function.uncurried` that you can use for uncurrying.",98],["// this actor only runs our route, but you could add",92],["* you will learn during the class.",81],["* For this example assignment you can use the following methods in class",81]]},{"word":"z","context":[["case Nil => z",334],["z",307],["struct T { int x; int y; int z; };",147],["case Cons(x, xs) => f(x, foldRight(xs, z)(f))",146],["case _ => z",137],["flag(\"z\").value shouldBe false",111],["val rdd2 = sc.parallelize(Array((1, 'x'), (2, 'y'), (2, 'z'), (4, 'w')))",102],["def pf (z: Double): Double =",89],["def foldRight[A,B](as: List[A], z: B)(f: (A, B) => B): B = // Utility functions",82],["as.foldRight(z)(f)",75]]},{"word":"zero","context":[["zero",132],["def zero: A",99],["val r = Atomic(zero)",81],["maybeCounts = Some(TaskCounts.zero),",69],["def zero = 0",61],["if (x == 0) throw new IllegalArgumentException(\"zero is not allowed\")",61],["*  them to zero.  Iterative algorithms give approximate values and if very close",59],["/** Use partial pivoting to find a maximal non-zero pivot and return its row",55],["*  and has no zero-entries.",52],["*  Note: If the frequency of some character is zero, then that character should not be",51]]},{"word":"zipkin","context":[["import com.twitter.zipkin.gen",273],["import com.twitter.zipkin.common.Span",238],["import com.twitter.zipkin.conversions.thrift._",231],["import com.twitter.zipkin.common._",209],["BuildProperties.buildPropertiesPackage := \"com.twitter.zipkin\",",139],["finagle(\"zipkin\"),",139],["package com.twitter.zipkin.web",137],["import com.twitter.zipkin.Constants",137],["package com.twitter.zipkin.storage.cassandra",134],["package com.twitter.zipkin.query",132]]},{"word":"zkClient","context":[["zkClient.close()",209],["AdminUtils.createOrUpdateTopicPartitionAssignmentPathInZK(zkClient, topic, expectedReplicaAssignment)",117],["var zkClient: ZkClient = null",113],["val reassignPartitionsCommand = new ReassignPartitionsCommand(zkClient, Map(topicAndPartition -> newReplicas))",97],["val zkClient = controller.controllerContext.zkClient",90],["val zkClient = controller.controllerContext.zkClient",90],["AdminUtils.deleteTopic(zkClient, topic)",89],["EasyMock.replay(zkClient)",78],["val controllerId = ZkUtils.getController(zkClient)",72],["val partitionsBeingReassigned = ZkUtils.getPartitionsBeingReassigned(zkClient)",69]]},{"word":"~","context":[["} ~",4347],["sealRoute(routes) ~>",207],["} // ~^",144],["sealRoute(services.workspaceRoutes) ~>",126],["} ~> check {",122],["(\"Name\" -> o.name) ~",116],["sealRoute(services.adminRoutes) ~>",114],[".withHeaders(ownerAuthHeader) ~>",114],["{ case p1 ~ p2 ~ p3 =>",109],["{ case p1 ~ p2 ~ p3 =>",109]]},{"word":"⇒","context":[["case _ ⇒",2484],["case None ⇒",2309],["case _ ⇒ false",431],["case e ⇒",333],["case _ ⇒ None",310],["val authorizedAction = requireAuth(clientData).map { implicit client ⇒",303],["whenReady(startPhoneAuth(phoneNumber)) { resp ⇒",256],["case NonFatal(t) ⇒",218],["case NonFatal(e) ⇒",218],["case e: Throwable ⇒",209]]}]